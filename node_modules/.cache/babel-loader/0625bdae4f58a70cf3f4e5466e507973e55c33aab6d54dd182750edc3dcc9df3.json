{"ast":null,"code":"/*! @azure/msal-common v15.7.0 2025-05-30 */\n'use strict';\n\nimport { Separators, CacheAccountType } from '../../utils/Constants.mjs';\nimport { buildClientInfo } from '../../account/ClientInfo.mjs';\nimport { buildTenantProfile } from '../../account/AccountInfo.mjs';\nimport { createClientAuthError } from '../../error/ClientAuthError.mjs';\nimport { AuthorityType } from '../../authority/AuthorityType.mjs';\nimport { getTenantIdFromIdTokenClaims } from '../../account/TokenClaims.mjs';\nimport { ProtocolMode } from '../../authority/ProtocolMode.mjs';\nimport { invalidCacheEnvironment } from '../../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\r\n *\r\n * Key : Value Schema\r\n *\r\n * Key: <home_account_id>-<environment>-<realm*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\r\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\r\n *      authorityType: Accounts authority type as a string\r\n *      name: Full name for the account, including given name and family name,\r\n *      lastModificationTime: last time this entity was modified in the cache\r\n *      lastModificationApp:\r\n *      nativeAccountId: Account identifier on the native device\r\n *      tenantProfiles: Array of tenant profile objects for each tenant that the account has authenticated with in the browser\r\n * }\r\n * @internal\r\n */\nclass AccountEntity {\n  /**\r\n   * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n   */\n  generateAccountId() {\n    const accountId = [this.homeAccountId, this.environment];\n    return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  }\n  /**\r\n   * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\r\n   */\n  generateAccountKey() {\n    return AccountEntity.generateAccountCacheKey({\n      homeAccountId: this.homeAccountId,\n      environment: this.environment,\n      tenantId: this.realm,\n      username: this.username,\n      localAccountId: this.localAccountId\n    });\n  }\n  /**\r\n   * Returns the AccountInfo interface for this account.\r\n   */\n  getAccountInfo() {\n    return {\n      homeAccountId: this.homeAccountId,\n      environment: this.environment,\n      tenantId: this.realm,\n      username: this.username,\n      localAccountId: this.localAccountId,\n      name: this.name,\n      nativeAccountId: this.nativeAccountId,\n      authorityType: this.authorityType,\n      // Deserialize tenant profiles array into a Map\n      tenantProfiles: new Map((this.tenantProfiles || []).map(tenantProfile => {\n        return [tenantProfile.tenantId, tenantProfile];\n      }))\n    };\n  }\n  /**\r\n   * Returns true if the account entity is in single tenant format (outdated), false otherwise\r\n   */\n  isSingleTenant() {\n    return !this.tenantProfiles;\n  }\n  /**\r\n   * Generates account key from interface\r\n   * @param accountInterface\r\n   */\n  static generateAccountCacheKey(accountInterface) {\n    const homeTenantId = accountInterface.homeAccountId.split(\".\")[1];\n    const accountKey = [accountInterface.homeAccountId, accountInterface.environment || \"\", homeTenantId || accountInterface.tenantId || \"\"];\n    return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  }\n  /**\r\n   * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\r\n   * @param accountDetails\r\n   */\n  static createAccount(accountDetails, authority, base64Decode) {\n    const account = new AccountEntity();\n    if (authority.authorityType === AuthorityType.Adfs) {\n      account.authorityType = CacheAccountType.ADFS_ACCOUNT_TYPE;\n    } else if (authority.protocolMode === ProtocolMode.OIDC) {\n      account.authorityType = CacheAccountType.GENERIC_ACCOUNT_TYPE;\n    } else {\n      account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\n    }\n    let clientInfo;\n    if (accountDetails.clientInfo && base64Decode) {\n      clientInfo = buildClientInfo(accountDetails.clientInfo, base64Decode);\n    }\n    account.clientInfo = accountDetails.clientInfo;\n    account.homeAccountId = accountDetails.homeAccountId;\n    account.nativeAccountId = accountDetails.nativeAccountId;\n    const env = accountDetails.environment || authority && authority.getPreferredCache();\n    if (!env) {\n      throw createClientAuthError(invalidCacheEnvironment);\n    }\n    account.environment = env;\n    // non AAD scenarios can have empty realm\n    account.realm = clientInfo?.utid || getTenantIdFromIdTokenClaims(accountDetails.idTokenClaims) || \"\";\n    // How do you account for MSA CID here?\n    account.localAccountId = clientInfo?.uid || accountDetails.idTokenClaims?.oid || accountDetails.idTokenClaims?.sub || \"\";\n    /*\r\n     * In B2C scenarios the emails claim is used instead of preferred_username and it is an array.\r\n     * In most cases it will contain a single email. This field should not be relied upon if a custom\r\n     * policy is configured to return more than 1 email.\r\n     */\n    const preferredUsername = accountDetails.idTokenClaims?.preferred_username || accountDetails.idTokenClaims?.upn;\n    const email = accountDetails.idTokenClaims?.emails ? accountDetails.idTokenClaims.emails[0] : null;\n    account.username = preferredUsername || email || \"\";\n    account.name = accountDetails.idTokenClaims?.name || \"\";\n    account.cloudGraphHostName = accountDetails.cloudGraphHostName;\n    account.msGraphHost = accountDetails.msGraphHost;\n    if (accountDetails.tenantProfiles) {\n      account.tenantProfiles = accountDetails.tenantProfiles;\n    } else {\n      const tenantProfile = buildTenantProfile(accountDetails.homeAccountId, account.localAccountId, account.realm, accountDetails.idTokenClaims);\n      account.tenantProfiles = [tenantProfile];\n    }\n    return account;\n  }\n  /**\r\n   * Creates an AccountEntity object from AccountInfo\r\n   * @param accountInfo\r\n   * @param cloudGraphHostName\r\n   * @param msGraphHost\r\n   * @returns\r\n   */\n  static createFromAccountInfo(accountInfo, cloudGraphHostName, msGraphHost) {\n    const account = new AccountEntity();\n    account.authorityType = accountInfo.authorityType || CacheAccountType.GENERIC_ACCOUNT_TYPE;\n    account.homeAccountId = accountInfo.homeAccountId;\n    account.localAccountId = accountInfo.localAccountId;\n    account.nativeAccountId = accountInfo.nativeAccountId;\n    account.realm = accountInfo.tenantId;\n    account.environment = accountInfo.environment;\n    account.username = accountInfo.username;\n    account.name = accountInfo.name;\n    account.cloudGraphHostName = cloudGraphHostName;\n    account.msGraphHost = msGraphHost;\n    // Serialize tenant profiles map into an array\n    account.tenantProfiles = Array.from(accountInfo.tenantProfiles?.values() || []);\n    return account;\n  }\n  /**\r\n   * Generate HomeAccountId from server response\r\n   * @param serverClientInfo\r\n   * @param authType\r\n   */\n  static generateHomeAccountId(serverClientInfo, authType, logger, cryptoObj, idTokenClaims) {\n    // since ADFS/DSTS do not have tid and does not set client_info\n    if (!(authType === AuthorityType.Adfs || authType === AuthorityType.Dsts)) {\n      // for cases where there is clientInfo\n      if (serverClientInfo) {\n        try {\n          const clientInfo = buildClientInfo(serverClientInfo, cryptoObj.base64Decode);\n          if (clientInfo.uid && clientInfo.utid) {\n            return `${clientInfo.uid}.${clientInfo.utid}`;\n          }\n        } catch (e) {}\n      }\n      logger.warning(\"No client info in response\");\n    }\n    // default to \"sub\" claim\n    return idTokenClaims?.sub || \"\";\n  }\n  /**\r\n   * Validates an entity: checks for all expected params\r\n   * @param entity\r\n   */\n  static isAccountEntity(entity) {\n    if (!entity) {\n      return false;\n    }\n    return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"localAccountId\") && entity.hasOwnProperty(\"username\") && entity.hasOwnProperty(\"authorityType\");\n  }\n  /**\r\n   * Helper function to determine whether 2 accountInfo objects represent the same account\r\n   * @param accountA\r\n   * @param accountB\r\n   * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\r\n   */\n  static accountInfoIsEqual(accountA, accountB, compareClaims) {\n    if (!accountA || !accountB) {\n      return false;\n    }\n    let claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\n    if (compareClaims) {\n      const accountAClaims = accountA.idTokenClaims || {};\n      const accountBClaims = accountB.idTokenClaims || {};\n      // issued at timestamp and nonce are expected to change each time a new id token is acquired\n      claimsMatch = accountAClaims.iat === accountBClaims.iat && accountAClaims.nonce === accountBClaims.nonce;\n    }\n    return accountA.homeAccountId === accountB.homeAccountId && accountA.localAccountId === accountB.localAccountId && accountA.username === accountB.username && accountA.tenantId === accountB.tenantId && accountA.environment === accountB.environment && accountA.nativeAccountId === accountB.nativeAccountId && claimsMatch;\n  }\n}\nexport { AccountEntity };","map":{"version":3,"names":["AccountEntity","generateAccountId","accountId","homeAccountId","environment","join","Separators","CACHE_KEY_SEPARATOR","toLowerCase","generateAccountKey","generateAccountCacheKey","tenantId","realm","username","localAccountId","getAccountInfo","name","nativeAccountId","authorityType","tenantProfiles","Map","map","tenantProfile","isSingleTenant","accountInterface","homeTenantId","split","accountKey","createAccount","accountDetails","authority","base64Decode","account","AuthorityType","Adfs","CacheAccountType","ADFS_ACCOUNT_TYPE","protocolMode","ProtocolMode","OIDC","GENERIC_ACCOUNT_TYPE","MSSTS_ACCOUNT_TYPE","clientInfo","buildClientInfo","env","getPreferredCache","createClientAuthError","invalidCacheEnvironment","utid","getTenantIdFromIdTokenClaims","idTokenClaims","uid","oid","sub","preferredUsername","preferred_username","upn","email","emails","cloudGraphHostName","msGraphHost","buildTenantProfile","createFromAccountInfo","accountInfo","Array","from","values","generateHomeAccountId","serverClientInfo","authType","logger","cryptoObj","Dsts","e","warning","isAccountEntity","entity","hasOwnProperty","accountInfoIsEqual","accountA","accountB","compareClaims","claimsMatch","accountAClaims","accountBClaims","iat","nonce"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-common/src/cache/entities/AccountEntity.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CacheAccountType, Separators } from \"../../utils/Constants.js\";\nimport type { Authority } from \"../../authority/Authority.js\";\nimport { ICrypto } from \"../../crypto/ICrypto.js\";\nimport { ClientInfo, buildClientInfo } from \"../../account/ClientInfo.js\";\nimport {\n    AccountInfo,\n    TenantProfile,\n    buildTenantProfile,\n} from \"../../account/AccountInfo.js\";\nimport {\n    createClientAuthError,\n    ClientAuthErrorCodes,\n} from \"../../error/ClientAuthError.js\";\nimport { AuthorityType } from \"../../authority/AuthorityType.js\";\nimport { Logger } from \"../../logger/Logger.js\";\nimport {\n    TokenClaims,\n    getTenantIdFromIdTokenClaims,\n} from \"../../account/TokenClaims.js\";\nimport { ProtocolMode } from \"../../authority/ProtocolMode.js\";\n\n/**\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\n *\n * Key : Value Schema\n *\n * Key: <home_account_id>-<environment>-<realm*>\n *\n * Value Schema:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      realm: Full tenant or organizational identifier that the account belongs to\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\n *      authorityType: Accounts authority type as a string\n *      name: Full name for the account, including given name and family name,\n *      lastModificationTime: last time this entity was modified in the cache\n *      lastModificationApp:\n *      nativeAccountId: Account identifier on the native device\n *      tenantProfiles: Array of tenant profile objects for each tenant that the account has authenticated with in the browser\n * }\n * @internal\n */\nexport class AccountEntity {\n    homeAccountId: string;\n    environment: string;\n    realm: string;\n    localAccountId: string;\n    username: string;\n    authorityType: string;\n    clientInfo?: string;\n    name?: string;\n    lastModificationTime?: string;\n    lastModificationApp?: string;\n    cloudGraphHostName?: string;\n    msGraphHost?: string;\n    nativeAccountId?: string;\n    tenantProfiles?: Array<TenantProfile>;\n\n    /**\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\n     */\n    generateAccountId(): string {\n        const accountId: Array<string> = [this.homeAccountId, this.environment];\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n\n    /**\n     * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\n     */\n    generateAccountKey(): string {\n        return AccountEntity.generateAccountCacheKey({\n            homeAccountId: this.homeAccountId,\n            environment: this.environment,\n            tenantId: this.realm,\n            username: this.username,\n            localAccountId: this.localAccountId,\n        });\n    }\n\n    /**\n     * Returns the AccountInfo interface for this account.\n     */\n    getAccountInfo(): AccountInfo {\n        return {\n            homeAccountId: this.homeAccountId,\n            environment: this.environment,\n            tenantId: this.realm,\n            username: this.username,\n            localAccountId: this.localAccountId,\n            name: this.name,\n            nativeAccountId: this.nativeAccountId,\n            authorityType: this.authorityType,\n            // Deserialize tenant profiles array into a Map\n            tenantProfiles: new Map(\n                (this.tenantProfiles || []).map((tenantProfile) => {\n                    return [tenantProfile.tenantId, tenantProfile];\n                })\n            ),\n        };\n    }\n\n    /**\n     * Returns true if the account entity is in single tenant format (outdated), false otherwise\n     */\n    isSingleTenant(): boolean {\n        return !this.tenantProfiles;\n    }\n\n    /**\n     * Generates account key from interface\n     * @param accountInterface\n     */\n    static generateAccountCacheKey(accountInterface: AccountInfo): string {\n        const homeTenantId = accountInterface.homeAccountId.split(\".\")[1];\n        const accountKey = [\n            accountInterface.homeAccountId,\n            accountInterface.environment || \"\",\n            homeTenantId || accountInterface.tenantId || \"\",\n        ];\n\n        return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n\n    /**\n     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\n     * @param accountDetails\n     */\n    static createAccount(\n        accountDetails: {\n            homeAccountId: string;\n            idTokenClaims?: TokenClaims;\n            clientInfo?: string;\n            cloudGraphHostName?: string;\n            msGraphHost?: string;\n            environment?: string;\n            nativeAccountId?: string;\n            tenantProfiles?: Array<TenantProfile>;\n        },\n        authority: Authority,\n        base64Decode?: (input: string) => string\n    ): AccountEntity {\n        const account: AccountEntity = new AccountEntity();\n\n        if (authority.authorityType === AuthorityType.Adfs) {\n            account.authorityType = CacheAccountType.ADFS_ACCOUNT_TYPE;\n        } else if (authority.protocolMode === ProtocolMode.OIDC) {\n            account.authorityType = CacheAccountType.GENERIC_ACCOUNT_TYPE;\n        } else {\n            account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\n        }\n\n        let clientInfo: ClientInfo | undefined;\n\n        if (accountDetails.clientInfo && base64Decode) {\n            clientInfo = buildClientInfo(\n                accountDetails.clientInfo,\n                base64Decode\n            );\n        }\n\n        account.clientInfo = accountDetails.clientInfo;\n        account.homeAccountId = accountDetails.homeAccountId;\n        account.nativeAccountId = accountDetails.nativeAccountId;\n\n        const env =\n            accountDetails.environment ||\n            (authority && authority.getPreferredCache());\n\n        if (!env) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.invalidCacheEnvironment\n            );\n        }\n\n        account.environment = env;\n        // non AAD scenarios can have empty realm\n        account.realm =\n            clientInfo?.utid ||\n            getTenantIdFromIdTokenClaims(accountDetails.idTokenClaims) ||\n            \"\";\n\n        // How do you account for MSA CID here?\n        account.localAccountId =\n            clientInfo?.uid ||\n            accountDetails.idTokenClaims?.oid ||\n            accountDetails.idTokenClaims?.sub ||\n            \"\";\n\n        /*\n         * In B2C scenarios the emails claim is used instead of preferred_username and it is an array.\n         * In most cases it will contain a single email. This field should not be relied upon if a custom\n         * policy is configured to return more than 1 email.\n         */\n        const preferredUsername =\n            accountDetails.idTokenClaims?.preferred_username ||\n            accountDetails.idTokenClaims?.upn;\n        const email = accountDetails.idTokenClaims?.emails\n            ? accountDetails.idTokenClaims.emails[0]\n            : null;\n\n        account.username = preferredUsername || email || \"\";\n        account.name = accountDetails.idTokenClaims?.name || \"\";\n\n        account.cloudGraphHostName = accountDetails.cloudGraphHostName;\n        account.msGraphHost = accountDetails.msGraphHost;\n\n        if (accountDetails.tenantProfiles) {\n            account.tenantProfiles = accountDetails.tenantProfiles;\n        } else {\n            const tenantProfile = buildTenantProfile(\n                accountDetails.homeAccountId,\n                account.localAccountId,\n                account.realm,\n                accountDetails.idTokenClaims\n            );\n            account.tenantProfiles = [tenantProfile];\n        }\n\n        return account;\n    }\n\n    /**\n     * Creates an AccountEntity object from AccountInfo\n     * @param accountInfo\n     * @param cloudGraphHostName\n     * @param msGraphHost\n     * @returns\n     */\n    static createFromAccountInfo(\n        accountInfo: AccountInfo,\n        cloudGraphHostName?: string,\n        msGraphHost?: string\n    ): AccountEntity {\n        const account: AccountEntity = new AccountEntity();\n\n        account.authorityType =\n            accountInfo.authorityType || CacheAccountType.GENERIC_ACCOUNT_TYPE;\n        account.homeAccountId = accountInfo.homeAccountId;\n        account.localAccountId = accountInfo.localAccountId;\n        account.nativeAccountId = accountInfo.nativeAccountId;\n\n        account.realm = accountInfo.tenantId;\n        account.environment = accountInfo.environment;\n\n        account.username = accountInfo.username;\n        account.name = accountInfo.name;\n\n        account.cloudGraphHostName = cloudGraphHostName;\n        account.msGraphHost = msGraphHost;\n        // Serialize tenant profiles map into an array\n        account.tenantProfiles = Array.from(\n            accountInfo.tenantProfiles?.values() || []\n        );\n\n        return account;\n    }\n\n    /**\n     * Generate HomeAccountId from server response\n     * @param serverClientInfo\n     * @param authType\n     */\n    static generateHomeAccountId(\n        serverClientInfo: string,\n        authType: AuthorityType,\n        logger: Logger,\n        cryptoObj: ICrypto,\n        idTokenClaims?: TokenClaims\n    ): string {\n        // since ADFS/DSTS do not have tid and does not set client_info\n        if (\n            !(\n                authType === AuthorityType.Adfs ||\n                authType === AuthorityType.Dsts\n            )\n        ) {\n            // for cases where there is clientInfo\n            if (serverClientInfo) {\n                try {\n                    const clientInfo = buildClientInfo(\n                        serverClientInfo,\n                        cryptoObj.base64Decode\n                    );\n                    if (clientInfo.uid && clientInfo.utid) {\n                        return `${clientInfo.uid}.${clientInfo.utid}`;\n                    }\n                } catch (e) {}\n            }\n            logger.warning(\"No client info in response\");\n        }\n\n        // default to \"sub\" claim\n        return idTokenClaims?.sub || \"\";\n    }\n\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isAccountEntity(entity: object): boolean {\n        if (!entity) {\n            return false;\n        }\n\n        return (\n            entity.hasOwnProperty(\"homeAccountId\") &&\n            entity.hasOwnProperty(\"environment\") &&\n            entity.hasOwnProperty(\"realm\") &&\n            entity.hasOwnProperty(\"localAccountId\") &&\n            entity.hasOwnProperty(\"username\") &&\n            entity.hasOwnProperty(\"authorityType\")\n        );\n    }\n\n    /**\n     * Helper function to determine whether 2 accountInfo objects represent the same account\n     * @param accountA\n     * @param accountB\n     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\n     */\n    static accountInfoIsEqual(\n        accountA: AccountInfo | null,\n        accountB: AccountInfo | null,\n        compareClaims?: boolean\n    ): boolean {\n        if (!accountA || !accountB) {\n            return false;\n        }\n\n        let claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\n        if (compareClaims) {\n            const accountAClaims = (accountA.idTokenClaims ||\n                {}) as TokenClaims;\n            const accountBClaims = (accountB.idTokenClaims ||\n                {}) as TokenClaims;\n\n            // issued at timestamp and nonce are expected to change each time a new id token is acquired\n            claimsMatch =\n                accountAClaims.iat === accountBClaims.iat &&\n                accountAClaims.nonce === accountBClaims.nonce;\n        }\n\n        return (\n            accountA.homeAccountId === accountB.homeAccountId &&\n            accountA.localAccountId === accountB.localAccountId &&\n            accountA.username === accountB.username &&\n            accountA.tenantId === accountB.tenantId &&\n            accountA.environment === accountB.environment &&\n            accountA.nativeAccountId === accountB.nativeAccountId &&\n            claimsMatch\n        );\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}