{"ast":null,"code":"/*! @azure/msal-common v15.7.0 2025-05-30 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Utility functions for managing date and time operations.\r\n */\n/**\r\n * return the current time in Unix time (seconds).\r\n */\nfunction nowSeconds() {\n  // Date.getTime() returns in milliseconds.\n  return Math.round(new Date().getTime() / 1000.0);\n}\n/**\r\n * Converts JS Date object to seconds\r\n * @param date Date\r\n */\nfunction toSecondsFromDate(date) {\n  // Convert date to seconds\n  return date.getTime() / 1000;\n}\n/**\r\n * Convert seconds to JS Date object. Seconds can be in a number or string format or undefined (will still return a date).\r\n * @param seconds\r\n */\nfunction toDateFromSeconds(seconds) {\n  if (seconds) {\n    return new Date(Number(seconds) * 1000);\n  }\n  return new Date();\n}\n/**\r\n * check if a token is expired based on given UTC time in seconds.\r\n * @param expiresOn\r\n */\nfunction isTokenExpired(expiresOn, offset) {\n  // check for access token expiry\n  const expirationSec = Number(expiresOn) || 0;\n  const offsetCurrentTimeSec = nowSeconds() + offset;\n  // If current time + offset is greater than token expiration time, then token is expired.\n  return offsetCurrentTimeSec > expirationSec;\n}\n/**\r\n * If the current time is earlier than the time that a token was cached at, we must discard the token\r\n * i.e. The system clock was turned back after acquiring the cached token\r\n * @param cachedAt\r\n * @param offset\r\n */\nfunction wasClockTurnedBack(cachedAt) {\n  const cachedAtSec = Number(cachedAt);\n  return cachedAtSec > nowSeconds();\n}\n/**\r\n * Waits for t number of milliseconds\r\n * @param t number\r\n * @param value T\r\n */\nfunction delay(t, value) {\n  return new Promise(resolve => setTimeout(() => resolve(value), t));\n}\nexport { delay, isTokenExpired, nowSeconds, toDateFromSeconds, toSecondsFromDate, wasClockTurnedBack };","map":{"version":3,"names":["nowSeconds","Math","round","Date","getTime","toSecondsFromDate","date","toDateFromSeconds","seconds","Number","isTokenExpired","expiresOn","offset","expirationSec","offsetCurrentTimeSec","wasClockTurnedBack","cachedAt","cachedAtSec","delay","t","value","Promise","resolve","setTimeout"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-common/src/utils/TimeUtils.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Utility functions for managing date and time operations.\n */\n\n/**\n * return the current time in Unix time (seconds).\n */\nexport function nowSeconds(): number {\n    // Date.getTime() returns in milliseconds.\n    return Math.round(new Date().getTime() / 1000.0);\n}\n\n/**\n * Converts JS Date object to seconds\n * @param date Date\n */\nexport function toSecondsFromDate(date: Date): number {\n    // Convert date to seconds\n    return date.getTime() / 1000;\n}\n\n/**\n * Convert seconds to JS Date object. Seconds can be in a number or string format or undefined (will still return a date).\n * @param seconds\n */\nexport function toDateFromSeconds(seconds: number | string | undefined): Date {\n    if (seconds) {\n        return new Date(Number(seconds) * 1000);\n    }\n    return new Date();\n}\n\n/**\n * check if a token is expired based on given UTC time in seconds.\n * @param expiresOn\n */\nexport function isTokenExpired(expiresOn: string, offset: number): boolean {\n    // check for access token expiry\n    const expirationSec = Number(expiresOn) || 0;\n    const offsetCurrentTimeSec = nowSeconds() + offset;\n\n    // If current time + offset is greater than token expiration time, then token is expired.\n    return offsetCurrentTimeSec > expirationSec;\n}\n\n/**\n * If the current time is earlier than the time that a token was cached at, we must discard the token\n * i.e. The system clock was turned back after acquiring the cached token\n * @param cachedAt\n * @param offset\n */\nexport function wasClockTurnedBack(cachedAt: string): boolean {\n    const cachedAtSec = Number(cachedAt);\n\n    return cachedAtSec > nowSeconds();\n}\n\n/**\n * Waits for t number of milliseconds\n * @param t number\n * @param value T\n */\nexport function delay<T>(t: number, value?: T): Promise<T | void> {\n    return new Promise((resolve) => setTimeout(() => resolve(value), t));\n}\n"],"mappings":";;;AAAA;;;AAGG;AAEH;;AAEG;AAEH;;AAEG;SACaA,UAAUA,CAAA;;EAEtB,OAAOC,IAAI,CAACC,KAAK,CAAC,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,GAAG,MAAM,CAAC;AACpD;AAEA;;;AAGG;AACG,SAAUC,iBAAiBA,CAACC,IAAU;;EAExC,OAAOA,IAAI,CAACF,OAAO,EAAE,GAAG,IAAI;AAChC;AAEA;;;AAGG;AACG,SAAUG,iBAAiBA,CAACC,OAAoC;EAClE,IAAIA,OAAO,EAAE;IACT,OAAO,IAAIL,IAAI,CAACM,MAAM,CAACD,OAAO,CAAC,GAAG,IAAI,CAAC;EAC1C;EACD,OAAO,IAAIL,IAAI,EAAE;AACrB;AAEA;;;AAGG;AACa,SAAAO,cAAcA,CAACC,SAAiB,EAAEC,MAAc;;EAE5D,MAAMC,aAAa,GAAGJ,MAAM,CAACE,SAAS,CAAC,IAAI,CAAC;EAC5C,MAAMG,oBAAoB,GAAGd,UAAU,EAAE,GAAGY,MAAM;;EAGlD,OAAOE,oBAAoB,GAAGD,aAAa;AAC/C;AAEA;;;;;AAKG;AACG,SAAUE,kBAAkBA,CAACC,QAAgB;EAC/C,MAAMC,WAAW,GAAGR,MAAM,CAACO,QAAQ,CAAC;EAEpC,OAAOC,WAAW,GAAGjB,UAAU,EAAE;AACrC;AAEA;;;;AAIG;AACa,SAAAkB,KAAKA,CAAIC,CAAS,EAAEC,KAAS;EACzC,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAAC,MAAMD,OAAO,CAACF,KAAK,CAAC,EAAED,CAAC,CAAC,CAAC;AACxE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}