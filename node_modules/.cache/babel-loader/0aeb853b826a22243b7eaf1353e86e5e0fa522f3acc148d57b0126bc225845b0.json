{"ast":null,"code":"/*! @azure/msal-common v15.7.0 2025-05-30 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Returns true if tenantId matches the utid portion of homeAccountId\r\n * @param tenantId\r\n * @param homeAccountId\r\n * @returns\r\n */\nfunction tenantIdMatchesHomeTenant(tenantId, homeAccountId) {\n  return !!tenantId && !!homeAccountId && tenantId === homeAccountId.split(\".\")[1];\n}\n/**\r\n * Build tenant profile\r\n * @param homeAccountId - Home account identifier for this account object\r\n * @param localAccountId - Local account identifer for this account object\r\n * @param tenantId - Full tenant or organizational id that this account belongs to\r\n * @param idTokenClaims - Claims from the ID token\r\n * @returns\r\n */\nfunction buildTenantProfile(homeAccountId, localAccountId, tenantId, idTokenClaims) {\n  if (idTokenClaims) {\n    const {\n      oid,\n      sub,\n      tid,\n      name,\n      tfp,\n      acr\n    } = idTokenClaims;\n    /**\r\n     * Since there is no way to determine if the authority is AAD or B2C, we exhaust all the possible claims that can serve as tenant ID with the following precedence:\r\n     * tid - TenantID claim that identifies the tenant that issued the token in AAD. Expected in all AAD ID tokens, not present in B2C ID Tokens.\r\n     * tfp - Trust Framework Policy claim that identifies the policy that was used to authenticate the user. Functions as tenant for B2C scenarios.\r\n     * acr - Authentication Context Class Reference claim used only with older B2C policies. Fallback in case tfp is not present, but likely won't be present anyway.\r\n     */\n    const tenantId = tid || tfp || acr || \"\";\n    return {\n      tenantId: tenantId,\n      localAccountId: oid || sub || \"\",\n      name: name,\n      isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId)\n    };\n  } else {\n    return {\n      tenantId,\n      localAccountId,\n      isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId)\n    };\n  }\n}\n/**\r\n * Replaces account info that varies by tenant profile sourced from the ID token claims passed in with the tenant-specific account info\r\n * @param baseAccountInfo\r\n * @param idTokenClaims\r\n * @returns\r\n */\nfunction updateAccountTenantProfileData(baseAccountInfo, tenantProfile, idTokenClaims, idTokenSecret) {\n  let updatedAccountInfo = baseAccountInfo;\n  // Tenant Profile overrides passed in account info\n  if (tenantProfile) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {\n      isHomeTenant,\n      ...tenantProfileOverride\n    } = tenantProfile;\n    updatedAccountInfo = {\n      ...baseAccountInfo,\n      ...tenantProfileOverride\n    };\n  }\n  // ID token claims override passed in account info and tenant profile\n  if (idTokenClaims) {\n    // Ignore isHomeTenant, loginHint, and sid which are part of tenant profile but not base account info\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {\n      isHomeTenant,\n      ...claimsSourcedTenantProfile\n    } = buildTenantProfile(baseAccountInfo.homeAccountId, baseAccountInfo.localAccountId, baseAccountInfo.tenantId, idTokenClaims);\n    updatedAccountInfo = {\n      ...updatedAccountInfo,\n      ...claimsSourcedTenantProfile,\n      idTokenClaims: idTokenClaims,\n      idToken: idTokenSecret\n    };\n    return updatedAccountInfo;\n  }\n  return updatedAccountInfo;\n}\nexport { buildTenantProfile, tenantIdMatchesHomeTenant, updateAccountTenantProfileData };","map":{"version":3,"names":["tenantIdMatchesHomeTenant","tenantId","homeAccountId","split","buildTenantProfile","localAccountId","idTokenClaims","oid","sub","tid","name","tfp","acr","isHomeTenant","updateAccountTenantProfileData","baseAccountInfo","tenantProfile","idTokenSecret","updatedAccountInfo","tenantProfileOverride","claimsSourcedTenantProfile","idToken"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-common/src/account/AccountInfo.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { TokenClaims } from \"./TokenClaims.js\";\n/**\n * Account object with the following signature:\n * - homeAccountId          - Home account identifier for this account object\n * - environment            - Entity which issued the token represented by the domain of the issuer (e.g. login.microsoftonline.com)\n * - tenantId               - Full tenant or organizational id that this account belongs to\n * - username               - preferred_username claim of the id_token that represents this account\n * - localAccountId         - Local, tenant-specific account identifer for this account object, usually used in legacy cases\n * - name                   - Full name for the account, including given name and family name\n * - idToken                - raw ID token\n * - idTokenClaims          - Object contains claims from ID token\n * - nativeAccountId        - The user's native account ID\n * - tenantProfiles         - Map of tenant profile objects for each tenant that the account has authenticated with in the browser\n */\nexport type AccountInfo = {\n    homeAccountId: string;\n    environment: string;\n    tenantId: string;\n    username: string;\n    localAccountId: string;\n    name?: string;\n    idToken?: string;\n    idTokenClaims?: TokenClaims & {\n        [key: string]:\n            | string\n            | number\n            | string[]\n            | object\n            | undefined\n            | unknown;\n    };\n    nativeAccountId?: string;\n    authorityType?: string;\n    tenantProfiles?: Map<string, TenantProfile>;\n};\n\n/**\n * Account details that vary across tenants for the same user\n */\nexport type TenantProfile = Pick<\n    AccountInfo,\n    \"tenantId\" | \"localAccountId\" | \"name\"\n> & {\n    /**\n     * - isHomeTenant           - True if this is the home tenant profile of the account, false if it's a guest tenant profile\n     */\n    isHomeTenant?: boolean;\n};\n\nexport type ActiveAccountFilters = {\n    homeAccountId: string;\n    localAccountId: string;\n    tenantId?: string;\n};\n\n/**\n * Returns true if tenantId matches the utid portion of homeAccountId\n * @param tenantId\n * @param homeAccountId\n * @returns\n */\nexport function tenantIdMatchesHomeTenant(\n    tenantId?: string,\n    homeAccountId?: string\n): boolean {\n    return (\n        !!tenantId &&\n        !!homeAccountId &&\n        tenantId === homeAccountId.split(\".\")[1]\n    );\n}\n\n/**\n * Build tenant profile\n * @param homeAccountId - Home account identifier for this account object\n * @param localAccountId - Local account identifer for this account object\n * @param tenantId - Full tenant or organizational id that this account belongs to\n * @param idTokenClaims - Claims from the ID token\n * @returns\n */\nexport function buildTenantProfile(\n    homeAccountId: string,\n    localAccountId: string,\n    tenantId: string,\n    idTokenClaims?: TokenClaims\n): TenantProfile {\n    if (idTokenClaims) {\n        const { oid, sub, tid, name, tfp, acr } = idTokenClaims;\n\n        /**\n         * Since there is no way to determine if the authority is AAD or B2C, we exhaust all the possible claims that can serve as tenant ID with the following precedence:\n         * tid - TenantID claim that identifies the tenant that issued the token in AAD. Expected in all AAD ID tokens, not present in B2C ID Tokens.\n         * tfp - Trust Framework Policy claim that identifies the policy that was used to authenticate the user. Functions as tenant for B2C scenarios.\n         * acr - Authentication Context Class Reference claim used only with older B2C policies. Fallback in case tfp is not present, but likely won't be present anyway.\n         */\n        const tenantId = tid || tfp || acr || \"\";\n\n        return {\n            tenantId: tenantId,\n            localAccountId: oid || sub || \"\",\n            name: name,\n            isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId),\n        };\n    } else {\n        return {\n            tenantId,\n            localAccountId,\n            isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId),\n        };\n    }\n}\n\n/**\n * Replaces account info that varies by tenant profile sourced from the ID token claims passed in with the tenant-specific account info\n * @param baseAccountInfo\n * @param idTokenClaims\n * @returns\n */\nexport function updateAccountTenantProfileData(\n    baseAccountInfo: AccountInfo,\n    tenantProfile?: TenantProfile,\n    idTokenClaims?: TokenClaims,\n    idTokenSecret?: string\n): AccountInfo {\n    let updatedAccountInfo = baseAccountInfo;\n    // Tenant Profile overrides passed in account info\n    if (tenantProfile) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { isHomeTenant, ...tenantProfileOverride } = tenantProfile;\n        updatedAccountInfo = { ...baseAccountInfo, ...tenantProfileOverride };\n    }\n\n    // ID token claims override passed in account info and tenant profile\n    if (idTokenClaims) {\n        // Ignore isHomeTenant, loginHint, and sid which are part of tenant profile but not base account info\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { isHomeTenant, ...claimsSourcedTenantProfile } =\n            buildTenantProfile(\n                baseAccountInfo.homeAccountId,\n                baseAccountInfo.localAccountId,\n                baseAccountInfo.tenantId,\n                idTokenClaims\n            );\n\n        updatedAccountInfo = {\n            ...updatedAccountInfo,\n            ...claimsSourcedTenantProfile,\n            idTokenClaims: idTokenClaims,\n            idToken: idTokenSecret,\n        };\n\n        return updatedAccountInfo;\n    }\n\n    return updatedAccountInfo;\n}\n"],"mappings":";;;AAAA;;;AAGG;AAyDH;;;;;AAKG;AACa,SAAAA,yBAAyBA,CACrCC,QAAiB,EACjBC,aAAsB;EAEtB,OACI,CAAC,CAACD,QAAQ,IACV,CAAC,CAACC,aAAa,IACfD,QAAQ,KAAKC,aAAa,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAEhD;AAEA;;;;;;;AAOG;AACG,SAAUC,kBAAkBA,CAC9BF,aAAqB,EACrBG,cAAsB,EACtBJ,QAAgB,EAChBK,aAA2B;EAE3B,IAAIA,aAAa,EAAE;IACf,MAAM;MAAEC,GAAG;MAAEC,GAAG;MAAEC,GAAG;MAAEC,IAAI;MAAEC,GAAG;MAAEC;IAAG,CAAE,GAAGN,aAAa;IAEvD;;;;;AAKG;IACH,MAAML,QAAQ,GAAGQ,GAAG,IAAIE,GAAG,IAAIC,GAAG,IAAI,EAAE;IAExC,OAAO;MACHX,QAAQ,EAAEA,QAAQ;MAClBI,cAAc,EAAEE,GAAG,IAAIC,GAAG,IAAI,EAAE;MAChCE,IAAI,EAAEA,IAAI;MACVG,YAAY,EAAEb,yBAAyB,CAACC,QAAQ,EAAEC,aAAa;KAClE;EACJ,OAAM;IACH,OAAO;MACHD,QAAQ;MACRI,cAAc;MACdQ,YAAY,EAAEb,yBAAyB,CAACC,QAAQ,EAAEC,aAAa;KAClE;EACJ;AACL;AAEA;;;;;AAKG;AACG,SAAUY,8BAA8BA,CAC1CC,eAA4B,EAC5BC,aAA6B,EAC7BV,aAA2B,EAC3BW,aAAsB;EAEtB,IAAIC,kBAAkB,GAAGH,eAAe;;EAExC,IAAIC,aAAa,EAAE;;IAEf,MAAM;MAAEH,YAAY;MAAE,GAAGM;IAAqB,CAAE,GAAGH,aAAa;IAChEE,kBAAkB,GAAG;MAAE,GAAGH,eAAe;MAAE,GAAGI;IAAqB,CAAE;EACxE;;EAGD,IAAIb,aAAa,EAAE;;;IAGf,MAAM;MAAEO,YAAY;MAAE,GAAGO;IAA0B,CAAE,GACjDhB,kBAAkB,CACdW,eAAe,CAACb,aAAa,EAC7Ba,eAAe,CAACV,cAAc,EAC9BU,eAAe,CAACd,QAAQ,EACxBK,aAAa,CAChB;IAELY,kBAAkB,GAAG;MACjB,GAAGA,kBAAkB;MACrB,GAAGE,0BAA0B;MAC7Bd,aAAa,EAAEA,aAAa;MAC5Be,OAAO,EAAEJ;KACZ;IAED,OAAOC,kBAAkB;EAC5B;EAED,OAAOA,kBAAkB;AAC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}