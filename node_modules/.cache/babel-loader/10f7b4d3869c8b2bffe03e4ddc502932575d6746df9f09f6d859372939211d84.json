{"ast":null,"code":"/*! @azure/msal-browser v4.13.1 2025-06-10 */\n'use strict';\n\nimport { PerformanceEvents, invokeAsync, invoke, ServerResponseType } from '@azure/msal-common/browser';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { DEFAULT_IFRAME_TIMEOUT_MS } from '../config/Configuration.mjs';\nimport { getEARForm } from '../protocol/Authorize.mjs';\nimport { emptyNavigateUri, monitorWindowTimeout } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Creates a hidden iframe to given URL using user-requested scopes as an id.\r\n * @param urlNavigate\r\n * @param userRequestScopes\r\n */\nasync function initiateCodeRequest(requestUrl, performanceClient, logger, correlationId, navigateFrameWait) {\n  performanceClient.addQueueMeasurement(PerformanceEvents.SilentHandlerInitiateAuthRequest, correlationId);\n  if (!requestUrl) {\n    // Throw error if request URL is empty.\n    logger.info(\"Navigate url is empty\");\n    throw createBrowserAuthError(emptyNavigateUri);\n  }\n  if (navigateFrameWait) {\n    return invokeAsync(loadFrame, PerformanceEvents.SilentHandlerLoadFrame, logger, performanceClient, correlationId)(requestUrl, navigateFrameWait, performanceClient, correlationId);\n  }\n  return invoke(loadFrameSync, PerformanceEvents.SilentHandlerLoadFrameSync, logger, performanceClient, correlationId)(requestUrl);\n}\nasync function initiateEarRequest(config, authority, request, logger, performanceClient) {\n  const frame = createHiddenIframe();\n  if (!frame.contentDocument) {\n    throw \"No document associated with iframe!\";\n  }\n  const form = await getEARForm(frame.contentDocument, config, authority, request, logger, performanceClient);\n  form.submit();\n  return frame;\n}\n/**\r\n * Monitors an iframe content window until it loads a url with a known hash, or hits a specified timeout.\r\n * @param iframe\r\n * @param timeout\r\n */\nasync function monitorIframeForHash(iframe, timeout, pollIntervalMilliseconds, performanceClient, logger, correlationId, responseType) {\n  performanceClient.addQueueMeasurement(PerformanceEvents.SilentHandlerMonitorIframeForHash, correlationId);\n  return new Promise((resolve, reject) => {\n    if (timeout < DEFAULT_IFRAME_TIMEOUT_MS) {\n      logger.warning(`system.loadFrameTimeout or system.iframeHashTimeout set to lower (${timeout}ms) than the default (${DEFAULT_IFRAME_TIMEOUT_MS}ms). This may result in timeouts.`);\n    }\n    /*\r\n     * Polling for iframes can be purely timing based,\r\n     * since we don't need to account for interaction.\r\n     */\n    const timeoutId = window.setTimeout(() => {\n      window.clearInterval(intervalId);\n      reject(createBrowserAuthError(monitorWindowTimeout));\n    }, timeout);\n    const intervalId = window.setInterval(() => {\n      let href = \"\";\n      const contentWindow = iframe.contentWindow;\n      try {\n        /*\r\n         * Will throw if cross origin,\r\n         * which should be caught and ignored\r\n         * since we need the interval to keep running while on STS UI.\r\n         */\n        href = contentWindow ? contentWindow.location.href : \"\";\n      } catch (e) {}\n      if (!href || href === \"about:blank\") {\n        return;\n      }\n      let responseString = \"\";\n      if (contentWindow) {\n        if (responseType === ServerResponseType.QUERY) {\n          responseString = contentWindow.location.search;\n        } else {\n          responseString = contentWindow.location.hash;\n        }\n      }\n      window.clearTimeout(timeoutId);\n      window.clearInterval(intervalId);\n      resolve(responseString);\n    }, pollIntervalMilliseconds);\n  }).finally(() => {\n    invoke(removeHiddenIframe, PerformanceEvents.RemoveHiddenIframe, logger, performanceClient, correlationId)(iframe);\n  });\n}\n/**\r\n * @hidden\r\n * Loads iframe with authorization endpoint URL\r\n * @ignore\r\n * @deprecated\r\n */\nfunction loadFrame(urlNavigate, navigateFrameWait, performanceClient, correlationId) {\n  performanceClient.addQueueMeasurement(PerformanceEvents.SilentHandlerLoadFrame, correlationId);\n  /*\r\n   * This trick overcomes iframe navigation in IE\r\n   * IE does not load the page consistently in iframe\r\n   */\n  return new Promise((resolve, reject) => {\n    const frameHandle = createHiddenIframe();\n    window.setTimeout(() => {\n      if (!frameHandle) {\n        reject(\"Unable to load iframe\");\n        return;\n      }\n      frameHandle.src = urlNavigate;\n      resolve(frameHandle);\n    }, navigateFrameWait);\n  });\n}\n/**\r\n * @hidden\r\n * Loads the iframe synchronously when the navigateTimeFrame is set to `0`\r\n * @param urlNavigate\r\n * @param frameName\r\n * @param logger\r\n */\nfunction loadFrameSync(urlNavigate) {\n  const frameHandle = createHiddenIframe();\n  frameHandle.src = urlNavigate;\n  return frameHandle;\n}\n/**\r\n * @hidden\r\n * Creates a new hidden iframe or gets an existing one for silent token renewal.\r\n * @ignore\r\n */\nfunction createHiddenIframe() {\n  const authFrame = document.createElement(\"iframe\");\n  authFrame.className = \"msalSilentIframe\";\n  authFrame.style.visibility = \"hidden\";\n  authFrame.style.position = \"absolute\";\n  authFrame.style.width = authFrame.style.height = \"0\";\n  authFrame.style.border = \"0\";\n  authFrame.setAttribute(\"sandbox\", \"allow-scripts allow-same-origin allow-forms\");\n  document.body.appendChild(authFrame);\n  return authFrame;\n}\n/**\r\n * @hidden\r\n * Removes a hidden iframe from the page.\r\n * @ignore\r\n */\nfunction removeHiddenIframe(iframe) {\n  if (document.body === iframe.parentNode) {\n    document.body.removeChild(iframe);\n  }\n}\nexport { initiateCodeRequest, initiateEarRequest, monitorIframeForHash };","map":{"version":3,"names":["initiateCodeRequest","requestUrl","performanceClient","logger","correlationId","navigateFrameWait","addQueueMeasurement","PerformanceEvents","SilentHandlerInitiateAuthRequest","info","createBrowserAuthError","emptyNavigateUri","invokeAsync","loadFrame","SilentHandlerLoadFrame","invoke","loadFrameSync","SilentHandlerLoadFrameSync","initiateEarRequest","config","authority","request","frame","createHiddenIframe","contentDocument","form","getEARForm","submit","monitorIframeForHash","iframe","timeout","pollIntervalMilliseconds","responseType","SilentHandlerMonitorIframeForHash","Promise","resolve","reject","DEFAULT_IFRAME_TIMEOUT_MS","warning","timeoutId","window","setTimeout","clearInterval","intervalId","monitorWindowTimeout","setInterval","href","contentWindow","location","e","responseString","ServerResponseType","QUERY","search","hash","clearTimeout","finally","removeHiddenIframe","RemoveHiddenIframe","urlNavigate","frameHandle","src","authFrame","document","createElement","className","style","visibility","position","width","height","border","setAttribute","body","appendChild","parentNode","removeChild"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-browser/src/interaction_handler/SilentHandler.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    Logger,\n    IPerformanceClient,\n    PerformanceEvents,\n    invokeAsync,\n    invoke,\n    ServerResponseType,\n    Authority,\n    CommonAuthorizationUrlRequest,\n} from \"@azure/msal-common/browser\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError.js\";\nimport {\n    BrowserConfiguration,\n    DEFAULT_IFRAME_TIMEOUT_MS,\n} from \"../config/Configuration.js\";\nimport { getEARForm } from \"../protocol/Authorize.js\";\n\n/**\n * Creates a hidden iframe to given URL using user-requested scopes as an id.\n * @param urlNavigate\n * @param userRequestScopes\n */\nexport async function initiateCodeRequest(\n    requestUrl: string,\n    performanceClient: IPerformanceClient,\n    logger: Logger,\n    correlationId: string,\n    navigateFrameWait?: number\n): Promise<HTMLIFrameElement> {\n    performanceClient.addQueueMeasurement(\n        PerformanceEvents.SilentHandlerInitiateAuthRequest,\n        correlationId\n    );\n\n    if (!requestUrl) {\n        // Throw error if request URL is empty.\n        logger.info(\"Navigate url is empty\");\n        throw createBrowserAuthError(BrowserAuthErrorCodes.emptyNavigateUri);\n    }\n    if (navigateFrameWait) {\n        return invokeAsync(\n            loadFrame,\n            PerformanceEvents.SilentHandlerLoadFrame,\n            logger,\n            performanceClient,\n            correlationId\n        )(requestUrl, navigateFrameWait, performanceClient, correlationId);\n    }\n    return invoke(\n        loadFrameSync,\n        PerformanceEvents.SilentHandlerLoadFrameSync,\n        logger,\n        performanceClient,\n        correlationId\n    )(requestUrl);\n}\n\nexport async function initiateEarRequest(\n    config: BrowserConfiguration,\n    authority: Authority,\n    request: CommonAuthorizationUrlRequest,\n    logger: Logger,\n    performanceClient: IPerformanceClient\n): Promise<HTMLIFrameElement> {\n    const frame = createHiddenIframe();\n    if (!frame.contentDocument) {\n        throw \"No document associated with iframe!\";\n    }\n    const form = await getEARForm(\n        frame.contentDocument,\n        config,\n        authority,\n        request,\n        logger,\n        performanceClient\n    );\n    form.submit();\n    return frame;\n}\n\n/**\n * Monitors an iframe content window until it loads a url with a known hash, or hits a specified timeout.\n * @param iframe\n * @param timeout\n */\nexport async function monitorIframeForHash(\n    iframe: HTMLIFrameElement,\n    timeout: number,\n    pollIntervalMilliseconds: number,\n    performanceClient: IPerformanceClient,\n    logger: Logger,\n    correlationId: string,\n    responseType: ServerResponseType\n): Promise<string> {\n    performanceClient.addQueueMeasurement(\n        PerformanceEvents.SilentHandlerMonitorIframeForHash,\n        correlationId\n    );\n\n    return new Promise<string>((resolve, reject) => {\n        if (timeout < DEFAULT_IFRAME_TIMEOUT_MS) {\n            logger.warning(\n                `system.loadFrameTimeout or system.iframeHashTimeout set to lower (${timeout}ms) than the default (${DEFAULT_IFRAME_TIMEOUT_MS}ms). This may result in timeouts.`\n            );\n        }\n\n        /*\n         * Polling for iframes can be purely timing based,\n         * since we don't need to account for interaction.\n         */\n        const timeoutId = window.setTimeout(() => {\n            window.clearInterval(intervalId);\n            reject(\n                createBrowserAuthError(\n                    BrowserAuthErrorCodes.monitorWindowTimeout\n                )\n            );\n        }, timeout);\n\n        const intervalId = window.setInterval(() => {\n            let href: string = \"\";\n            const contentWindow = iframe.contentWindow;\n            try {\n                /*\n                 * Will throw if cross origin,\n                 * which should be caught and ignored\n                 * since we need the interval to keep running while on STS UI.\n                 */\n                href = contentWindow ? contentWindow.location.href : \"\";\n            } catch (e) {}\n\n            if (!href || href === \"about:blank\") {\n                return;\n            }\n\n            let responseString = \"\";\n            if (contentWindow) {\n                if (responseType === ServerResponseType.QUERY) {\n                    responseString = contentWindow.location.search;\n                } else {\n                    responseString = contentWindow.location.hash;\n                }\n            }\n            window.clearTimeout(timeoutId);\n            window.clearInterval(intervalId);\n            resolve(responseString);\n        }, pollIntervalMilliseconds);\n    }).finally(() => {\n        invoke(\n            removeHiddenIframe,\n            PerformanceEvents.RemoveHiddenIframe,\n            logger,\n            performanceClient,\n            correlationId\n        )(iframe);\n    });\n}\n\n/**\n * @hidden\n * Loads iframe with authorization endpoint URL\n * @ignore\n * @deprecated\n */\nfunction loadFrame(\n    urlNavigate: string,\n    navigateFrameWait: number,\n    performanceClient: IPerformanceClient,\n    correlationId: string\n): Promise<HTMLIFrameElement> {\n    performanceClient.addQueueMeasurement(\n        PerformanceEvents.SilentHandlerLoadFrame,\n        correlationId\n    );\n\n    /*\n     * This trick overcomes iframe navigation in IE\n     * IE does not load the page consistently in iframe\n     */\n\n    return new Promise((resolve, reject) => {\n        const frameHandle = createHiddenIframe();\n\n        window.setTimeout(() => {\n            if (!frameHandle) {\n                reject(\"Unable to load iframe\");\n                return;\n            }\n\n            frameHandle.src = urlNavigate;\n\n            resolve(frameHandle);\n        }, navigateFrameWait);\n    });\n}\n/**\n * @hidden\n * Loads the iframe synchronously when the navigateTimeFrame is set to `0`\n * @param urlNavigate\n * @param frameName\n * @param logger\n */\nfunction loadFrameSync(urlNavigate: string): HTMLIFrameElement {\n    const frameHandle = createHiddenIframe();\n\n    frameHandle.src = urlNavigate;\n\n    return frameHandle;\n}\n\n/**\n * @hidden\n * Creates a new hidden iframe or gets an existing one for silent token renewal.\n * @ignore\n */\nfunction createHiddenIframe(): HTMLIFrameElement {\n    const authFrame = document.createElement(\"iframe\");\n\n    authFrame.className = \"msalSilentIframe\";\n    authFrame.style.visibility = \"hidden\";\n    authFrame.style.position = \"absolute\";\n    authFrame.style.width = authFrame.style.height = \"0\";\n    authFrame.style.border = \"0\";\n    authFrame.setAttribute(\n        \"sandbox\",\n        \"allow-scripts allow-same-origin allow-forms\"\n    );\n    document.body.appendChild(authFrame);\n\n    return authFrame;\n}\n\n/**\n * @hidden\n * Removes a hidden iframe from the page.\n * @ignore\n */\nfunction removeHiddenIframe(iframe: HTMLIFrameElement): void {\n    if (document.body === iframe.parentNode) {\n        document.body.removeChild(iframe);\n    }\n}\n"],"mappings":";;;;;;;;;AAAA;;;AAGG;AAsBH;;;;AAIG;AACI,eAAeA,mBAAmBA,CACrCC,UAAkB,EAClBC,iBAAqC,EACrCC,MAAc,EACdC,aAAqB,EACrBC,iBAA0B;EAE1BH,iBAAiB,CAACI,mBAAmB,CACjCC,iBAAiB,CAACC,gCAAgC,EAClDJ,aAAa,CAChB;EAED,IAAI,CAACH,UAAU,EAAE;;IAEbE,MAAM,CAACM,IAAI,CAAC,uBAAuB,CAAC;IACpC,MAAMC,sBAAsB,CAACC,gBAAsC,CAAC;EACvE;EACD,IAAIN,iBAAiB,EAAE;IACnB,OAAOO,WAAW,CACdC,SAAS,EACTN,iBAAiB,CAACO,sBAAsB,EACxCX,MAAM,EACND,iBAAiB,EACjBE,aAAa,CAChB,CAACH,UAAU,EAAEI,iBAAiB,EAAEH,iBAAiB,EAAEE,aAAa,CAAC;EACrE;EACD,OAAOW,MAAM,CACTC,aAAa,EACbT,iBAAiB,CAACU,0BAA0B,EAC5Cd,MAAM,EACND,iBAAiB,EACjBE,aAAa,CAChB,CAACH,UAAU,CAAC;AACjB;AAEO,eAAeiB,kBAAkBA,CACpCC,MAA4B,EAC5BC,SAAoB,EACpBC,OAAsC,EACtClB,MAAc,EACdD,iBAAqC;EAErC,MAAMoB,KAAK,GAAGC,kBAAkB,EAAE;EAClC,IAAI,CAACD,KAAK,CAACE,eAAe,EAAE;IACxB,MAAM,qCAAqC;EAC9C;EACD,MAAMC,IAAI,GAAG,MAAMC,UAAU,CACzBJ,KAAK,CAACE,eAAe,EACrBL,MAAM,EACNC,SAAS,EACTC,OAAO,EACPlB,MAAM,EACND,iBAAiB,CACpB;EACDuB,IAAI,CAACE,MAAM,EAAE;EACb,OAAOL,KAAK;AAChB;AAEA;;;;AAIG;AACI,eAAeM,oBAAoBA,CACtCC,MAAyB,EACzBC,OAAe,EACfC,wBAAgC,EAChC7B,iBAAqC,EACrCC,MAAc,EACdC,aAAqB,EACrB4B,YAAgC;EAEhC9B,iBAAiB,CAACI,mBAAmB,CACjCC,iBAAiB,CAAC0B,iCAAiC,EACnD7B,aAAa,CAChB;EAED,OAAO,IAAI8B,OAAO,CAAS,CAACC,OAAO,EAAEC,MAAM,KAAI;IAC3C,IAAIN,OAAO,GAAGO,yBAAyB,EAAE;MACrClC,MAAM,CAACmC,OAAO,CACV,qEAAqER,OAAO,yBAAyBO,yBAAyB,mCAAmC,CACpK;IACJ;IAED;;;AAGG;IACH,MAAME,SAAS,GAAGC,MAAM,CAACC,UAAU,CAAC,MAAK;MACrCD,MAAM,CAACE,aAAa,CAACC,UAAU,CAAC;MAChCP,MAAM,CACF1B,sBAAsB,CAClBkC,oBAA0C,CAC7C,CACJ;KACJ,EAAEd,OAAO,CAAC;IAEX,MAAMa,UAAU,GAAGH,MAAM,CAACK,WAAW,CAAC,MAAK;MACvC,IAAIC,IAAI,GAAW,EAAE;MACrB,MAAMC,aAAa,GAAGlB,MAAM,CAACkB,aAAa;MAC1C,IAAI;QACA;;;;AAIG;QACHD,IAAI,GAAGC,aAAa,GAAGA,aAAa,CAACC,QAAQ,CAACF,IAAI,GAAG,EAAE;MAC1D,EAAC,OAAOG,CAAC,EAAE;MAEZ,IAAI,CAACH,IAAI,IAAIA,IAAI,KAAK,aAAa,EAAE;QACjC;MACH;MAED,IAAII,cAAc,GAAG,EAAE;MACvB,IAAIH,aAAa,EAAE;QACf,IAAIf,YAAY,KAAKmB,kBAAkB,CAACC,KAAK,EAAE;UAC3CF,cAAc,GAAGH,aAAa,CAACC,QAAQ,CAACK,MAAM;QACjD,OAAM;UACHH,cAAc,GAAGH,aAAa,CAACC,QAAQ,CAACM,IAAI;QAC/C;MACJ;MACDd,MAAM,CAACe,YAAY,CAAChB,SAAS,CAAC;MAC9BC,MAAM,CAACE,aAAa,CAACC,UAAU,CAAC;MAChCR,OAAO,CAACe,cAAc,CAAC;KAC1B,EAAEnB,wBAAwB,CAAC;EAChC,CAAC,CAAC,CAACyB,OAAO,CAAC,MAAK;IACZzC,MAAM,CACF0C,kBAAkB,EAClBlD,iBAAiB,CAACmD,kBAAkB,EACpCvD,MAAM,EACND,iBAAiB,EACjBE,aAAa,CAChB,CAACyB,MAAM,CAAC;EACb,CAAC,CAAC;AACN;AAEA;;;;;AAKG;AACH,SAAShB,SAASA,CACd8C,WAAmB,EACnBtD,iBAAyB,EACzBH,iBAAqC,EACrCE,aAAqB;EAErBF,iBAAiB,CAACI,mBAAmB,CACjCC,iBAAiB,CAACO,sBAAsB,EACxCV,aAAa,CAChB;EAED;;;AAGG;EAEH,OAAO,IAAI8B,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;IACnC,MAAMwB,WAAW,GAAGrC,kBAAkB,EAAE;IAExCiB,MAAM,CAACC,UAAU,CAAC,MAAK;MACnB,IAAI,CAACmB,WAAW,EAAE;QACdxB,MAAM,CAAC,uBAAuB,CAAC;QAC/B;MACH;MAEDwB,WAAW,CAACC,GAAG,GAAGF,WAAW;MAE7BxB,OAAO,CAACyB,WAAW,CAAC;KACvB,EAAEvD,iBAAiB,CAAC;EACzB,CAAC,CAAC;AACN;AACA;;;;;;AAMG;AACH,SAASW,aAAaA,CAAC2C,WAAmB;EACtC,MAAMC,WAAW,GAAGrC,kBAAkB,EAAE;EAExCqC,WAAW,CAACC,GAAG,GAAGF,WAAW;EAE7B,OAAOC,WAAW;AACtB;AAEA;;;;AAIG;AACH,SAASrC,kBAAkBA,CAAA;EACvB,MAAMuC,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;EAElDF,SAAS,CAACG,SAAS,GAAG,kBAAkB;EACxCH,SAAS,CAACI,KAAK,CAACC,UAAU,GAAG,QAAQ;EACrCL,SAAS,CAACI,KAAK,CAACE,QAAQ,GAAG,UAAU;EACrCN,SAAS,CAACI,KAAK,CAACG,KAAK,GAAGP,SAAS,CAACI,KAAK,CAACI,MAAM,GAAG,GAAG;EACpDR,SAAS,CAACI,KAAK,CAACK,MAAM,GAAG,GAAG;EAC5BT,SAAS,CAACU,YAAY,CAClB,SAAS,EACT,6CAA6C,CAChD;EACDT,QAAQ,CAACU,IAAI,CAACC,WAAW,CAACZ,SAAS,CAAC;EAEpC,OAAOA,SAAS;AACpB;AAEA;;;;AAIG;AACH,SAASL,kBAAkBA,CAAC5B,MAAyB;EACjD,IAAIkC,QAAQ,CAACU,IAAI,KAAK5C,MAAM,CAAC8C,UAAU,EAAE;IACrCZ,QAAQ,CAACU,IAAI,CAACG,WAAW,CAAC/C,MAAM,CAAC;EACpC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}