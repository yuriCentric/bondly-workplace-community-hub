{"ast":null,"code":"/*! @azure/msal-browser v4.13.1 2025-06-10 */\n'use strict';\n\nimport { BridgeStatusCode } from './BridgeStatusCode.mjs';\nimport { createNewGuid } from '../crypto/BrowserCrypto.mjs';\nimport { BrowserConstants } from '../utils/BrowserConstants.mjs';\nimport { version } from '../packageMetadata.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * BridgeProxy\r\n * Provides a proxy for accessing a bridge to a host app and/or\r\n * platform broker\r\n */\nclass BridgeProxy {\n  /**\r\n   * initializeNestedAppAuthBridge - Initializes the bridge to the host app\r\n   * @returns a promise that resolves to an InitializeBridgeResponse or rejects with an Error\r\n   * @remarks This method will be called by the create factory method\r\n   * @remarks If the bridge is not available, this method will throw an error\r\n   */\n  static async initializeNestedAppAuthBridge() {\n    if (window === undefined) {\n      throw new Error(\"window is undefined\");\n    }\n    if (window.nestedAppAuthBridge === undefined) {\n      throw new Error(\"window.nestedAppAuthBridge is undefined\");\n    }\n    try {\n      window.nestedAppAuthBridge.addEventListener(\"message\", response => {\n        const responsePayload = typeof response === \"string\" ? response : response.data;\n        const responseEnvelope = JSON.parse(responsePayload);\n        const request = BridgeProxy.bridgeRequests.find(element => element.requestId === responseEnvelope.requestId);\n        if (request !== undefined) {\n          BridgeProxy.bridgeRequests.splice(BridgeProxy.bridgeRequests.indexOf(request), 1);\n          if (responseEnvelope.success) {\n            request.resolve(responseEnvelope);\n          } else {\n            request.reject(responseEnvelope.error);\n          }\n        }\n      });\n      const bridgeResponse = await new Promise((resolve, reject) => {\n        const message = BridgeProxy.buildRequest(\"GetInitContext\");\n        const request = {\n          requestId: message.requestId,\n          method: message.method,\n          resolve: resolve,\n          reject: reject\n        };\n        BridgeProxy.bridgeRequests.push(request);\n        window.nestedAppAuthBridge.postMessage(JSON.stringify(message));\n      });\n      return BridgeProxy.validateBridgeResultOrThrow(bridgeResponse.initContext);\n    } catch (error) {\n      window.console.log(error);\n      throw error;\n    }\n  }\n  /**\r\n   * getTokenInteractive - Attempts to get a token interactively from the bridge\r\n   * @param request A token request\r\n   * @returns a promise that resolves to an auth result or rejects with a BridgeError\r\n   */\n  getTokenInteractive(request) {\n    return this.getToken(\"GetTokenPopup\", request);\n  }\n  /**\r\n   * getTokenSilent Attempts to get a token silently from the bridge\r\n   * @param request A token request\r\n   * @returns a promise that resolves to an auth result or rejects with a BridgeError\r\n   */\n  getTokenSilent(request) {\n    return this.getToken(\"GetToken\", request);\n  }\n  async getToken(requestType, request) {\n    const result = await this.sendRequest(requestType, {\n      tokenParams: request\n    });\n    return {\n      token: BridgeProxy.validateBridgeResultOrThrow(result.token),\n      account: BridgeProxy.validateBridgeResultOrThrow(result.account)\n    };\n  }\n  getHostCapabilities() {\n    return this.capabilities ?? null;\n  }\n  getAccountContext() {\n    return this.accountContext ? this.accountContext : null;\n  }\n  static buildRequest(method, requestParams) {\n    return {\n      messageType: \"NestedAppAuthRequest\",\n      method: method,\n      requestId: createNewGuid(),\n      sendTime: Date.now(),\n      clientLibrary: BrowserConstants.MSAL_SKU,\n      clientLibraryVersion: version,\n      ...requestParams\n    };\n  }\n  /**\r\n   * A method used to send a request to the bridge\r\n   * @param request A token request\r\n   * @returns a promise that resolves to a response of provided type or rejects with a BridgeError\r\n   */\n  sendRequest(method, requestParams) {\n    const message = BridgeProxy.buildRequest(method, requestParams);\n    const promise = new Promise((resolve, reject) => {\n      const request = {\n        requestId: message.requestId,\n        method: message.method,\n        resolve: resolve,\n        reject: reject\n      };\n      BridgeProxy.bridgeRequests.push(request);\n      window.nestedAppAuthBridge.postMessage(JSON.stringify(message));\n    });\n    return promise;\n  }\n  static validateBridgeResultOrThrow(input) {\n    if (input === undefined) {\n      const bridgeError = {\n        status: BridgeStatusCode.NestedAppAuthUnavailable\n      };\n      throw bridgeError;\n    }\n    return input;\n  }\n  /**\r\n   * Private constructor for BridgeProxy\r\n   * @param sdkName The name of the SDK being used to make requests on behalf of the app\r\n   * @param sdkVersion The version of the SDK being used to make requests on behalf of the app\r\n   * @param capabilities The capabilities of the bridge / SDK / platform broker\r\n   */\n  constructor(sdkName, sdkVersion, accountContext, capabilities) {\n    this.sdkName = sdkName;\n    this.sdkVersion = sdkVersion;\n    this.accountContext = accountContext;\n    this.capabilities = capabilities;\n  }\n  /**\r\n   * Factory method for creating an implementation of IBridgeProxy\r\n   * @returns A promise that resolves to a BridgeProxy implementation\r\n   */\n  static async create() {\n    const response = await BridgeProxy.initializeNestedAppAuthBridge();\n    return new BridgeProxy(response.sdkName, response.sdkVersion, response.accountContext, response.capabilities);\n  }\n}\nBridgeProxy.bridgeRequests = [];\nexport { BridgeProxy, BridgeProxy as default };","map":{"version":3,"names":["BridgeProxy","initializeNestedAppAuthBridge","window","undefined","Error","nestedAppAuthBridge","addEventListener","response","responsePayload","data","responseEnvelope","JSON","parse","request","bridgeRequests","find","element","requestId","splice","indexOf","success","resolve","reject","error","bridgeResponse","Promise","message","buildRequest","method","push","postMessage","stringify","validateBridgeResultOrThrow","initContext","console","log","getTokenInteractive","getToken","getTokenSilent","requestType","result","sendRequest","tokenParams","token","account","getHostCapabilities","capabilities","getAccountContext","accountContext","requestParams","messageType","createNewGuid","sendTime","Date","now","clientLibrary","BrowserConstants","MSAL_SKU","clientLibraryVersion","version","promise","input","bridgeError","status","BridgeStatusCode","NestedAppAuthUnavailable","constructor","sdkName","sdkVersion","create"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-browser/src/naa/BridgeProxy.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthBridge, AuthBridgeResponse } from \"./AuthBridge.js\";\nimport { AuthResult } from \"./AuthResult.js\";\nimport { BridgeCapabilities } from \"./BridgeCapabilities.js\";\nimport { AccountContext } from \"./BridgeAccountContext.js\";\nimport { BridgeError } from \"./BridgeError.js\";\nimport { BridgeRequest } from \"./BridgeRequest.js\";\nimport {\n    BridgeRequestEnvelope,\n    BridgeMethods,\n} from \"./BridgeRequestEnvelope.js\";\nimport { BridgeResponseEnvelope } from \"./BridgeResponseEnvelope.js\";\nimport { BridgeStatusCode } from \"./BridgeStatusCode.js\";\nimport { IBridgeProxy } from \"./IBridgeProxy.js\";\nimport { InitContext } from \"./InitContext.js\";\nimport { TokenRequest } from \"./TokenRequest.js\";\nimport * as BrowserCrypto from \"../crypto/BrowserCrypto.js\";\nimport { BrowserConstants } from \"../utils/BrowserConstants.js\";\nimport { version } from \"../packageMetadata.js\";\n\ndeclare global {\n    interface Window {\n        nestedAppAuthBridge: AuthBridge;\n    }\n}\n\n/**\n * BridgeProxy\n * Provides a proxy for accessing a bridge to a host app and/or\n * platform broker\n */\nexport class BridgeProxy implements IBridgeProxy {\n    static bridgeRequests: BridgeRequest[] = [];\n    sdkName: string;\n    sdkVersion: string;\n    capabilities?: BridgeCapabilities;\n    accountContext?: AccountContext;\n\n    /**\n     * initializeNestedAppAuthBridge - Initializes the bridge to the host app\n     * @returns a promise that resolves to an InitializeBridgeResponse or rejects with an Error\n     * @remarks This method will be called by the create factory method\n     * @remarks If the bridge is not available, this method will throw an error\n     */\n    protected static async initializeNestedAppAuthBridge(): Promise<InitContext> {\n        if (window === undefined) {\n            throw new Error(\"window is undefined\");\n        }\n        if (window.nestedAppAuthBridge === undefined) {\n            throw new Error(\"window.nestedAppAuthBridge is undefined\");\n        }\n\n        try {\n            window.nestedAppAuthBridge.addEventListener(\n                \"message\",\n                (response: AuthBridgeResponse) => {\n                    const responsePayload =\n                        typeof response === \"string\" ? response : response.data;\n                    const responseEnvelope: BridgeResponseEnvelope =\n                        JSON.parse(responsePayload);\n                    const request = BridgeProxy.bridgeRequests.find(\n                        (element) =>\n                            element.requestId === responseEnvelope.requestId\n                    );\n                    if (request !== undefined) {\n                        BridgeProxy.bridgeRequests.splice(\n                            BridgeProxy.bridgeRequests.indexOf(request),\n                            1\n                        );\n                        if (responseEnvelope.success) {\n                            request.resolve(responseEnvelope);\n                        } else {\n                            request.reject(responseEnvelope.error);\n                        }\n                    }\n                }\n            );\n\n            const bridgeResponse = await new Promise<BridgeResponseEnvelope>(\n                (resolve, reject) => {\n                    const message = BridgeProxy.buildRequest(\"GetInitContext\");\n\n                    const request: BridgeRequest = {\n                        requestId: message.requestId,\n                        method: message.method,\n                        resolve: resolve,\n                        reject: reject,\n                    };\n                    BridgeProxy.bridgeRequests.push(request);\n                    window.nestedAppAuthBridge.postMessage(\n                        JSON.stringify(message)\n                    );\n                }\n            );\n\n            return BridgeProxy.validateBridgeResultOrThrow(\n                bridgeResponse.initContext\n            );\n        } catch (error) {\n            window.console.log(error);\n            throw error;\n        }\n    }\n\n    /**\n     * getTokenInteractive - Attempts to get a token interactively from the bridge\n     * @param request A token request\n     * @returns a promise that resolves to an auth result or rejects with a BridgeError\n     */\n    public getTokenInteractive(request: TokenRequest): Promise<AuthResult> {\n        return this.getToken(\"GetTokenPopup\", request);\n    }\n\n    /**\n     * getTokenSilent Attempts to get a token silently from the bridge\n     * @param request A token request\n     * @returns a promise that resolves to an auth result or rejects with a BridgeError\n     */\n    public getTokenSilent(request: TokenRequest): Promise<AuthResult> {\n        return this.getToken(\"GetToken\", request);\n    }\n\n    private async getToken(\n        requestType: BridgeMethods,\n        request: TokenRequest\n    ): Promise<AuthResult> {\n        const result = await this.sendRequest(requestType, {\n            tokenParams: request,\n        });\n        return {\n            token: BridgeProxy.validateBridgeResultOrThrow(result.token),\n            account: BridgeProxy.validateBridgeResultOrThrow(result.account),\n        };\n    }\n\n    public getHostCapabilities(): BridgeCapabilities | null {\n        return this.capabilities ?? null;\n    }\n\n    public getAccountContext(): AccountContext | null {\n        return this.accountContext ? this.accountContext : null;\n    }\n\n    private static buildRequest(\n        method: BridgeMethods,\n        requestParams?: Partial<BridgeRequestEnvelope>\n    ): BridgeRequestEnvelope {\n        return {\n            messageType: \"NestedAppAuthRequest\",\n            method: method,\n            requestId: BrowserCrypto.createNewGuid(),\n            sendTime: Date.now(),\n            clientLibrary: BrowserConstants.MSAL_SKU,\n            clientLibraryVersion: version,\n            ...requestParams,\n        };\n    }\n\n    /**\n     * A method used to send a request to the bridge\n     * @param request A token request\n     * @returns a promise that resolves to a response of provided type or rejects with a BridgeError\n     */\n    private sendRequest(\n        method: BridgeMethods,\n        requestParams?: Partial<BridgeRequestEnvelope>\n    ): Promise<BridgeResponseEnvelope> {\n        const message = BridgeProxy.buildRequest(method, requestParams);\n\n        const promise = new Promise<BridgeResponseEnvelope>(\n            (resolve, reject) => {\n                const request: BridgeRequest = {\n                    requestId: message.requestId,\n                    method: message.method,\n                    resolve: resolve,\n                    reject: reject,\n                };\n                BridgeProxy.bridgeRequests.push(request);\n                window.nestedAppAuthBridge.postMessage(JSON.stringify(message));\n            }\n        );\n\n        return promise;\n    }\n\n    private static validateBridgeResultOrThrow<T>(input: T | undefined): T {\n        if (input === undefined) {\n            const bridgeError: BridgeError = {\n                status: BridgeStatusCode.NestedAppAuthUnavailable,\n            };\n            throw bridgeError;\n        }\n        return input;\n    }\n\n    /**\n     * Private constructor for BridgeProxy\n     * @param sdkName The name of the SDK being used to make requests on behalf of the app\n     * @param sdkVersion The version of the SDK being used to make requests on behalf of the app\n     * @param capabilities The capabilities of the bridge / SDK / platform broker\n     */\n    private constructor(\n        sdkName: string,\n        sdkVersion: string,\n        accountContext?: AccountContext,\n        capabilities?: BridgeCapabilities\n    ) {\n        this.sdkName = sdkName;\n        this.sdkVersion = sdkVersion;\n        this.accountContext = accountContext;\n        this.capabilities = capabilities;\n    }\n\n    /**\n     * Factory method for creating an implementation of IBridgeProxy\n     * @returns A promise that resolves to a BridgeProxy implementation\n     */\n    public static async create(): Promise<IBridgeProxy> {\n        const response = await BridgeProxy.initializeNestedAppAuthBridge();\n        return new BridgeProxy(\n            response.sdkName,\n            response.sdkVersion,\n            response.accountContext,\n            response.capabilities\n        );\n    }\n}\n\nexport default BridgeProxy;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}