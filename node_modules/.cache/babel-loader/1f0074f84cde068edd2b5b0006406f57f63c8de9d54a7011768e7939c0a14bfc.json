{"ast":null,"code":"/*! @azure/msal-common v15.7.0 2025-05-30 */\n'use strict';\n\nimport { DEFAULT_CRYPTO_IMPLEMENTATION } from '../crypto/ICrypto.mjs';\nimport { Logger, LogLevel } from '../logger/Logger.mjs';\nimport { DEFAULT_TOKEN_RENEWAL_OFFSET_SEC, Constants } from '../utils/Constants.mjs';\nimport { version } from '../packageMetadata.mjs';\nimport { AzureCloudInstance } from '../authority/AuthorityOptions.mjs';\nimport { DefaultStorageClass } from '../cache/CacheManager.mjs';\nimport { ProtocolMode } from '../authority/ProtocolMode.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { methodNotImplemented } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst DEFAULT_SYSTEM_OPTIONS = {\n  tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\n  preventCorsPreflight: false\n};\nconst DEFAULT_LOGGER_IMPLEMENTATION = {\n  loggerCallback: () => {\n    // allow users to not set loggerCallback\n  },\n  piiLoggingEnabled: false,\n  logLevel: LogLevel.Info,\n  correlationId: Constants.EMPTY_STRING\n};\nconst DEFAULT_CACHE_OPTIONS = {\n  claimsBasedCachingEnabled: false\n};\nconst DEFAULT_NETWORK_IMPLEMENTATION = {\n  async sendGetRequestAsync() {\n    throw createClientAuthError(methodNotImplemented);\n  },\n  async sendPostRequestAsync() {\n    throw createClientAuthError(methodNotImplemented);\n  }\n};\nconst DEFAULT_LIBRARY_INFO = {\n  sku: Constants.SKU,\n  version: version,\n  cpu: Constants.EMPTY_STRING,\n  os: Constants.EMPTY_STRING\n};\nconst DEFAULT_CLIENT_CREDENTIALS = {\n  clientSecret: Constants.EMPTY_STRING,\n  clientAssertion: undefined\n};\nconst DEFAULT_AZURE_CLOUD_OPTIONS = {\n  azureCloudInstance: AzureCloudInstance.None,\n  tenant: `${Constants.DEFAULT_COMMON_TENANT}`\n};\nconst DEFAULT_TELEMETRY_OPTIONS = {\n  application: {\n    appName: \"\",\n    appVersion: \"\"\n  }\n};\n/**\r\n * Function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param Configuration\r\n *\r\n * @returns Configuration\r\n */\nfunction buildClientConfiguration({\n  authOptions: userAuthOptions,\n  systemOptions: userSystemOptions,\n  loggerOptions: userLoggerOption,\n  cacheOptions: userCacheOptions,\n  storageInterface: storageImplementation,\n  networkInterface: networkImplementation,\n  cryptoInterface: cryptoImplementation,\n  clientCredentials: clientCredentials,\n  libraryInfo: libraryInfo,\n  telemetry: telemetry,\n  serverTelemetryManager: serverTelemetryManager,\n  persistencePlugin: persistencePlugin,\n  serializableCache: serializableCache\n}) {\n  const loggerOptions = {\n    ...DEFAULT_LOGGER_IMPLEMENTATION,\n    ...userLoggerOption\n  };\n  return {\n    authOptions: buildAuthOptions(userAuthOptions),\n    systemOptions: {\n      ...DEFAULT_SYSTEM_OPTIONS,\n      ...userSystemOptions\n    },\n    loggerOptions: loggerOptions,\n    cacheOptions: {\n      ...DEFAULT_CACHE_OPTIONS,\n      ...userCacheOptions\n    },\n    storageInterface: storageImplementation || new DefaultStorageClass(userAuthOptions.clientId, DEFAULT_CRYPTO_IMPLEMENTATION, new Logger(loggerOptions)),\n    networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\n    cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\n    clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\n    libraryInfo: {\n      ...DEFAULT_LIBRARY_INFO,\n      ...libraryInfo\n    },\n    telemetry: {\n      ...DEFAULT_TELEMETRY_OPTIONS,\n      ...telemetry\n    },\n    serverTelemetryManager: serverTelemetryManager || null,\n    persistencePlugin: persistencePlugin || null,\n    serializableCache: serializableCache || null\n  };\n}\n/**\r\n * Construct authoptions from the client and platform passed values\r\n * @param authOptions\r\n */\nfunction buildAuthOptions(authOptions) {\n  return {\n    clientCapabilities: [],\n    azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS,\n    skipAuthorityMetadataCache: false,\n    instanceAware: false,\n    encodeExtraQueryParams: false,\n    ...authOptions\n  };\n}\n/**\r\n * Returns true if config has protocolMode set to ProtocolMode.OIDC, false otherwise\r\n * @param ClientConfiguration\r\n */\nfunction isOidcProtocolMode(config) {\n  return config.authOptions.authority.options.protocolMode === ProtocolMode.OIDC;\n}\nexport { DEFAULT_SYSTEM_OPTIONS, buildClientConfiguration, isOidcProtocolMode };","map":{"version":3,"names":["DEFAULT_SYSTEM_OPTIONS","tokenRenewalOffsetSeconds","DEFAULT_TOKEN_RENEWAL_OFFSET_SEC","preventCorsPreflight","DEFAULT_LOGGER_IMPLEMENTATION","loggerCallback","piiLoggingEnabled","logLevel","LogLevel","Info","correlationId","Constants","EMPTY_STRING","DEFAULT_CACHE_OPTIONS","claimsBasedCachingEnabled","DEFAULT_NETWORK_IMPLEMENTATION","sendGetRequestAsync","createClientAuthError","methodNotImplemented","sendPostRequestAsync","DEFAULT_LIBRARY_INFO","sku","SKU","version","cpu","os","DEFAULT_CLIENT_CREDENTIALS","clientSecret","clientAssertion","undefined","DEFAULT_AZURE_CLOUD_OPTIONS","azureCloudInstance","AzureCloudInstance","None","tenant","DEFAULT_COMMON_TENANT","DEFAULT_TELEMETRY_OPTIONS","application","appName","appVersion","buildClientConfiguration","authOptions","userAuthOptions","systemOptions","userSystemOptions","loggerOptions","userLoggerOption","cacheOptions","userCacheOptions","storageInterface","storageImplementation","networkInterface","networkImplementation","cryptoInterface","cryptoImplementation","clientCredentials","libraryInfo","telemetry","serverTelemetryManager","persistencePlugin","serializableCache","buildAuthOptions","DefaultStorageClass","clientId","DEFAULT_CRYPTO_IMPLEMENTATION","Logger","clientCapabilities","azureCloudOptions","skipAuthorityMetadataCache","instanceAware","encodeExtraQueryParams","isOidcProtocolMode","config","authority","options","protocolMode","ProtocolMode","OIDC"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-common/src/config/ClientConfiguration.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule } from \"../network/INetworkModule.js\";\nimport { DEFAULT_CRYPTO_IMPLEMENTATION, ICrypto } from \"../crypto/ICrypto.js\";\nimport { ILoggerCallback, Logger, LogLevel } from \"../logger/Logger.js\";\nimport {\n    Constants,\n    DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\n} from \"../utils/Constants.js\";\nimport { version } from \"../packageMetadata.js\";\nimport type { Authority } from \"../authority/Authority.js\";\nimport { AzureCloudInstance } from \"../authority/AuthorityOptions.js\";\nimport { CacheManager, DefaultStorageClass } from \"../cache/CacheManager.js\";\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager.js\";\nimport { ICachePlugin } from \"../cache/interface/ICachePlugin.js\";\nimport { ISerializableTokenCache } from \"../cache/interface/ISerializableTokenCache.js\";\nimport { ClientCredentials } from \"../account/ClientCredentials.js\";\nimport { ProtocolMode } from \"../authority/ProtocolMode.js\";\nimport {\n    ClientAuthErrorCodes,\n    createClientAuthError,\n} from \"../error/ClientAuthError.js\";\n\n/**\n * Use the configuration object to configure MSAL Modules and initialize the base interfaces for MSAL.\n *\n * This object allows you to configure important elements of MSAL functionality:\n * - authOptions                - Authentication for application\n * - cryptoInterface            - Implementation of crypto functions\n * - libraryInfo                - Library metadata\n * - telemetry                  - Telemetry options and data\n * - loggerOptions              - Logging for application\n * - networkInterface           - Network implementation\n * - storageInterface           - Storage implementation\n * - systemOptions              - Additional library options\n * - clientCredentials          - Credentials options for confidential clients\n * @internal\n */\nexport type ClientConfiguration = {\n    authOptions: AuthOptions;\n    systemOptions?: SystemOptions;\n    loggerOptions?: LoggerOptions;\n    cacheOptions?: CacheOptions;\n    storageInterface?: CacheManager;\n    networkInterface?: INetworkModule;\n    cryptoInterface?: ICrypto;\n    clientCredentials?: ClientCredentials;\n    libraryInfo?: LibraryInfo;\n    telemetry?: TelemetryOptions;\n    serverTelemetryManager?: ServerTelemetryManager | null;\n    persistencePlugin?: ICachePlugin | null;\n    serializableCache?: ISerializableTokenCache | null;\n};\n\nexport type CommonClientConfiguration = {\n    authOptions: Required<AuthOptions>;\n    systemOptions: Required<SystemOptions>;\n    loggerOptions: Required<LoggerOptions>;\n    cacheOptions: Required<CacheOptions>;\n    storageInterface: CacheManager;\n    networkInterface: INetworkModule;\n    cryptoInterface: Required<ICrypto>;\n    libraryInfo: LibraryInfo;\n    telemetry: Required<TelemetryOptions>;\n    serverTelemetryManager: ServerTelemetryManager | null;\n    clientCredentials: ClientCredentials;\n    persistencePlugin: ICachePlugin | null;\n    serializableCache: ISerializableTokenCache | null;\n};\n\n/**\n * Use this to configure the auth options in the ClientConfiguration object\n *\n * - clientId                    - Client ID of your app registered with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview in Microsoft Identity Platform\n * - authority                   - You can configure a specific authority, defaults to \" \" or \"https://login.microsoftonline.com/common\"\n * - knownAuthorities            - An array of URIs that are known to be valid. Used in B2C scenarios.\n * - cloudDiscoveryMetadata      - A string containing the cloud discovery response. Used in AAD scenarios.\n * - clientCapabilities          - Array of capabilities which will be added to the claims.access_token.xms_cc request property on every network request.\n * - protocolMode                - Enum that represents the protocol that msal follows. Used for configuring proper endpoints.\n * - skipAuthorityMetadataCache  - A flag to choose whether to use or not use the local metadata cache during authority initialization. Defaults to false.\n * - instanceAware               - A flag of whether the STS will send back additional parameters to specify where the tokens should be retrieved from.\n * - redirectUri                 - The redirect URI where authentication responses can be received by your application. It must exactly match one of the redirect URIs registered in the Azure portal.\n * - encodeExtraQueryParams      - A flag to choose whether to encode the extra query parameters or not. Defaults to false.\n * @internal\n */\nexport type AuthOptions = {\n    clientId: string;\n    authority: Authority;\n    redirectUri: string;\n    clientCapabilities?: Array<string>;\n    azureCloudOptions?: AzureCloudOptions;\n    skipAuthorityMetadataCache?: boolean;\n    instanceAware?: boolean;\n    /**\n     * @deprecated This flag is deprecated and will be removed in the next major version where all extra query params will be encoded by default.\n     */\n    encodeExtraQueryParams?: boolean;\n};\n\n/**\n * Use this to configure token renewal info in the Configuration object\n *\n * - tokenRenewalOffsetSeconds    - Sets the window of offset needed to renew the token before expiry\n */\nexport type SystemOptions = {\n    tokenRenewalOffsetSeconds?: number;\n    preventCorsPreflight?: boolean;\n};\n\n/**\n *  Use this to configure the logging that MSAL does, by configuring logger options in the Configuration object\n *\n * - loggerCallback                - Callback for logger\n * - piiLoggingEnabled             - Sets whether pii logging is enabled\n * - logLevel                      - Sets the level at which logging happens\n * - correlationId                 - Sets the correlationId printed by the logger\n */\nexport type LoggerOptions = {\n    loggerCallback?: ILoggerCallback;\n    piiLoggingEnabled?: boolean;\n    logLevel?: LogLevel;\n    correlationId?: string;\n};\n\n/**\n *  Use this to configure credential cache preferences in the ClientConfiguration object\n *\n * - claimsBasedCachingEnabled   - Sets whether tokens should be cached based on the claims hash. Default is false.\n */\nexport type CacheOptions = {\n    /**\n     * @deprecated claimsBasedCachingEnabled is deprecated and will be removed in the next major version.\n     */\n    claimsBasedCachingEnabled?: boolean;\n};\n\n/**\n * Library-specific options\n */\nexport type LibraryInfo = {\n    sku: string;\n    version: string;\n    cpu: string;\n    os: string;\n};\n\n/**\n * AzureCloudInstance specific options\n *\n * - azureCloudInstance             - string enum providing short notation for soverign and public cloud authorities\n * - tenant                         - provision to provide the tenant info\n */\nexport type AzureCloudOptions = {\n    azureCloudInstance: AzureCloudInstance;\n    tenant?: string;\n};\n\nexport type TelemetryOptions = {\n    application: ApplicationTelemetry;\n};\n\n/**\n * Telemetry information sent on request\n * - appName: Unique string name of an application\n * - appVersion: Version of the application using MSAL\n */\nexport type ApplicationTelemetry = {\n    appName: string;\n    appVersion: string;\n};\n\nexport const DEFAULT_SYSTEM_OPTIONS: Required<SystemOptions> = {\n    tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\n    preventCorsPreflight: false,\n};\n\nconst DEFAULT_LOGGER_IMPLEMENTATION: Required<LoggerOptions> = {\n    loggerCallback: () => {\n        // allow users to not set loggerCallback\n    },\n    piiLoggingEnabled: false,\n    logLevel: LogLevel.Info,\n    correlationId: Constants.EMPTY_STRING,\n};\n\nconst DEFAULT_CACHE_OPTIONS: Required<CacheOptions> = {\n    claimsBasedCachingEnabled: false,\n};\n\nconst DEFAULT_NETWORK_IMPLEMENTATION: INetworkModule = {\n    async sendGetRequestAsync<T>(): Promise<T> {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    },\n    async sendPostRequestAsync<T>(): Promise<T> {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    },\n};\n\nconst DEFAULT_LIBRARY_INFO: LibraryInfo = {\n    sku: Constants.SKU,\n    version: version,\n    cpu: Constants.EMPTY_STRING,\n    os: Constants.EMPTY_STRING,\n};\n\nconst DEFAULT_CLIENT_CREDENTIALS: ClientCredentials = {\n    clientSecret: Constants.EMPTY_STRING,\n    clientAssertion: undefined,\n};\n\nconst DEFAULT_AZURE_CLOUD_OPTIONS: AzureCloudOptions = {\n    azureCloudInstance: AzureCloudInstance.None,\n    tenant: `${Constants.DEFAULT_COMMON_TENANT}`,\n};\n\nconst DEFAULT_TELEMETRY_OPTIONS: Required<TelemetryOptions> = {\n    application: {\n        appName: \"\",\n        appVersion: \"\",\n    },\n};\n\n/**\n * Function that sets the default options when not explicitly configured from app developer\n *\n * @param Configuration\n *\n * @returns Configuration\n */\nexport function buildClientConfiguration({\n    authOptions: userAuthOptions,\n    systemOptions: userSystemOptions,\n    loggerOptions: userLoggerOption,\n    cacheOptions: userCacheOptions,\n    storageInterface: storageImplementation,\n    networkInterface: networkImplementation,\n    cryptoInterface: cryptoImplementation,\n    clientCredentials: clientCredentials,\n    libraryInfo: libraryInfo,\n    telemetry: telemetry,\n    serverTelemetryManager: serverTelemetryManager,\n    persistencePlugin: persistencePlugin,\n    serializableCache: serializableCache,\n}: ClientConfiguration): CommonClientConfiguration {\n    const loggerOptions = {\n        ...DEFAULT_LOGGER_IMPLEMENTATION,\n        ...userLoggerOption,\n    };\n\n    return {\n        authOptions: buildAuthOptions(userAuthOptions),\n        systemOptions: { ...DEFAULT_SYSTEM_OPTIONS, ...userSystemOptions },\n        loggerOptions: loggerOptions,\n        cacheOptions: { ...DEFAULT_CACHE_OPTIONS, ...userCacheOptions },\n        storageInterface:\n            storageImplementation ||\n            new DefaultStorageClass(\n                userAuthOptions.clientId,\n                DEFAULT_CRYPTO_IMPLEMENTATION,\n                new Logger(loggerOptions)\n            ),\n        networkInterface:\n            networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\n        cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\n        clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\n        libraryInfo: { ...DEFAULT_LIBRARY_INFO, ...libraryInfo },\n        telemetry: { ...DEFAULT_TELEMETRY_OPTIONS, ...telemetry },\n        serverTelemetryManager: serverTelemetryManager || null,\n        persistencePlugin: persistencePlugin || null,\n        serializableCache: serializableCache || null,\n    };\n}\n\n/**\n * Construct authoptions from the client and platform passed values\n * @param authOptions\n */\nfunction buildAuthOptions(authOptions: AuthOptions): Required<AuthOptions> {\n    return {\n        clientCapabilities: [],\n        azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS,\n        skipAuthorityMetadataCache: false,\n        instanceAware: false,\n        encodeExtraQueryParams: false,\n        ...authOptions,\n    };\n}\n\n/**\n * Returns true if config has protocolMode set to ProtocolMode.OIDC, false otherwise\n * @param ClientConfiguration\n */\nexport function isOidcProtocolMode(config: ClientConfiguration): boolean {\n    return (\n        config.authOptions.authority.options.protocolMode === ProtocolMode.OIDC\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}