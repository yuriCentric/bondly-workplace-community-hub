{"ast":null,"code":"/*! @azure/msal-react v3.0.12 2025-05-06 */\n'use strict';\n\nimport { useState, useEffect } from 'react';\nimport { InteractionStatus, AccountEntity } from '@azure/msal-browser';\nimport { useMsal } from './useMsal.js';\nimport { getAccountByIdentifiers } from '../utils/utilities.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nfunction getAccount(instance, accountIdentifiers) {\n  if (!accountIdentifiers || !accountIdentifiers.homeAccountId && !accountIdentifiers.localAccountId && !accountIdentifiers.username) {\n    // If no account identifiers are provided, return active account\n    return instance.getActiveAccount();\n  }\n  return getAccountByIdentifiers(instance.getAllAccounts(), accountIdentifiers);\n}\n/**\r\n * Given 1 or more accountIdentifiers, returns the Account object if the user is signed-in\r\n * @param accountIdentifiers\r\n */\nfunction useAccount(accountIdentifiers) {\n  const {\n    instance,\n    inProgress,\n    logger\n  } = useMsal();\n  const [account, setAccount] = useState(() => {\n    if (inProgress === InteractionStatus.Startup) {\n      return null;\n    } else {\n      return getAccount(instance, accountIdentifiers);\n    }\n  });\n  useEffect(() => {\n    if (inProgress !== InteractionStatus.Startup) {\n      setAccount(currentAccount => {\n        const nextAccount = getAccount(instance, accountIdentifiers);\n        if (!AccountEntity.accountInfoIsEqual(currentAccount, nextAccount, true)) {\n          logger.info(\"useAccount - Updating account\");\n          return nextAccount;\n        }\n        return currentAccount;\n      });\n    }\n  }, [inProgress, accountIdentifiers, instance, logger]);\n  return account;\n}\nexport { useAccount };","map":{"version":3,"names":["getAccount","instance","accountIdentifiers","homeAccountId","localAccountId","username","getActiveAccount","getAccountByIdentifiers","getAllAccounts","useAccount","inProgress","logger","useMsal","account","setAccount","useState","InteractionStatus","Startup","useEffect","currentAccount","nextAccount","AccountEntity","accountInfoIsEqual","info"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-react/src/hooks/useAccount.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { useState, useEffect } from \"react\";\nimport {\n    AccountInfo,\n    IPublicClientApplication,\n    AccountEntity,\n    InteractionStatus,\n} from \"@azure/msal-browser\";\nimport { useMsal } from \"./useMsal.js\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers.js\";\nimport { getAccountByIdentifiers } from \"../utils/utilities.js\";\n\nfunction getAccount(\n    instance: IPublicClientApplication,\n    accountIdentifiers?: AccountIdentifiers\n): AccountInfo | null {\n    if (\n        !accountIdentifiers ||\n        (!accountIdentifiers.homeAccountId &&\n            !accountIdentifiers.localAccountId &&\n            !accountIdentifiers.username)\n    ) {\n        // If no account identifiers are provided, return active account\n        return instance.getActiveAccount();\n    }\n\n    return getAccountByIdentifiers(\n        instance.getAllAccounts(),\n        accountIdentifiers\n    );\n}\n\n/**\n * Given 1 or more accountIdentifiers, returns the Account object if the user is signed-in\n * @param accountIdentifiers\n */\nexport function useAccount(\n    accountIdentifiers?: AccountIdentifiers\n): AccountInfo | null {\n    const { instance, inProgress, logger } = useMsal();\n\n    const [account, setAccount] = useState<AccountInfo | null>(() => {\n        if (inProgress === InteractionStatus.Startup) {\n            return null;\n        } else {\n            return getAccount(instance, accountIdentifiers);\n        }\n    });\n\n    useEffect(() => {\n        if (inProgress !== InteractionStatus.Startup) {\n            setAccount((currentAccount: AccountInfo | null) => {\n                const nextAccount = getAccount(instance, accountIdentifiers);\n                if (\n                    !AccountEntity.accountInfoIsEqual(\n                        currentAccount,\n                        nextAccount,\n                        true\n                    )\n                ) {\n                    logger.info(\"useAccount - Updating account\");\n                    return nextAccount;\n                }\n\n                return currentAccount;\n            });\n        }\n    }, [inProgress, accountIdentifiers, instance, logger]);\n\n    return account;\n}\n"],"mappings":";;;;;;;;AAAA;;;AAGG;AAaH,SAASA,UAAUA,CACfC,QAAkC,EAClCC,kBAAuC;EAEvC,IACI,CAACA,kBAAkB,IAClB,CAACA,kBAAkB,CAACC,aAAa,IAC9B,CAACD,kBAAkB,CAACE,cAAc,IAClC,CAACF,kBAAkB,CAACG,QAAS,EACnC;;IAEE,OAAOJ,QAAQ,CAACK,gBAAgB,EAAE;EACrC;EAED,OAAOC,uBAAuB,CAC1BN,QAAQ,CAACO,cAAc,EAAE,EACzBN,kBAAkB,CACrB;AACL;AAEA;;;AAGG;AACG,SAAUO,UAAUA,CACtBP,kBAAuC;EAEvC,MAAM;IAAED,QAAQ;IAAES,UAAU;IAAEC;EAAM,CAAE,GAAGC,OAAO,EAAE;EAElD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGC,QAAQ,CAAqB,MAAK;IAC5D,IAAIL,UAAU,KAAKM,iBAAiB,CAACC,OAAO,EAAE;MAC1C,OAAO,IAAI;IACd,OAAM;MACH,OAAOjB,UAAU,CAACC,QAAQ,EAAEC,kBAAkB,CAAC;IAClD;EACL,CAAC,CAAC;EAEFgB,SAAS,CAAC,MAAK;IACX,IAAIR,UAAU,KAAKM,iBAAiB,CAACC,OAAO,EAAE;MAC1CH,UAAU,CAAEK,cAAkC,IAAI;QAC9C,MAAMC,WAAW,GAAGpB,UAAU,CAACC,QAAQ,EAAEC,kBAAkB,CAAC;QAC5D,IACI,CAACmB,aAAa,CAACC,kBAAkB,CAC7BH,cAAc,EACdC,WAAW,EACX,IAAI,CACP,EACH;UACET,MAAM,CAACY,IAAI,CAAC,+BAA+B,CAAC;UAC5C,OAAOH,WAAW;QACrB;QAED,OAAOD,cAAc;MACzB,CAAC,CAAC;IACL;GACJ,EAAE,CAACT,UAAU,EAAER,kBAAkB,EAAED,QAAQ,EAAEU,MAAM,CAAC,CAAC;EAEtD,OAAOE,OAAO;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}