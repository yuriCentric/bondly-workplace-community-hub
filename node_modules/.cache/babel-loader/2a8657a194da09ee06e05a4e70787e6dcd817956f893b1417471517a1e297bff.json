{"ast":null,"code":"/*! @azure/msal-common v15.7.0 2025-05-30 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst Constants = {\n  LIBRARY_NAME: \"MSAL.JS\",\n  SKU: \"msal.js.common\",\n  // Prefix for all library cache entries\n  CACHE_PREFIX: \"msal\",\n  // default authority\n  DEFAULT_AUTHORITY: \"https://login.microsoftonline.com/common/\",\n  DEFAULT_AUTHORITY_HOST: \"login.microsoftonline.com\",\n  DEFAULT_COMMON_TENANT: \"common\",\n  // ADFS String\n  ADFS: \"adfs\",\n  DSTS: \"dstsv2\",\n  // Default AAD Instance Discovery Endpoint\n  AAD_INSTANCE_DISCOVERY_ENDPT: \"https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=\",\n  // CIAM URL\n  CIAM_AUTH_URL: \".ciamlogin.com\",\n  AAD_TENANT_DOMAIN_SUFFIX: \".onmicrosoft.com\",\n  // Resource delimiter - used for certain cache entries\n  RESOURCE_DELIM: \"|\",\n  // Placeholder for non-existent account ids/objects\n  NO_ACCOUNT: \"NO_ACCOUNT\",\n  // Claims\n  CLAIMS: \"claims\",\n  // Consumer UTID\n  CONSUMER_UTID: \"9188040d-6c67-4c5b-b112-36a304b66dad\",\n  // Default scopes\n  OPENID_SCOPE: \"openid\",\n  PROFILE_SCOPE: \"profile\",\n  OFFLINE_ACCESS_SCOPE: \"offline_access\",\n  EMAIL_SCOPE: \"email\",\n  CODE_GRANT_TYPE: \"authorization_code\",\n  RT_GRANT_TYPE: \"refresh_token\",\n  S256_CODE_CHALLENGE_METHOD: \"S256\",\n  URL_FORM_CONTENT_TYPE: \"application/x-www-form-urlencoded;charset=utf-8\",\n  AUTHORIZATION_PENDING: \"authorization_pending\",\n  NOT_DEFINED: \"not_defined\",\n  EMPTY_STRING: \"\",\n  NOT_APPLICABLE: \"N/A\",\n  NOT_AVAILABLE: \"Not Available\",\n  FORWARD_SLASH: \"/\",\n  IMDS_ENDPOINT: \"http://169.254.169.254/metadata/instance/compute/location\",\n  IMDS_VERSION: \"2020-06-01\",\n  IMDS_TIMEOUT: 2000,\n  AZURE_REGION_AUTO_DISCOVER_FLAG: \"TryAutoDetect\",\n  REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: \"login.microsoft.com\",\n  KNOWN_PUBLIC_CLOUDS: [\"login.microsoftonline.com\", \"login.windows.net\", \"login.microsoft.com\", \"sts.windows.net\"],\n  SHR_NONCE_VALIDITY: 240,\n  INVALID_INSTANCE: \"invalid_instance\"\n};\nconst HttpStatus = {\n  SUCCESS: 200,\n  SUCCESS_RANGE_START: 200,\n  SUCCESS_RANGE_END: 299,\n  REDIRECT: 302,\n  CLIENT_ERROR: 400,\n  CLIENT_ERROR_RANGE_START: 400,\n  BAD_REQUEST: 400,\n  UNAUTHORIZED: 401,\n  NOT_FOUND: 404,\n  REQUEST_TIMEOUT: 408,\n  GONE: 410,\n  TOO_MANY_REQUESTS: 429,\n  CLIENT_ERROR_RANGE_END: 499,\n  SERVER_ERROR: 500,\n  SERVER_ERROR_RANGE_START: 500,\n  SERVICE_UNAVAILABLE: 503,\n  GATEWAY_TIMEOUT: 504,\n  SERVER_ERROR_RANGE_END: 599,\n  MULTI_SIDED_ERROR: 600\n};\nconst OIDC_DEFAULT_SCOPES = [Constants.OPENID_SCOPE, Constants.PROFILE_SCOPE, Constants.OFFLINE_ACCESS_SCOPE];\nconst OIDC_SCOPES = [...OIDC_DEFAULT_SCOPES, Constants.EMAIL_SCOPE];\n/**\r\n * Request header names\r\n */\nconst HeaderNames = {\n  CONTENT_TYPE: \"Content-Type\",\n  CONTENT_LENGTH: \"Content-Length\",\n  RETRY_AFTER: \"Retry-After\",\n  CCS_HEADER: \"X-AnchorMailbox\",\n  WWWAuthenticate: \"WWW-Authenticate\",\n  AuthenticationInfo: \"Authentication-Info\",\n  X_MS_REQUEST_ID: \"x-ms-request-id\",\n  X_MS_HTTP_VERSION: \"x-ms-httpver\"\n};\n/**\r\n * Persistent cache keys MSAL which stay while user is logged in.\r\n */\nconst PersistentCacheKeys = {\n  ACTIVE_ACCOUNT_FILTERS: \"active-account-filters\" // new cache entry for active_account for a more robust version for browser\n};\n/**\r\n * String constants related to AAD Authority\r\n */\nconst AADAuthorityConstants = {\n  COMMON: \"common\",\n  ORGANIZATIONS: \"organizations\",\n  CONSUMERS: \"consumers\"\n};\n/**\r\n * Claims request keys\r\n */\nconst ClaimsRequestKeys = {\n  ACCESS_TOKEN: \"access_token\",\n  XMS_CC: \"xms_cc\"\n};\n/**\r\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\r\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\r\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\r\n */\nconst PromptValue = {\n  LOGIN: \"login\",\n  SELECT_ACCOUNT: \"select_account\",\n  CONSENT: \"consent\",\n  NONE: \"none\",\n  CREATE: \"create\",\n  NO_SESSION: \"no_session\"\n};\n/**\r\n * allowed values for codeVerifier\r\n */\nconst CodeChallengeMethodValues = {\n  PLAIN: \"plain\",\n  S256: \"S256\"\n};\n/**\r\n * Allowed values for response_type\r\n */\nconst OAuthResponseType = {\n  CODE: \"code\",\n  IDTOKEN_TOKEN: \"id_token token\",\n  IDTOKEN_TOKEN_REFRESHTOKEN: \"id_token token refresh_token\"\n};\n/**\r\n * allowed values for server response type\r\n * @deprecated Use ResponseMode instead\r\n */\nconst ServerResponseType = {\n  QUERY: \"query\",\n  FRAGMENT: \"fragment\"\n};\n/**\r\n * allowed values for response_mode\r\n */\nconst ResponseMode = {\n  QUERY: \"query\",\n  FRAGMENT: \"fragment\",\n  FORM_POST: \"form_post\"\n};\n/**\r\n * allowed grant_type\r\n */\nconst GrantType = {\n  IMPLICIT_GRANT: \"implicit\",\n  AUTHORIZATION_CODE_GRANT: \"authorization_code\",\n  CLIENT_CREDENTIALS_GRANT: \"client_credentials\",\n  RESOURCE_OWNER_PASSWORD_GRANT: \"password\",\n  REFRESH_TOKEN_GRANT: \"refresh_token\",\n  DEVICE_CODE_GRANT: \"device_code\",\n  JWT_BEARER: \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n};\n/**\r\n * Account types in Cache\r\n */\nconst CacheAccountType = {\n  MSSTS_ACCOUNT_TYPE: \"MSSTS\",\n  ADFS_ACCOUNT_TYPE: \"ADFS\",\n  MSAV1_ACCOUNT_TYPE: \"MSA\",\n  GENERIC_ACCOUNT_TYPE: \"Generic\" // NTLM, Kerberos, FBA, Basic etc\n};\n/**\r\n * Separators used in cache\r\n */\nconst Separators = {\n  CACHE_KEY_SEPARATOR: \"-\",\n  CLIENT_INFO_SEPARATOR: \".\"\n};\n/**\r\n * Credential Type stored in the cache\r\n */\nconst CredentialType = {\n  ID_TOKEN: \"IdToken\",\n  ACCESS_TOKEN: \"AccessToken\",\n  ACCESS_TOKEN_WITH_AUTH_SCHEME: \"AccessToken_With_AuthScheme\",\n  REFRESH_TOKEN: \"RefreshToken\"\n};\n/**\r\n * Combine all cache types\r\n */\nconst CacheType = {\n  ADFS: 1001,\n  MSA: 1002,\n  MSSTS: 1003,\n  GENERIC: 1004,\n  ACCESS_TOKEN: 2001,\n  REFRESH_TOKEN: 2002,\n  ID_TOKEN: 2003,\n  APP_METADATA: 3001,\n  UNDEFINED: 9999\n};\n/**\r\n * More Cache related constants\r\n */\nconst APP_METADATA = \"appmetadata\";\nconst CLIENT_INFO = \"client_info\";\nconst THE_FAMILY_ID = \"1\";\nconst AUTHORITY_METADATA_CONSTANTS = {\n  CACHE_KEY: \"authority-metadata\",\n  REFRESH_TIME_SECONDS: 3600 * 24 // 24 Hours\n};\nconst AuthorityMetadataSource = {\n  CONFIG: \"config\",\n  CACHE: \"cache\",\n  NETWORK: \"network\",\n  HARDCODED_VALUES: \"hardcoded_values\"\n};\nconst SERVER_TELEM_CONSTANTS = {\n  SCHEMA_VERSION: 5,\n  MAX_CUR_HEADER_BYTES: 80,\n  MAX_LAST_HEADER_BYTES: 330,\n  MAX_CACHED_ERRORS: 50,\n  CACHE_KEY: \"server-telemetry\",\n  CATEGORY_SEPARATOR: \"|\",\n  VALUE_SEPARATOR: \",\",\n  OVERFLOW_TRUE: \"1\",\n  OVERFLOW_FALSE: \"0\",\n  UNKNOWN_ERROR: \"unknown_error\"\n};\n/**\r\n * Type of the authentication request\r\n */\nconst AuthenticationScheme = {\n  BEARER: \"Bearer\",\n  POP: \"pop\",\n  SSH: \"ssh-cert\"\n};\n/**\r\n * Constants related to throttling\r\n */\nconst ThrottlingConstants = {\n  // Default time to throttle RequestThumbprint in seconds\n  DEFAULT_THROTTLE_TIME_SECONDS: 60,\n  // Default maximum time to throttle in seconds, overrides what the server sends back\n  DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,\n  // Prefix for storing throttling entries\n  THROTTLING_PREFIX: \"throttling\",\n  // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling\n  X_MS_LIB_CAPABILITY_VALUE: \"retry-after, h429\"\n};\nconst Errors = {\n  INVALID_GRANT_ERROR: \"invalid_grant\",\n  CLIENT_MISMATCH_ERROR: \"client_mismatch\"\n};\n/**\r\n * Password grant parameters\r\n */\nconst PasswordGrantConstants = {\n  username: \"username\",\n  password: \"password\"\n};\n/**\r\n * Region Discovery Sources\r\n */\nconst RegionDiscoverySources = {\n  FAILED_AUTO_DETECTION: \"1\",\n  INTERNAL_CACHE: \"2\",\n  ENVIRONMENT_VARIABLE: \"3\",\n  IMDS: \"4\"\n};\n/**\r\n * Region Discovery Outcomes\r\n */\nconst RegionDiscoveryOutcomes = {\n  CONFIGURED_MATCHES_DETECTED: \"1\",\n  CONFIGURED_NO_AUTO_DETECTION: \"2\",\n  CONFIGURED_NOT_DETECTED: \"3\",\n  AUTO_DETECTION_REQUESTED_SUCCESSFUL: \"4\",\n  AUTO_DETECTION_REQUESTED_FAILED: \"5\"\n};\n/**\r\n * Specifies the reason for fetching the access token from the identity provider\r\n */\nconst CacheOutcome = {\n  // When a token is found in the cache or the cache is not supposed to be hit when making the request\n  NOT_APPLICABLE: \"0\",\n  // When the token request goes to the identity provider because force_refresh was set to true. Also occurs if claims were requested\n  FORCE_REFRESH_OR_CLAIMS: \"1\",\n  // When the token request goes to the identity provider because no cached access token exists\n  NO_CACHED_ACCESS_TOKEN: \"2\",\n  // When the token request goes to the identity provider because cached access token expired\n  CACHED_ACCESS_TOKEN_EXPIRED: \"3\",\n  // When the token request goes to the identity provider because refresh_in was used and the existing token needs to be refreshed\n  PROACTIVELY_REFRESHED: \"4\"\n};\nconst JsonWebTokenTypes = {\n  Jwt: \"JWT\",\n  Jwk: \"JWK\",\n  Pop: \"pop\"\n};\nconst ONE_DAY_IN_MS = 86400000;\n// Token renewal offset default in seconds\nconst DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\nconst EncodingTypes = {\n  BASE64: \"base64\",\n  HEX: \"hex\",\n  UTF8: \"utf-8\"\n};\nexport { AADAuthorityConstants, APP_METADATA, AUTHORITY_METADATA_CONSTANTS, AuthenticationScheme, AuthorityMetadataSource, CLIENT_INFO, CacheAccountType, CacheOutcome, CacheType, ClaimsRequestKeys, CodeChallengeMethodValues, Constants, CredentialType, DEFAULT_TOKEN_RENEWAL_OFFSET_SEC, EncodingTypes, Errors, GrantType, HeaderNames, HttpStatus, JsonWebTokenTypes, OAuthResponseType, OIDC_DEFAULT_SCOPES, OIDC_SCOPES, ONE_DAY_IN_MS, PasswordGrantConstants, PersistentCacheKeys, PromptValue, RegionDiscoveryOutcomes, RegionDiscoverySources, ResponseMode, SERVER_TELEM_CONSTANTS, Separators, ServerResponseType, THE_FAMILY_ID, ThrottlingConstants };","map":{"version":3,"names":["Constants","LIBRARY_NAME","SKU","CACHE_PREFIX","DEFAULT_AUTHORITY","DEFAULT_AUTHORITY_HOST","DEFAULT_COMMON_TENANT","ADFS","DSTS","AAD_INSTANCE_DISCOVERY_ENDPT","CIAM_AUTH_URL","AAD_TENANT_DOMAIN_SUFFIX","RESOURCE_DELIM","NO_ACCOUNT","CLAIMS","CONSUMER_UTID","OPENID_SCOPE","PROFILE_SCOPE","OFFLINE_ACCESS_SCOPE","EMAIL_SCOPE","CODE_GRANT_TYPE","RT_GRANT_TYPE","S256_CODE_CHALLENGE_METHOD","URL_FORM_CONTENT_TYPE","AUTHORIZATION_PENDING","NOT_DEFINED","EMPTY_STRING","NOT_APPLICABLE","NOT_AVAILABLE","FORWARD_SLASH","IMDS_ENDPOINT","IMDS_VERSION","IMDS_TIMEOUT","AZURE_REGION_AUTO_DISCOVER_FLAG","REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX","KNOWN_PUBLIC_CLOUDS","SHR_NONCE_VALIDITY","INVALID_INSTANCE","HttpStatus","SUCCESS","SUCCESS_RANGE_START","SUCCESS_RANGE_END","REDIRECT","CLIENT_ERROR","CLIENT_ERROR_RANGE_START","BAD_REQUEST","UNAUTHORIZED","NOT_FOUND","REQUEST_TIMEOUT","GONE","TOO_MANY_REQUESTS","CLIENT_ERROR_RANGE_END","SERVER_ERROR","SERVER_ERROR_RANGE_START","SERVICE_UNAVAILABLE","GATEWAY_TIMEOUT","SERVER_ERROR_RANGE_END","MULTI_SIDED_ERROR","OIDC_DEFAULT_SCOPES","OIDC_SCOPES","HeaderNames","CONTENT_TYPE","CONTENT_LENGTH","RETRY_AFTER","CCS_HEADER","WWWAuthenticate","AuthenticationInfo","X_MS_REQUEST_ID","X_MS_HTTP_VERSION","PersistentCacheKeys","ACTIVE_ACCOUNT_FILTERS","AADAuthorityConstants","COMMON","ORGANIZATIONS","CONSUMERS","ClaimsRequestKeys","ACCESS_TOKEN","XMS_CC","PromptValue","LOGIN","SELECT_ACCOUNT","CONSENT","NONE","CREATE","NO_SESSION","CodeChallengeMethodValues","PLAIN","S256","OAuthResponseType","CODE","IDTOKEN_TOKEN","IDTOKEN_TOKEN_REFRESHTOKEN","ServerResponseType","QUERY","FRAGMENT","ResponseMode","FORM_POST","GrantType","IMPLICIT_GRANT","AUTHORIZATION_CODE_GRANT","CLIENT_CREDENTIALS_GRANT","RESOURCE_OWNER_PASSWORD_GRANT","REFRESH_TOKEN_GRANT","DEVICE_CODE_GRANT","JWT_BEARER","CacheAccountType","MSSTS_ACCOUNT_TYPE","ADFS_ACCOUNT_TYPE","MSAV1_ACCOUNT_TYPE","GENERIC_ACCOUNT_TYPE","Separators","CACHE_KEY_SEPARATOR","CLIENT_INFO_SEPARATOR","CredentialType","ID_TOKEN","ACCESS_TOKEN_WITH_AUTH_SCHEME","REFRESH_TOKEN","CacheType","MSA","MSSTS","GENERIC","APP_METADATA","UNDEFINED","CLIENT_INFO","THE_FAMILY_ID","AUTHORITY_METADATA_CONSTANTS","CACHE_KEY","REFRESH_TIME_SECONDS","AuthorityMetadataSource","CONFIG","CACHE","NETWORK","HARDCODED_VALUES","SERVER_TELEM_CONSTANTS","SCHEMA_VERSION","MAX_CUR_HEADER_BYTES","MAX_LAST_HEADER_BYTES","MAX_CACHED_ERRORS","CATEGORY_SEPARATOR","VALUE_SEPARATOR","OVERFLOW_TRUE","OVERFLOW_FALSE","UNKNOWN_ERROR","AuthenticationScheme","BEARER","POP","SSH","ThrottlingConstants","DEFAULT_THROTTLE_TIME_SECONDS","DEFAULT_MAX_THROTTLE_TIME_SECONDS","THROTTLING_PREFIX","X_MS_LIB_CAPABILITY_VALUE","Errors","INVALID_GRANT_ERROR","CLIENT_MISMATCH_ERROR","PasswordGrantConstants","username","password","RegionDiscoverySources","FAILED_AUTO_DETECTION","INTERNAL_CACHE","ENVIRONMENT_VARIABLE","IMDS","RegionDiscoveryOutcomes","CONFIGURED_MATCHES_DETECTED","CONFIGURED_NO_AUTO_DETECTION","CONFIGURED_NOT_DETECTED","AUTO_DETECTION_REQUESTED_SUCCESSFUL","AUTO_DETECTION_REQUESTED_FAILED","CacheOutcome","FORCE_REFRESH_OR_CLAIMS","NO_CACHED_ACCESS_TOKEN","CACHED_ACCESS_TOKEN_EXPIRED","PROACTIVELY_REFRESHED","JsonWebTokenTypes","Jwt","Jwk","Pop","ONE_DAY_IN_MS","DEFAULT_TOKEN_RENEWAL_OFFSET_SEC","EncodingTypes","BASE64","HEX","UTF8"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-common/src/utils/Constants.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport const Constants = {\n    LIBRARY_NAME: \"MSAL.JS\",\n    SKU: \"msal.js.common\",\n    // Prefix for all library cache entries\n    CACHE_PREFIX: \"msal\",\n    // default authority\n    DEFAULT_AUTHORITY: \"https://login.microsoftonline.com/common/\",\n    DEFAULT_AUTHORITY_HOST: \"login.microsoftonline.com\",\n    DEFAULT_COMMON_TENANT: \"common\",\n    // ADFS String\n    ADFS: \"adfs\",\n    DSTS: \"dstsv2\",\n    // Default AAD Instance Discovery Endpoint\n    AAD_INSTANCE_DISCOVERY_ENDPT:\n        \"https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=\",\n    // CIAM URL\n    CIAM_AUTH_URL: \".ciamlogin.com\",\n    AAD_TENANT_DOMAIN_SUFFIX: \".onmicrosoft.com\",\n    // Resource delimiter - used for certain cache entries\n    RESOURCE_DELIM: \"|\",\n    // Placeholder for non-existent account ids/objects\n    NO_ACCOUNT: \"NO_ACCOUNT\",\n    // Claims\n    CLAIMS: \"claims\",\n    // Consumer UTID\n    CONSUMER_UTID: \"9188040d-6c67-4c5b-b112-36a304b66dad\",\n    // Default scopes\n    OPENID_SCOPE: \"openid\",\n    PROFILE_SCOPE: \"profile\",\n    OFFLINE_ACCESS_SCOPE: \"offline_access\",\n    EMAIL_SCOPE: \"email\",\n    CODE_GRANT_TYPE: \"authorization_code\",\n    RT_GRANT_TYPE: \"refresh_token\",\n    S256_CODE_CHALLENGE_METHOD: \"S256\",\n    URL_FORM_CONTENT_TYPE: \"application/x-www-form-urlencoded;charset=utf-8\",\n    AUTHORIZATION_PENDING: \"authorization_pending\",\n    NOT_DEFINED: \"not_defined\",\n    EMPTY_STRING: \"\",\n    NOT_APPLICABLE: \"N/A\",\n    NOT_AVAILABLE: \"Not Available\",\n    FORWARD_SLASH: \"/\",\n    IMDS_ENDPOINT: \"http://169.254.169.254/metadata/instance/compute/location\",\n    IMDS_VERSION: \"2020-06-01\",\n    IMDS_TIMEOUT: 2000,\n    AZURE_REGION_AUTO_DISCOVER_FLAG: \"TryAutoDetect\",\n    REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: \"login.microsoft.com\",\n    KNOWN_PUBLIC_CLOUDS: [\n        \"login.microsoftonline.com\",\n        \"login.windows.net\",\n        \"login.microsoft.com\",\n        \"sts.windows.net\",\n    ],\n    SHR_NONCE_VALIDITY: 240,\n    INVALID_INSTANCE: \"invalid_instance\",\n};\n\nexport const HttpStatus = {\n    SUCCESS: 200,\n    SUCCESS_RANGE_START: 200,\n    SUCCESS_RANGE_END: 299,\n    REDIRECT: 302,\n    CLIENT_ERROR: 400,\n    CLIENT_ERROR_RANGE_START: 400,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    NOT_FOUND: 404,\n    REQUEST_TIMEOUT: 408,\n    GONE: 410,\n    TOO_MANY_REQUESTS: 429,\n    CLIENT_ERROR_RANGE_END: 499,\n    SERVER_ERROR: 500,\n    SERVER_ERROR_RANGE_START: 500,\n    SERVICE_UNAVAILABLE: 503,\n    GATEWAY_TIMEOUT: 504,\n    SERVER_ERROR_RANGE_END: 599,\n    MULTI_SIDED_ERROR: 600,\n} as const;\nexport type HttpStatus = (typeof HttpStatus)[keyof typeof HttpStatus];\n\nexport const OIDC_DEFAULT_SCOPES = [\n    Constants.OPENID_SCOPE,\n    Constants.PROFILE_SCOPE,\n    Constants.OFFLINE_ACCESS_SCOPE,\n];\n\nexport const OIDC_SCOPES = [...OIDC_DEFAULT_SCOPES, Constants.EMAIL_SCOPE];\n\n/**\n * Request header names\n */\nexport const HeaderNames = {\n    CONTENT_TYPE: \"Content-Type\",\n    CONTENT_LENGTH: \"Content-Length\",\n    RETRY_AFTER: \"Retry-After\",\n    CCS_HEADER: \"X-AnchorMailbox\",\n    WWWAuthenticate: \"WWW-Authenticate\",\n    AuthenticationInfo: \"Authentication-Info\",\n    X_MS_REQUEST_ID: \"x-ms-request-id\",\n    X_MS_HTTP_VERSION: \"x-ms-httpver\",\n} as const;\nexport type HeaderNames = (typeof HeaderNames)[keyof typeof HeaderNames];\n\n/**\n * Persistent cache keys MSAL which stay while user is logged in.\n */\nexport const PersistentCacheKeys = {\n    ACTIVE_ACCOUNT_FILTERS: \"active-account-filters\", // new cache entry for active_account for a more robust version for browser\n} as const;\nexport type PersistentCacheKeys =\n    (typeof PersistentCacheKeys)[keyof typeof PersistentCacheKeys];\n\n/**\n * String constants related to AAD Authority\n */\nexport const AADAuthorityConstants = {\n    COMMON: \"common\",\n    ORGANIZATIONS: \"organizations\",\n    CONSUMERS: \"consumers\",\n} as const;\nexport type AADAuthorityConstants =\n    (typeof AADAuthorityConstants)[keyof typeof AADAuthorityConstants];\n\n/**\n * Claims request keys\n */\nexport const ClaimsRequestKeys = {\n    ACCESS_TOKEN: \"access_token\",\n    XMS_CC: \"xms_cc\",\n} as const;\nexport type ClaimsRequestKeys =\n    (typeof ClaimsRequestKeys)[keyof typeof ClaimsRequestKeys];\n\n/**\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\n */\nexport const PromptValue = {\n    LOGIN: \"login\",\n    SELECT_ACCOUNT: \"select_account\",\n    CONSENT: \"consent\",\n    NONE: \"none\",\n    CREATE: \"create\",\n    NO_SESSION: \"no_session\",\n};\n\n/**\n * allowed values for codeVerifier\n */\nexport const CodeChallengeMethodValues = {\n    PLAIN: \"plain\",\n    S256: \"S256\",\n};\n\n/**\n * Allowed values for response_type\n */\nexport const OAuthResponseType = {\n    CODE: \"code\",\n    IDTOKEN_TOKEN: \"id_token token\",\n    IDTOKEN_TOKEN_REFRESHTOKEN: \"id_token token refresh_token\",\n} as const;\nexport type OAuthResponseType =\n    (typeof OAuthResponseType)[keyof typeof OAuthResponseType];\n\n/**\n * allowed values for server response type\n * @deprecated Use ResponseMode instead\n */\nexport const ServerResponseType = {\n    QUERY: \"query\",\n    FRAGMENT: \"fragment\",\n} as const;\nexport type ServerResponseType =\n    (typeof ServerResponseType)[keyof typeof ServerResponseType];\n\n/**\n * allowed values for response_mode\n */\nexport const ResponseMode = {\n    QUERY: \"query\",\n    FRAGMENT: \"fragment\",\n    FORM_POST: \"form_post\",\n} as const;\nexport type ResponseMode = (typeof ResponseMode)[keyof typeof ResponseMode];\n\n/**\n * allowed grant_type\n */\nexport const GrantType = {\n    IMPLICIT_GRANT: \"implicit\",\n    AUTHORIZATION_CODE_GRANT: \"authorization_code\",\n    CLIENT_CREDENTIALS_GRANT: \"client_credentials\",\n    RESOURCE_OWNER_PASSWORD_GRANT: \"password\",\n    REFRESH_TOKEN_GRANT: \"refresh_token\",\n    DEVICE_CODE_GRANT: \"device_code\",\n    JWT_BEARER: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n} as const;\nexport type GrantType = (typeof GrantType)[keyof typeof GrantType];\n\n/**\n * Account types in Cache\n */\nexport const CacheAccountType = {\n    MSSTS_ACCOUNT_TYPE: \"MSSTS\",\n    ADFS_ACCOUNT_TYPE: \"ADFS\",\n    MSAV1_ACCOUNT_TYPE: \"MSA\",\n    GENERIC_ACCOUNT_TYPE: \"Generic\", // NTLM, Kerberos, FBA, Basic etc\n} as const;\nexport type CacheAccountType =\n    (typeof CacheAccountType)[keyof typeof CacheAccountType];\n\n/**\n * Separators used in cache\n */\nexport const Separators = {\n    CACHE_KEY_SEPARATOR: \"-\",\n    CLIENT_INFO_SEPARATOR: \".\",\n} as const;\nexport type Separators = (typeof Separators)[keyof typeof Separators];\n\n/**\n * Credential Type stored in the cache\n */\nexport const CredentialType = {\n    ID_TOKEN: \"IdToken\",\n    ACCESS_TOKEN: \"AccessToken\",\n    ACCESS_TOKEN_WITH_AUTH_SCHEME: \"AccessToken_With_AuthScheme\",\n    REFRESH_TOKEN: \"RefreshToken\",\n} as const;\nexport type CredentialType =\n    (typeof CredentialType)[keyof typeof CredentialType];\n\n/**\n * Combine all cache types\n */\nexport const CacheType = {\n    ADFS: 1001,\n    MSA: 1002,\n    MSSTS: 1003,\n    GENERIC: 1004,\n    ACCESS_TOKEN: 2001,\n    REFRESH_TOKEN: 2002,\n    ID_TOKEN: 2003,\n    APP_METADATA: 3001,\n    UNDEFINED: 9999,\n} as const;\nexport type CacheType = (typeof CacheType)[keyof typeof CacheType];\n\n/**\n * More Cache related constants\n */\nexport const APP_METADATA = \"appmetadata\";\nexport const CLIENT_INFO = \"client_info\";\nexport const THE_FAMILY_ID = \"1\";\n\nexport const AUTHORITY_METADATA_CONSTANTS = {\n    CACHE_KEY: \"authority-metadata\",\n    REFRESH_TIME_SECONDS: 3600 * 24, // 24 Hours\n};\n\nexport const AuthorityMetadataSource = {\n    CONFIG: \"config\",\n    CACHE: \"cache\",\n    NETWORK: \"network\",\n    HARDCODED_VALUES: \"hardcoded_values\",\n} as const;\nexport type AuthorityMetadataSource =\n    (typeof AuthorityMetadataSource)[keyof typeof AuthorityMetadataSource];\n\nexport const SERVER_TELEM_CONSTANTS = {\n    SCHEMA_VERSION: 5,\n    MAX_CUR_HEADER_BYTES: 80, // ESTS limit is 100B, set to 80 to provide a 20B buffer\n    MAX_LAST_HEADER_BYTES: 330, // ESTS limit is 350B, set to 330 to provide a 20B buffer,\n    MAX_CACHED_ERRORS: 50, // Limit the number of errors that can be stored to prevent uncontrolled size gains\n    CACHE_KEY: \"server-telemetry\",\n    CATEGORY_SEPARATOR: \"|\",\n    VALUE_SEPARATOR: \",\",\n    OVERFLOW_TRUE: \"1\",\n    OVERFLOW_FALSE: \"0\",\n    UNKNOWN_ERROR: \"unknown_error\",\n};\n\n/**\n * Type of the authentication request\n */\nexport const AuthenticationScheme = {\n    BEARER: \"Bearer\",\n    POP: \"pop\",\n    SSH: \"ssh-cert\",\n} as const;\nexport type AuthenticationScheme =\n    (typeof AuthenticationScheme)[keyof typeof AuthenticationScheme];\n\n/**\n * Constants related to throttling\n */\nexport const ThrottlingConstants = {\n    // Default time to throttle RequestThumbprint in seconds\n    DEFAULT_THROTTLE_TIME_SECONDS: 60,\n    // Default maximum time to throttle in seconds, overrides what the server sends back\n    DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,\n    // Prefix for storing throttling entries\n    THROTTLING_PREFIX: \"throttling\",\n    // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling\n    X_MS_LIB_CAPABILITY_VALUE: \"retry-after, h429\",\n};\n\nexport const Errors = {\n    INVALID_GRANT_ERROR: \"invalid_grant\",\n    CLIENT_MISMATCH_ERROR: \"client_mismatch\",\n};\n\n/**\n * Password grant parameters\n */\nexport const PasswordGrantConstants = {\n    username: \"username\",\n    password: \"password\",\n} as const;\nexport type PasswordGrantConstants =\n    (typeof PasswordGrantConstants)[keyof typeof PasswordGrantConstants];\n\n/**\n * Region Discovery Sources\n */\nexport const RegionDiscoverySources = {\n    FAILED_AUTO_DETECTION: \"1\",\n    INTERNAL_CACHE: \"2\",\n    ENVIRONMENT_VARIABLE: \"3\",\n    IMDS: \"4\",\n} as const;\nexport type RegionDiscoverySources =\n    (typeof RegionDiscoverySources)[keyof typeof RegionDiscoverySources];\n\n/**\n * Region Discovery Outcomes\n */\nexport const RegionDiscoveryOutcomes = {\n    CONFIGURED_MATCHES_DETECTED: \"1\",\n    CONFIGURED_NO_AUTO_DETECTION: \"2\",\n    CONFIGURED_NOT_DETECTED: \"3\",\n    AUTO_DETECTION_REQUESTED_SUCCESSFUL: \"4\",\n    AUTO_DETECTION_REQUESTED_FAILED: \"5\",\n} as const;\nexport type RegionDiscoveryOutcomes =\n    (typeof RegionDiscoveryOutcomes)[keyof typeof RegionDiscoveryOutcomes];\n\n/**\n * Specifies the reason for fetching the access token from the identity provider\n */\nexport const CacheOutcome = {\n    // When a token is found in the cache or the cache is not supposed to be hit when making the request\n    NOT_APPLICABLE: \"0\",\n    // When the token request goes to the identity provider because force_refresh was set to true. Also occurs if claims were requested\n    FORCE_REFRESH_OR_CLAIMS: \"1\",\n    // When the token request goes to the identity provider because no cached access token exists\n    NO_CACHED_ACCESS_TOKEN: \"2\",\n    // When the token request goes to the identity provider because cached access token expired\n    CACHED_ACCESS_TOKEN_EXPIRED: \"3\",\n    // When the token request goes to the identity provider because refresh_in was used and the existing token needs to be refreshed\n    PROACTIVELY_REFRESHED: \"4\",\n} as const;\nexport type CacheOutcome = (typeof CacheOutcome)[keyof typeof CacheOutcome];\n\nexport const JsonWebTokenTypes = {\n    Jwt: \"JWT\",\n    Jwk: \"JWK\",\n    Pop: \"pop\",\n} as const;\nexport type JsonWebTokenTypes =\n    (typeof JsonWebTokenTypes)[keyof typeof JsonWebTokenTypes];\n\nexport const ONE_DAY_IN_MS = 86400000;\n\n// Token renewal offset default in seconds\nexport const DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\n\nexport const EncodingTypes = {\n    BASE64: \"base64\",\n    HEX: \"hex\",\n    UTF8: \"utf-8\",\n} as const;\nexport type EncodingTypes = (typeof EncodingTypes)[keyof typeof EncodingTypes];\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}