{"ast":null,"code":"/*! @azure/msal-common v15.7.0 2025-05-30 */\n'use strict';\n\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { Separators, Constants } from '../utils/Constants.mjs';\nimport { clientInfoEmptyError, clientInfoDecodingError } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Function to build a client info object from server clientInfo string\r\n * @param rawClientInfo\r\n * @param crypto\r\n */\nfunction buildClientInfo(rawClientInfo, base64Decode) {\n  if (!rawClientInfo) {\n    throw createClientAuthError(clientInfoEmptyError);\n  }\n  try {\n    const decodedClientInfo = base64Decode(rawClientInfo);\n    return JSON.parse(decodedClientInfo);\n  } catch (e) {\n    throw createClientAuthError(clientInfoDecodingError);\n  }\n}\n/**\r\n * Function to build a client info object from cached homeAccountId string\r\n * @param homeAccountId\r\n */\nfunction buildClientInfoFromHomeAccountId(homeAccountId) {\n  if (!homeAccountId) {\n    throw createClientAuthError(clientInfoDecodingError);\n  }\n  const clientInfoParts = homeAccountId.split(Separators.CLIENT_INFO_SEPARATOR, 2);\n  return {\n    uid: clientInfoParts[0],\n    utid: clientInfoParts.length < 2 ? Constants.EMPTY_STRING : clientInfoParts[1]\n  };\n}\nexport { buildClientInfo, buildClientInfoFromHomeAccountId };","map":{"version":3,"names":["buildClientInfo","rawClientInfo","base64Decode","createClientAuthError","clientInfoEmptyError","decodedClientInfo","JSON","parse","e","clientInfoDecodingError","buildClientInfoFromHomeAccountId","homeAccountId","clientInfoParts","split","Separators","CLIENT_INFO_SEPARATOR","uid","utid","length","Constants","EMPTY_STRING"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-common/src/account/ClientInfo.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    createClientAuthError,\n    ClientAuthErrorCodes,\n} from \"../error/ClientAuthError.js\";\nimport { Separators, Constants } from \"../utils/Constants.js\";\n\n/**\n * Client info object which consists of two IDs. Need to add more info here.\n */\nexport type ClientInfo = {\n    uid: string;\n    utid: string;\n};\n\n/**\n * Function to build a client info object from server clientInfo string\n * @param rawClientInfo\n * @param crypto\n */\nexport function buildClientInfo(\n    rawClientInfo: string,\n    base64Decode: (input: string) => string\n): ClientInfo {\n    if (!rawClientInfo) {\n        throw createClientAuthError(ClientAuthErrorCodes.clientInfoEmptyError);\n    }\n\n    try {\n        const decodedClientInfo: string = base64Decode(rawClientInfo);\n        return JSON.parse(decodedClientInfo) as ClientInfo;\n    } catch (e) {\n        throw createClientAuthError(\n            ClientAuthErrorCodes.clientInfoDecodingError\n        );\n    }\n}\n\n/**\n * Function to build a client info object from cached homeAccountId string\n * @param homeAccountId\n */\nexport function buildClientInfoFromHomeAccountId(\n    homeAccountId: string\n): ClientInfo {\n    if (!homeAccountId) {\n        throw createClientAuthError(\n            ClientAuthErrorCodes.clientInfoDecodingError\n        );\n    }\n    const clientInfoParts: string[] = homeAccountId.split(\n        Separators.CLIENT_INFO_SEPARATOR,\n        2\n    );\n    return {\n        uid: clientInfoParts[0],\n        utid:\n            clientInfoParts.length < 2\n                ? Constants.EMPTY_STRING\n                : clientInfoParts[1],\n    };\n}\n"],"mappings":";;;;;;;AAAA;;;AAGG;AAgBH;;;;AAIG;AACa,SAAAA,eAAeA,CAC3BC,aAAqB,EACrBC,YAAuC;EAEvC,IAAI,CAACD,aAAa,EAAE;IAChB,MAAME,qBAAqB,CAACC,oBAAyC,CAAC;EACzE;EAED,IAAI;IACA,MAAMC,iBAAiB,GAAWH,YAAY,CAACD,aAAa,CAAC;IAC7D,OAAOK,IAAI,CAACC,KAAK,CAACF,iBAAiB,CAAe;EACrD,EAAC,OAAOG,CAAC,EAAE;IACR,MAAML,qBAAqB,CACvBM,uBAA4C,CAC/C;EACJ;AACL;AAEA;;;AAGG;AACG,SAAUC,gCAAgCA,CAC5CC,aAAqB;EAErB,IAAI,CAACA,aAAa,EAAE;IAChB,MAAMR,qBAAqB,CACvBM,uBAA4C,CAC/C;EACJ;EACD,MAAMG,eAAe,GAAaD,aAAa,CAACE,KAAK,CACjDC,UAAU,CAACC,qBAAqB,EAChC,CAAC,CACJ;EACD,OAAO;IACHC,GAAG,EAAEJ,eAAe,CAAC,CAAC,CAAC;IACvBK,IAAI,EACAL,eAAe,CAACM,MAAM,GAAG,CAAC,GACpBC,SAAS,CAACC,YAAY,GACtBR,eAAe,CAAC,CAAC;GAC9B;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}