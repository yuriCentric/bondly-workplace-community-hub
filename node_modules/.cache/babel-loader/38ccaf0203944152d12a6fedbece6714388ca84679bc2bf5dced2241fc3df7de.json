{"ast":null,"code":"/*! @azure/msal-browser v4.13.1 2025-06-10 */\n'use strict';\n\nimport { Logger } from '@azure/msal-common/browser';\nimport { EventType } from './EventType.mjs';\nimport { createGuid } from '../utils/BrowserUtils.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst BROADCAST_CHANNEL_NAME = \"msal.broadcast.event\";\nclass EventHandler {\n  constructor(logger) {\n    this.eventCallbacks = new Map();\n    this.logger = logger || new Logger({});\n    if (typeof BroadcastChannel !== \"undefined\") {\n      this.broadcastChannel = new BroadcastChannel(BROADCAST_CHANNEL_NAME);\n    }\n    this.invokeCrossTabCallbacks = this.invokeCrossTabCallbacks.bind(this);\n  }\n  /**\r\n   * Adds event callbacks to array\r\n   * @param callback - callback to be invoked when an event is raised\r\n   * @param eventTypes - list of events that this callback will be invoked for, if not provided callback will be invoked for all events\r\n   * @param callbackId - Identifier for the callback, used to locate and remove the callback when no longer required\r\n   */\n  addEventCallback(callback, eventTypes, callbackId) {\n    if (typeof window !== \"undefined\") {\n      const id = callbackId || createGuid();\n      if (this.eventCallbacks.has(id)) {\n        this.logger.error(`Event callback with id: ${id} is already registered. Please provide a unique id or remove the existing callback and try again.`);\n        return null;\n      }\n      this.eventCallbacks.set(id, [callback, eventTypes || []]);\n      this.logger.verbose(`Event callback registered with id: ${id}`);\n      return id;\n    }\n    return null;\n  }\n  /**\r\n   * Removes callback with provided id from callback array\r\n   * @param callbackId\r\n   */\n  removeEventCallback(callbackId) {\n    this.eventCallbacks.delete(callbackId);\n    this.logger.verbose(`Event callback ${callbackId} removed.`);\n  }\n  /**\r\n   * Emits events by calling callback with event message\r\n   * @param eventType\r\n   * @param interactionType\r\n   * @param payload\r\n   * @param error\r\n   */\n  emitEvent(eventType, interactionType, payload, error) {\n    const message = {\n      eventType: eventType,\n      interactionType: interactionType || null,\n      payload: payload || null,\n      error: error || null,\n      timestamp: Date.now()\n    };\n    switch (eventType) {\n      case EventType.ACCOUNT_ADDED:\n      case EventType.ACCOUNT_REMOVED:\n      case EventType.ACTIVE_ACCOUNT_CHANGED:\n        // Send event to other open tabs / MSAL instances on same domain\n        this.broadcastChannel?.postMessage(message);\n        break;\n      default:\n        // Emit event to callbacks registered in this instance\n        this.invokeCallbacks(message);\n        break;\n    }\n  }\n  /**\r\n   * Invoke registered callbacks\r\n   * @param message\r\n   */\n  invokeCallbacks(message) {\n    this.eventCallbacks.forEach(([callback, eventTypes], callbackId) => {\n      if (eventTypes.length === 0 || eventTypes.includes(message.eventType)) {\n        this.logger.verbose(`Emitting event to callback ${callbackId}: ${message.eventType}`);\n        callback.apply(null, [message]);\n      }\n    });\n  }\n  /**\r\n   * Wrapper around invokeCallbacks to handle broadcast events received from other tabs/instances\r\n   * @param event\r\n   */\n  invokeCrossTabCallbacks(event) {\n    const message = event.data;\n    this.invokeCallbacks(message);\n  }\n  /**\r\n   * Listen for events broadcasted from other tabs/instances\r\n   */\n  subscribeCrossTab() {\n    this.broadcastChannel?.addEventListener(\"message\", this.invokeCrossTabCallbacks);\n  }\n  /**\r\n   * Unsubscribe from broadcast events\r\n   */\n  unsubscribeCrossTab() {\n    this.broadcastChannel?.removeEventListener(\"message\", this.invokeCrossTabCallbacks);\n  }\n}\nexport { EventHandler };","map":{"version":3,"names":["BROADCAST_CHANNEL_NAME","EventHandler","constructor","logger","eventCallbacks","Map","Logger","BroadcastChannel","broadcastChannel","invokeCrossTabCallbacks","bind","addEventCallback","callback","eventTypes","callbackId","window","id","createGuid","has","error","set","verbose","removeEventCallback","delete","emitEvent","eventType","interactionType","payload","message","timestamp","Date","now","EventType","ACCOUNT_ADDED","ACCOUNT_REMOVED","ACTIVE_ACCOUNT_CHANGED","postMessage","invokeCallbacks","forEach","length","includes","apply","event","data","subscribeCrossTab","addEventListener","unsubscribeCrossTab","removeEventListener"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-browser/src/event/EventHandler.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Logger } from \"@azure/msal-common/browser\";\nimport { InteractionType } from \"../utils/BrowserConstants.js\";\nimport {\n    EventCallbackFunction,\n    EventError,\n    EventMessage,\n    EventPayload,\n} from \"./EventMessage.js\";\nimport { EventType } from \"./EventType.js\";\nimport { createGuid } from \"../utils/BrowserUtils.js\";\n\nconst BROADCAST_CHANNEL_NAME = \"msal.broadcast.event\";\n\nexport class EventHandler {\n    // Callback for subscribing to events\n    private eventCallbacks: Map<\n        string,\n        [EventCallbackFunction, Array<EventType>]\n    >;\n    private logger: Logger;\n    private broadcastChannel?: BroadcastChannel;\n\n    constructor(logger?: Logger) {\n        this.eventCallbacks = new Map();\n        this.logger = logger || new Logger({});\n        if (typeof BroadcastChannel !== \"undefined\") {\n            this.broadcastChannel = new BroadcastChannel(\n                BROADCAST_CHANNEL_NAME\n            );\n        }\n        this.invokeCrossTabCallbacks = this.invokeCrossTabCallbacks.bind(this);\n    }\n\n    /**\n     * Adds event callbacks to array\n     * @param callback - callback to be invoked when an event is raised\n     * @param eventTypes - list of events that this callback will be invoked for, if not provided callback will be invoked for all events\n     * @param callbackId - Identifier for the callback, used to locate and remove the callback when no longer required\n     */\n    addEventCallback(\n        callback: EventCallbackFunction,\n        eventTypes?: Array<EventType>,\n        callbackId?: string\n    ): string | null {\n        if (typeof window !== \"undefined\") {\n            const id = callbackId || createGuid();\n            if (this.eventCallbacks.has(id)) {\n                this.logger.error(\n                    `Event callback with id: ${id} is already registered. Please provide a unique id or remove the existing callback and try again.`\n                );\n                return null;\n            }\n            this.eventCallbacks.set(id, [callback, eventTypes || []]);\n            this.logger.verbose(`Event callback registered with id: ${id}`);\n\n            return id;\n        }\n\n        return null;\n    }\n\n    /**\n     * Removes callback with provided id from callback array\n     * @param callbackId\n     */\n    removeEventCallback(callbackId: string): void {\n        this.eventCallbacks.delete(callbackId);\n        this.logger.verbose(`Event callback ${callbackId} removed.`);\n    }\n\n    /**\n     * Emits events by calling callback with event message\n     * @param eventType\n     * @param interactionType\n     * @param payload\n     * @param error\n     */\n    emitEvent(\n        eventType: EventType,\n        interactionType?: InteractionType,\n        payload?: EventPayload,\n        error?: EventError\n    ): void {\n        const message: EventMessage = {\n            eventType: eventType,\n            interactionType: interactionType || null,\n            payload: payload || null,\n            error: error || null,\n            timestamp: Date.now(),\n        };\n\n        switch (eventType) {\n            case EventType.ACCOUNT_ADDED:\n            case EventType.ACCOUNT_REMOVED:\n            case EventType.ACTIVE_ACCOUNT_CHANGED:\n                // Send event to other open tabs / MSAL instances on same domain\n                this.broadcastChannel?.postMessage(message);\n                break;\n            default:\n                // Emit event to callbacks registered in this instance\n                this.invokeCallbacks(message);\n                break;\n        }\n    }\n\n    /**\n     * Invoke registered callbacks\n     * @param message\n     */\n    private invokeCallbacks(message: EventMessage): void {\n        this.eventCallbacks.forEach(\n            (\n                [callback, eventTypes]: [\n                    EventCallbackFunction,\n                    Array<EventType>\n                ],\n                callbackId: string\n            ) => {\n                if (\n                    eventTypes.length === 0 ||\n                    eventTypes.includes(message.eventType)\n                ) {\n                    this.logger.verbose(\n                        `Emitting event to callback ${callbackId}: ${message.eventType}`\n                    );\n                    callback.apply(null, [message]);\n                }\n            }\n        );\n    }\n\n    /**\n     * Wrapper around invokeCallbacks to handle broadcast events received from other tabs/instances\n     * @param event\n     */\n    private invokeCrossTabCallbacks(event: MessageEvent): void {\n        const message = event.data as EventMessage;\n        this.invokeCallbacks(message);\n    }\n\n    /**\n     * Listen for events broadcasted from other tabs/instances\n     */\n    subscribeCrossTab(): void {\n        this.broadcastChannel?.addEventListener(\n            \"message\",\n            this.invokeCrossTabCallbacks\n        );\n    }\n\n    /**\n     * Unsubscribe from broadcast events\n     */\n    unsubscribeCrossTab(): void {\n        this.broadcastChannel?.removeEventListener(\n            \"message\",\n            this.invokeCrossTabCallbacks\n        );\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}