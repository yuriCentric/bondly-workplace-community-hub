{"ast":null,"code":"/*! @azure/msal-common v15.7.0 2025-05-30 */\n'use strict';\n\nimport { PerformanceEventStatus } from './PerformanceEvent.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass StubPerformanceMeasurement {\n  startMeasurement() {\n    return;\n  }\n  endMeasurement() {\n    return;\n  }\n  flushMeasurement() {\n    return null;\n  }\n}\nclass StubPerformanceClient {\n  generateId() {\n    return \"callback-id\";\n  }\n  startMeasurement(measureName, correlationId) {\n    return {\n      end: () => null,\n      discard: () => {},\n      add: () => {},\n      increment: () => {},\n      event: {\n        eventId: this.generateId(),\n        status: PerformanceEventStatus.InProgress,\n        authority: \"\",\n        libraryName: \"\",\n        libraryVersion: \"\",\n        clientId: \"\",\n        name: measureName,\n        startTimeMs: Date.now(),\n        correlationId: correlationId || \"\"\n      },\n      measurement: new StubPerformanceMeasurement()\n    };\n  }\n  startPerformanceMeasurement() {\n    return new StubPerformanceMeasurement();\n  }\n  calculateQueuedTime() {\n    return 0;\n  }\n  addQueueMeasurement() {\n    return;\n  }\n  setPreQueueTime() {\n    return;\n  }\n  endMeasurement() {\n    return null;\n  }\n  discardMeasurements() {\n    return;\n  }\n  removePerformanceCallback() {\n    return true;\n  }\n  addPerformanceCallback() {\n    return \"\";\n  }\n  emitEvents() {\n    return;\n  }\n  addFields() {\n    return;\n  }\n  incrementFields() {\n    return;\n  }\n  cacheEventByCorrelationId() {\n    return;\n  }\n}\nexport { StubPerformanceClient, StubPerformanceMeasurement };","map":{"version":3,"names":["StubPerformanceMeasurement","startMeasurement","endMeasurement","flushMeasurement","StubPerformanceClient","generateId","measureName","correlationId","end","discard","add","increment","event","eventId","status","PerformanceEventStatus","InProgress","authority","libraryName","libraryVersion","clientId","name","startTimeMs","Date","now","measurement","startPerformanceMeasurement","calculateQueuedTime","addQueueMeasurement","setPreQueueTime","discardMeasurements","removePerformanceCallback","addPerformanceCallback","emitEvents","addFields","incrementFields","cacheEventByCorrelationId"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-common/src/telemetry/performance/StubPerformanceClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    IPerformanceClient,\n    InProgressPerformanceEvent,\n} from \"./IPerformanceClient.js\";\nimport { IPerformanceMeasurement } from \"./IPerformanceMeasurement.js\";\nimport {\n    PerformanceEvent,\n    PerformanceEventStatus,\n} from \"./PerformanceEvent.js\";\n\nexport class StubPerformanceMeasurement implements IPerformanceMeasurement {\n    startMeasurement(): void {\n        return;\n    }\n    endMeasurement(): void {\n        return;\n    }\n    flushMeasurement(): number | null {\n        return null;\n    }\n}\n\nexport class StubPerformanceClient implements IPerformanceClient {\n    generateId(): string {\n        return \"callback-id\";\n    }\n\n    startMeasurement(\n        measureName: string,\n        correlationId?: string | undefined\n    ): InProgressPerformanceEvent {\n        return {\n            end: () => null,\n            discard: () => {},\n            add: () => {},\n            increment: () => {},\n            event: {\n                eventId: this.generateId(),\n                status: PerformanceEventStatus.InProgress,\n                authority: \"\",\n                libraryName: \"\",\n                libraryVersion: \"\",\n                clientId: \"\",\n                name: measureName,\n                startTimeMs: Date.now(),\n                correlationId: correlationId || \"\",\n            },\n            measurement: new StubPerformanceMeasurement(),\n        };\n    }\n\n    startPerformanceMeasurement(): IPerformanceMeasurement {\n        return new StubPerformanceMeasurement();\n    }\n    calculateQueuedTime(): number {\n        return 0;\n    }\n\n    addQueueMeasurement(): void {\n        return;\n    }\n\n    setPreQueueTime(): void {\n        return;\n    }\n\n    endMeasurement(): PerformanceEvent | null {\n        return null;\n    }\n\n    discardMeasurements(): void {\n        return;\n    }\n\n    removePerformanceCallback(): boolean {\n        return true;\n    }\n\n    addPerformanceCallback(): string {\n        return \"\";\n    }\n\n    emitEvents(): void {\n        return;\n    }\n\n    addFields(): void {\n        return;\n    }\n\n    incrementFields(): void {\n        return;\n    }\n\n    cacheEventByCorrelationId(): void {\n        return;\n    }\n}\n"],"mappings":";;;;;AAAA;;;AAGG;MAYUA,0BAA0B;EACnCC,gBAAgBA,CAAA;IACZ;;EAEJC,cAAcA,CAAA;IACV;;EAEJC,gBAAgBA,CAAA;IACZ,OAAO,IAAI;;AAElB;MAEYC,qBAAqB;EAC9BC,UAAUA,CAAA;IACN,OAAO,aAAa;;EAGxBJ,gBAAgBA,CACZK,WAAmB,EACnBC,aAAkC;IAElC,OAAO;MACHC,GAAG,EAAEA,CAAA,KAAM,IAAI;MACfC,OAAO,EAAEA,CAAA,KAAK,EAAG;MACjBC,GAAG,EAAEA,CAAA,KAAK,EAAG;MACbC,SAAS,EAAEA,CAAA,KAAK,EAAG;MACnBC,KAAK,EAAE;QACHC,OAAO,EAAE,IAAI,CAACR,UAAU,EAAE;QAC1BS,MAAM,EAAEC,sBAAsB,CAACC,UAAU;QACzCC,SAAS,EAAE,EAAE;QACbC,WAAW,EAAE,EAAE;QACfC,cAAc,EAAE,EAAE;QAClBC,QAAQ,EAAE,EAAE;QACZC,IAAI,EAAEf,WAAW;QACjBgB,WAAW,EAAEC,IAAI,CAACC,GAAG,EAAE;QACvBjB,aAAa,EAAEA,aAAa,IAAI;MACnC;MACDkB,WAAW,EAAE,IAAIzB,0BAA0B;KAC9C;;EAGL0B,2BAA2BA,CAAA;IACvB,OAAO,IAAI1B,0BAA0B,EAAE;;EAE3C2B,mBAAmBA,CAAA;IACf,OAAO,CAAC;;EAGZC,mBAAmBA,CAAA;IACf;;EAGJC,eAAeA,CAAA;IACX;;EAGJ3B,cAAcA,CAAA;IACV,OAAO,IAAI;;EAGf4B,mBAAmBA,CAAA;IACf;;EAGJC,yBAAyBA,CAAA;IACrB,OAAO,IAAI;;EAGfC,sBAAsBA,CAAA;IAClB,OAAO,EAAE;;EAGbC,UAAUA,CAAA;IACN;;EAGJC,SAASA,CAAA;IACL;;EAGJC,eAAeA,CAAA;IACX;;EAGJC,yBAAyBA,CAAA;IACrB;;AAEP","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}