{"ast":null,"code":"/*! @azure/msal-common v15.7.0 2025-05-30 */\n'use strict';\n\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { ServerError } from '../error/ServerError.mjs';\nimport { ScopeSet } from '../request/ScopeSet.mjs';\nimport { AccountEntity } from '../cache/entities/AccountEntity.mjs';\nimport { isInteractionRequiredError, InteractionRequiredAuthError } from '../error/InteractionRequiredAuthError.mjs';\nimport { ProtocolUtils } from '../utils/ProtocolUtils.mjs';\nimport { HttpStatus, Constants, AuthenticationScheme, THE_FAMILY_ID } from '../utils/Constants.mjs';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.mjs';\nimport { TokenCacheContext } from '../cache/persistence/TokenCacheContext.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { extractTokenClaims, checkMaxAge } from '../account/AuthToken.mjs';\nimport { getTenantIdFromIdTokenClaims } from '../account/TokenClaims.mjs';\nimport { updateAccountTenantProfileData, buildTenantProfile } from '../account/AccountInfo.mjs';\nimport { createAccessTokenEntity, createRefreshTokenEntity, createIdTokenEntity } from '../cache/utils/CacheHelpers.mjs';\nimport { toDateFromSeconds } from '../utils/TimeUtils.mjs';\nimport { nonceMismatch, authTimeNotFound, invalidCacheEnvironment, keyIdMissing } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Class that handles response parsing.\r\n * @internal\r\n */\nclass ResponseHandler {\n  constructor(clientId, cacheStorage, cryptoObj, logger, serializableCache, persistencePlugin, performanceClient) {\n    this.clientId = clientId;\n    this.cacheStorage = cacheStorage;\n    this.cryptoObj = cryptoObj;\n    this.logger = logger;\n    this.serializableCache = serializableCache;\n    this.persistencePlugin = persistencePlugin;\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Function which validates server authorization token response.\r\n   * @param serverResponse\r\n   * @param refreshAccessToken\r\n   */\n  validateTokenResponse(serverResponse, refreshAccessToken) {\n    // Check for error\n    if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {\n      const errString = `Error(s): ${serverResponse.error_codes || Constants.NOT_AVAILABLE} - Timestamp: ${serverResponse.timestamp || Constants.NOT_AVAILABLE} - Description: ${serverResponse.error_description || Constants.NOT_AVAILABLE} - Correlation ID: ${serverResponse.correlation_id || Constants.NOT_AVAILABLE} - Trace ID: ${serverResponse.trace_id || Constants.NOT_AVAILABLE}`;\n      const serverErrorNo = serverResponse.error_codes?.length ? serverResponse.error_codes[0] : undefined;\n      const serverError = new ServerError(serverResponse.error, errString, serverResponse.suberror, serverErrorNo, serverResponse.status);\n      // check if 500 error\n      if (refreshAccessToken && serverResponse.status && serverResponse.status >= HttpStatus.SERVER_ERROR_RANGE_START && serverResponse.status <= HttpStatus.SERVER_ERROR_RANGE_END) {\n        this.logger.warning(`executeTokenRequest:validateTokenResponse - AAD is currently unavailable and the access token is unable to be refreshed.\\n${serverError}`);\n        // don't throw an exception, but alert the user via a log that the token was unable to be refreshed\n        return;\n        // check if 400 error\n      } else if (refreshAccessToken && serverResponse.status && serverResponse.status >= HttpStatus.CLIENT_ERROR_RANGE_START && serverResponse.status <= HttpStatus.CLIENT_ERROR_RANGE_END) {\n        this.logger.warning(`executeTokenRequest:validateTokenResponse - AAD is currently available but is unable to refresh the access token.\\n${serverError}`);\n        // don't throw an exception, but alert the user via a log that the token was unable to be refreshed\n        return;\n      }\n      if (isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\n        throw new InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror, serverResponse.timestamp || Constants.EMPTY_STRING, serverResponse.trace_id || Constants.EMPTY_STRING, serverResponse.correlation_id || Constants.EMPTY_STRING, serverResponse.claims || Constants.EMPTY_STRING, serverErrorNo);\n      }\n      throw serverError;\n    }\n  }\n  /**\r\n   * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\r\n   * @param serverTokenResponse\r\n   * @param authority\r\n   */\n  async handleServerTokenResponse(serverTokenResponse, authority, reqTimestamp, request, authCodePayload, userAssertionHash, handlingRefreshTokenResponse, forceCacheRefreshTokenResponse, serverRequestId) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.HandleServerTokenResponse, serverTokenResponse.correlation_id);\n    // create an idToken object (not entity)\n    let idTokenClaims;\n    if (serverTokenResponse.id_token) {\n      idTokenClaims = extractTokenClaims(serverTokenResponse.id_token || Constants.EMPTY_STRING, this.cryptoObj.base64Decode);\n      // token nonce check (TODO: Add a warning if no nonce is given?)\n      if (authCodePayload && authCodePayload.nonce) {\n        if (idTokenClaims.nonce !== authCodePayload.nonce) {\n          throw createClientAuthError(nonceMismatch);\n        }\n      }\n      // token max_age check\n      if (request.maxAge || request.maxAge === 0) {\n        const authTime = idTokenClaims.auth_time;\n        if (!authTime) {\n          throw createClientAuthError(authTimeNotFound);\n        }\n        checkMaxAge(authTime, request.maxAge);\n      }\n    }\n    // generate homeAccountId\n    this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenClaims);\n    // save the response tokens\n    let requestStateObj;\n    if (!!authCodePayload && !!authCodePayload.state) {\n      requestStateObj = ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);\n    }\n    // Add keyId from request to serverTokenResponse if defined\n    serverTokenResponse.key_id = serverTokenResponse.key_id || request.sshKid || undefined;\n    const cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenClaims, userAssertionHash, authCodePayload);\n    let cacheContext;\n    try {\n      if (this.persistencePlugin && this.serializableCache) {\n        this.logger.verbose(\"Persistence enabled, calling beforeCacheAccess\");\n        cacheContext = new TokenCacheContext(this.serializableCache, true);\n        await this.persistencePlugin.beforeCacheAccess(cacheContext);\n      }\n      /*\r\n       * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\r\n       * If not present, we should return null, as it's the case that another application called removeAccount in between\r\n       * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal, unless explicitly flagged by\r\n       * the developer, as in the case of refresh token flow used in ADAL Node to MSAL Node migration.\r\n       */\n      if (handlingRefreshTokenResponse && !forceCacheRefreshTokenResponse && cacheRecord.account) {\n        const key = cacheRecord.account.generateAccountKey();\n        const account = this.cacheStorage.getAccount(key);\n        if (!account) {\n          this.logger.warning(\"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\");\n          return await ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenClaims, requestStateObj, undefined, serverRequestId);\n        }\n      }\n      await this.cacheStorage.saveCacheRecord(cacheRecord, request.correlationId, request.storeInCache);\n    } finally {\n      if (this.persistencePlugin && this.serializableCache && cacheContext) {\n        this.logger.verbose(\"Persistence enabled, calling afterCacheAccess\");\n        await this.persistencePlugin.afterCacheAccess(cacheContext);\n      }\n    }\n    return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenClaims, requestStateObj, serverTokenResponse, serverRequestId);\n  }\n  /**\r\n   * Generates CacheRecord\r\n   * @param serverTokenResponse\r\n   * @param idTokenObj\r\n   * @param authority\r\n   */\n  generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenClaims, userAssertionHash, authCodePayload) {\n    const env = authority.getPreferredCache();\n    if (!env) {\n      throw createClientAuthError(invalidCacheEnvironment);\n    }\n    const claimsTenantId = getTenantIdFromIdTokenClaims(idTokenClaims);\n    // IdToken: non AAD scenarios can have empty realm\n    let cachedIdToken;\n    let cachedAccount;\n    if (serverTokenResponse.id_token && !!idTokenClaims) {\n      cachedIdToken = createIdTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.id_token, this.clientId, claimsTenantId || \"\");\n      cachedAccount = buildAccountToCache(this.cacheStorage, authority, this.homeAccountIdentifier, this.cryptoObj.base64Decode, idTokenClaims, serverTokenResponse.client_info, env, claimsTenantId, authCodePayload, undefined,\n      // nativeAccountId\n      this.logger);\n    }\n    // AccessToken\n    let cachedAccessToken = null;\n    if (serverTokenResponse.access_token) {\n      // If scopes not returned in server response, use request scopes\n      const responseScopes = serverTokenResponse.scope ? ScopeSet.fromString(serverTokenResponse.scope) : new ScopeSet(request.scopes || []);\n      /*\r\n       * Use timestamp calculated before request\r\n       * Server may return timestamps as strings, parse to numbers if so.\r\n       */\n      const expiresIn = (typeof serverTokenResponse.expires_in === \"string\" ? parseInt(serverTokenResponse.expires_in, 10) : serverTokenResponse.expires_in) || 0;\n      const extExpiresIn = (typeof serverTokenResponse.ext_expires_in === \"string\" ? parseInt(serverTokenResponse.ext_expires_in, 10) : serverTokenResponse.ext_expires_in) || 0;\n      const refreshIn = (typeof serverTokenResponse.refresh_in === \"string\" ? parseInt(serverTokenResponse.refresh_in, 10) : serverTokenResponse.refresh_in) || undefined;\n      const tokenExpirationSeconds = reqTimestamp + expiresIn;\n      const extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;\n      const refreshOnSeconds = refreshIn && refreshIn > 0 ? reqTimestamp + refreshIn : undefined;\n      // non AAD scenarios can have empty realm\n      cachedAccessToken = createAccessTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.access_token, this.clientId, claimsTenantId || authority.tenant || \"\", responseScopes.printScopes(), tokenExpirationSeconds, extendedTokenExpirationSeconds, this.cryptoObj.base64Decode, refreshOnSeconds, serverTokenResponse.token_type, userAssertionHash, serverTokenResponse.key_id, request.claims, request.requestedClaimsHash);\n    }\n    // refreshToken\n    let cachedRefreshToken = null;\n    if (serverTokenResponse.refresh_token) {\n      let rtExpiresOn;\n      if (serverTokenResponse.refresh_token_expires_in) {\n        const rtExpiresIn = typeof serverTokenResponse.refresh_token_expires_in === \"string\" ? parseInt(serverTokenResponse.refresh_token_expires_in, 10) : serverTokenResponse.refresh_token_expires_in;\n        rtExpiresOn = reqTimestamp + rtExpiresIn;\n      }\n      cachedRefreshToken = createRefreshTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.refresh_token, this.clientId, serverTokenResponse.foci, userAssertionHash, rtExpiresOn);\n    }\n    // appMetadata\n    let cachedAppMetadata = null;\n    if (serverTokenResponse.foci) {\n      cachedAppMetadata = {\n        clientId: this.clientId,\n        environment: env,\n        familyId: serverTokenResponse.foci\n      };\n    }\n    return {\n      account: cachedAccount,\n      idToken: cachedIdToken,\n      accessToken: cachedAccessToken,\n      refreshToken: cachedRefreshToken,\n      appMetadata: cachedAppMetadata\n    };\n  }\n  /**\r\n   * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\r\n   *\r\n   * Optionally takes a state string that is set as-is in the response.\r\n   *\r\n   * @param cacheRecord\r\n   * @param idTokenObj\r\n   * @param fromTokenCache\r\n   * @param stateString\r\n   */\n  static async generateAuthenticationResult(cryptoObj, authority, cacheRecord, fromTokenCache, request, idTokenClaims, requestState, serverTokenResponse, requestId) {\n    let accessToken = Constants.EMPTY_STRING;\n    let responseScopes = [];\n    let expiresOn = null;\n    let extExpiresOn;\n    let refreshOn;\n    let familyId = Constants.EMPTY_STRING;\n    if (cacheRecord.accessToken) {\n      /*\r\n       * if the request object has `popKid` property, `signPopToken` will be set to false and\r\n       * the token will be returned unsigned\r\n       */\n      if (cacheRecord.accessToken.tokenType === AuthenticationScheme.POP && !request.popKid) {\n        const popTokenGenerator = new PopTokenGenerator(cryptoObj);\n        const {\n          secret,\n          keyId\n        } = cacheRecord.accessToken;\n        if (!keyId) {\n          throw createClientAuthError(keyIdMissing);\n        }\n        accessToken = await popTokenGenerator.signPopToken(secret, keyId, request);\n      } else {\n        accessToken = cacheRecord.accessToken.secret;\n      }\n      responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n      // Access token expiresOn cached in seconds, converting to Date for AuthenticationResult\n      expiresOn = toDateFromSeconds(cacheRecord.accessToken.expiresOn);\n      extExpiresOn = toDateFromSeconds(cacheRecord.accessToken.extendedExpiresOn);\n      if (cacheRecord.accessToken.refreshOn) {\n        refreshOn = toDateFromSeconds(cacheRecord.accessToken.refreshOn);\n      }\n    }\n    if (cacheRecord.appMetadata) {\n      familyId = cacheRecord.appMetadata.familyId === THE_FAMILY_ID ? THE_FAMILY_ID : \"\";\n    }\n    const uid = idTokenClaims?.oid || idTokenClaims?.sub || \"\";\n    const tid = idTokenClaims?.tid || \"\";\n    // for hybrid + native bridge enablement, send back the native account Id\n    if (serverTokenResponse?.spa_accountid && !!cacheRecord.account) {\n      cacheRecord.account.nativeAccountId = serverTokenResponse?.spa_accountid;\n    }\n    const accountInfo = cacheRecord.account ? updateAccountTenantProfileData(cacheRecord.account.getAccountInfo(), undefined,\n    // tenantProfile optional\n    idTokenClaims, cacheRecord.idToken?.secret) : null;\n    return {\n      authority: authority.canonicalAuthority,\n      uniqueId: uid,\n      tenantId: tid,\n      scopes: responseScopes,\n      account: accountInfo,\n      idToken: cacheRecord?.idToken?.secret || \"\",\n      idTokenClaims: idTokenClaims || {},\n      accessToken: accessToken,\n      fromCache: fromTokenCache,\n      expiresOn: expiresOn,\n      extExpiresOn: extExpiresOn,\n      refreshOn: refreshOn,\n      correlationId: request.correlationId,\n      requestId: requestId || Constants.EMPTY_STRING,\n      familyId: familyId,\n      tokenType: cacheRecord.accessToken?.tokenType || Constants.EMPTY_STRING,\n      state: requestState ? requestState.userRequestState : Constants.EMPTY_STRING,\n      cloudGraphHostName: cacheRecord.account?.cloudGraphHostName || Constants.EMPTY_STRING,\n      msGraphHost: cacheRecord.account?.msGraphHost || Constants.EMPTY_STRING,\n      code: serverTokenResponse?.spa_code,\n      fromNativeBroker: false\n    };\n  }\n}\nfunction buildAccountToCache(cacheStorage, authority, homeAccountId, base64Decode, idTokenClaims, clientInfo, environment, claimsTenantId, authCodePayload, nativeAccountId, logger) {\n  logger?.verbose(\"setCachedAccount called\");\n  // Check if base account is already cached\n  const accountKeys = cacheStorage.getAccountKeys();\n  const baseAccountKey = accountKeys.find(accountKey => {\n    return accountKey.startsWith(homeAccountId);\n  });\n  let cachedAccount = null;\n  if (baseAccountKey) {\n    cachedAccount = cacheStorage.getAccount(baseAccountKey);\n  }\n  const baseAccount = cachedAccount || AccountEntity.createAccount({\n    homeAccountId,\n    idTokenClaims,\n    clientInfo,\n    environment,\n    cloudGraphHostName: authCodePayload?.cloud_graph_host_name,\n    msGraphHost: authCodePayload?.msgraph_host,\n    nativeAccountId: nativeAccountId\n  }, authority, base64Decode);\n  const tenantProfiles = baseAccount.tenantProfiles || [];\n  const tenantId = claimsTenantId || baseAccount.realm;\n  if (tenantId && !tenantProfiles.find(tenantProfile => {\n    return tenantProfile.tenantId === tenantId;\n  })) {\n    const newTenantProfile = buildTenantProfile(homeAccountId, baseAccount.localAccountId, tenantId, idTokenClaims);\n    tenantProfiles.push(newTenantProfile);\n  }\n  baseAccount.tenantProfiles = tenantProfiles;\n  return baseAccount;\n}\nexport { ResponseHandler, buildAccountToCache };","map":{"version":3,"names":["ResponseHandler","constructor","clientId","cacheStorage","cryptoObj","logger","serializableCache","persistencePlugin","performanceClient","validateTokenResponse","serverResponse","refreshAccessToken","error","error_description","suberror","errString","error_codes","Constants","NOT_AVAILABLE","timestamp","correlation_id","trace_id","serverErrorNo","length","undefined","serverError","ServerError","status","HttpStatus","SERVER_ERROR_RANGE_START","SERVER_ERROR_RANGE_END","warning","CLIENT_ERROR_RANGE_START","CLIENT_ERROR_RANGE_END","isInteractionRequiredError","InteractionRequiredAuthError","EMPTY_STRING","claims","handleServerTokenResponse","serverTokenResponse","authority","reqTimestamp","request","authCodePayload","userAssertionHash","handlingRefreshTokenResponse","forceCacheRefreshTokenResponse","serverRequestId","addQueueMeasurement","PerformanceEvents","HandleServerTokenResponse","idTokenClaims","id_token","extractTokenClaims","base64Decode","nonce","createClientAuthError","nonceMismatch","maxAge","authTime","auth_time","authTimeNotFound","checkMaxAge","homeAccountIdentifier","AccountEntity","generateHomeAccountId","client_info","authorityType","requestStateObj","state","ProtocolUtils","parseRequestState","key_id","sshKid","cacheRecord","generateCacheRecord","cacheContext","verbose","TokenCacheContext","beforeCacheAccess","account","key","generateAccountKey","getAccount","generateAuthenticationResult","saveCacheRecord","correlationId","storeInCache","afterCacheAccess","env","getPreferredCache","invalidCacheEnvironment","claimsTenantId","getTenantIdFromIdTokenClaims","cachedIdToken","cachedAccount","createIdTokenEntity","buildAccountToCache","cachedAccessToken","access_token","responseScopes","scope","ScopeSet","fromString","scopes","expiresIn","expires_in","parseInt","extExpiresIn","ext_expires_in","refreshIn","refresh_in","tokenExpirationSeconds","extendedTokenExpirationSeconds","refreshOnSeconds","createAccessTokenEntity","tenant","printScopes","token_type","requestedClaimsHash","cachedRefreshToken","refresh_token","rtExpiresOn","refresh_token_expires_in","rtExpiresIn","createRefreshTokenEntity","foci","cachedAppMetadata","environment","familyId","idToken","accessToken","refreshToken","appMetadata","fromTokenCache","requestState","requestId","expiresOn","extExpiresOn","refreshOn","tokenType","AuthenticationScheme","POP","popKid","popTokenGenerator","PopTokenGenerator","secret","keyId","keyIdMissing","signPopToken","target","asArray","toDateFromSeconds","extendedExpiresOn","THE_FAMILY_ID","uid","oid","sub","tid","spa_accountid","nativeAccountId","accountInfo","updateAccountTenantProfileData","getAccountInfo","canonicalAuthority","uniqueId","tenantId","fromCache","userRequestState","cloudGraphHostName","msGraphHost","code","spa_code","fromNativeBroker","homeAccountId","clientInfo","accountKeys","getAccountKeys","baseAccountKey","find","accountKey","startsWith","baseAccount","createAccount","cloud_graph_host_name","msgraph_host","tenantProfiles","realm","tenantProfile","newTenantProfile","buildTenantProfile","localAccountId","push"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-common/src/response/ResponseHandler.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ServerAuthorizationTokenResponse } from \"./ServerAuthorizationTokenResponse.js\";\nimport { ICrypto } from \"../crypto/ICrypto.js\";\nimport {\n    ClientAuthErrorCodes,\n    createClientAuthError,\n} from \"../error/ClientAuthError.js\";\nimport { Logger } from \"../logger/Logger.js\";\nimport { ServerError } from \"../error/ServerError.js\";\nimport { ScopeSet } from \"../request/ScopeSet.js\";\nimport { AuthenticationResult } from \"./AuthenticationResult.js\";\nimport { AccountEntity } from \"../cache/entities/AccountEntity.js\";\nimport { Authority } from \"../authority/Authority.js\";\nimport { IdTokenEntity } from \"../cache/entities/IdTokenEntity.js\";\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity.js\";\nimport { RefreshTokenEntity } from \"../cache/entities/RefreshTokenEntity.js\";\nimport {\n    InteractionRequiredAuthError,\n    isInteractionRequiredError,\n} from \"../error/InteractionRequiredAuthError.js\";\nimport { CacheRecord } from \"../cache/entities/CacheRecord.js\";\nimport { CacheManager } from \"../cache/CacheManager.js\";\nimport { ProtocolUtils, RequestStateObject } from \"../utils/ProtocolUtils.js\";\nimport {\n    AuthenticationScheme,\n    Constants,\n    THE_FAMILY_ID,\n    HttpStatus,\n} from \"../utils/Constants.js\";\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator.js\";\nimport { AppMetadataEntity } from \"../cache/entities/AppMetadataEntity.js\";\nimport { ICachePlugin } from \"../cache/interface/ICachePlugin.js\";\nimport { TokenCacheContext } from \"../cache/persistence/TokenCacheContext.js\";\nimport { ISerializableTokenCache } from \"../cache/interface/ISerializableTokenCache.js\";\nimport { AuthorizationCodePayload } from \"./AuthorizationCodePayload.js\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest.js\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient.js\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent.js\";\nimport { checkMaxAge, extractTokenClaims } from \"../account/AuthToken.js\";\nimport {\n    TokenClaims,\n    getTenantIdFromIdTokenClaims,\n} from \"../account/TokenClaims.js\";\nimport {\n    AccountInfo,\n    buildTenantProfile,\n    updateAccountTenantProfileData,\n} from \"../account/AccountInfo.js\";\nimport * as CacheHelpers from \"../cache/utils/CacheHelpers.js\";\nimport * as TimeUtils from \"../utils/TimeUtils.js\";\n\n/**\n * Class that handles response parsing.\n * @internal\n */\nexport class ResponseHandler {\n    private clientId: string;\n    private cacheStorage: CacheManager;\n    private cryptoObj: ICrypto;\n    private logger: Logger;\n    private homeAccountIdentifier: string;\n    private serializableCache: ISerializableTokenCache | null;\n    private persistencePlugin: ICachePlugin | null;\n    private performanceClient?: IPerformanceClient;\n\n    constructor(\n        clientId: string,\n        cacheStorage: CacheManager,\n        cryptoObj: ICrypto,\n        logger: Logger,\n        serializableCache: ISerializableTokenCache | null,\n        persistencePlugin: ICachePlugin | null,\n        performanceClient?: IPerformanceClient\n    ) {\n        this.clientId = clientId;\n        this.cacheStorage = cacheStorage;\n        this.cryptoObj = cryptoObj;\n        this.logger = logger;\n        this.serializableCache = serializableCache;\n        this.persistencePlugin = persistencePlugin;\n        this.performanceClient = performanceClient;\n    }\n\n    /**\n     * Function which validates server authorization token response.\n     * @param serverResponse\n     * @param refreshAccessToken\n     */\n    validateTokenResponse(\n        serverResponse: ServerAuthorizationTokenResponse,\n        refreshAccessToken?: boolean\n    ): void {\n        // Check for error\n        if (\n            serverResponse.error ||\n            serverResponse.error_description ||\n            serverResponse.suberror\n        ) {\n            const errString = `Error(s): ${\n                serverResponse.error_codes || Constants.NOT_AVAILABLE\n            } - Timestamp: ${\n                serverResponse.timestamp || Constants.NOT_AVAILABLE\n            } - Description: ${\n                serverResponse.error_description || Constants.NOT_AVAILABLE\n            } - Correlation ID: ${\n                serverResponse.correlation_id || Constants.NOT_AVAILABLE\n            } - Trace ID: ${\n                serverResponse.trace_id || Constants.NOT_AVAILABLE\n            }`;\n            const serverErrorNo = serverResponse.error_codes?.length\n                ? serverResponse.error_codes[0]\n                : undefined;\n            const serverError = new ServerError(\n                serverResponse.error,\n                errString,\n                serverResponse.suberror,\n                serverErrorNo,\n                serverResponse.status\n            );\n\n            // check if 500 error\n            if (\n                refreshAccessToken &&\n                serverResponse.status &&\n                serverResponse.status >= HttpStatus.SERVER_ERROR_RANGE_START &&\n                serverResponse.status <= HttpStatus.SERVER_ERROR_RANGE_END\n            ) {\n                this.logger.warning(\n                    `executeTokenRequest:validateTokenResponse - AAD is currently unavailable and the access token is unable to be refreshed.\\n${serverError}`\n                );\n\n                // don't throw an exception, but alert the user via a log that the token was unable to be refreshed\n                return;\n                // check if 400 error\n            } else if (\n                refreshAccessToken &&\n                serverResponse.status &&\n                serverResponse.status >= HttpStatus.CLIENT_ERROR_RANGE_START &&\n                serverResponse.status <= HttpStatus.CLIENT_ERROR_RANGE_END\n            ) {\n                this.logger.warning(\n                    `executeTokenRequest:validateTokenResponse - AAD is currently available but is unable to refresh the access token.\\n${serverError}`\n                );\n\n                // don't throw an exception, but alert the user via a log that the token was unable to be refreshed\n                return;\n            }\n\n            if (\n                isInteractionRequiredError(\n                    serverResponse.error,\n                    serverResponse.error_description,\n                    serverResponse.suberror\n                )\n            ) {\n                throw new InteractionRequiredAuthError(\n                    serverResponse.error,\n                    serverResponse.error_description,\n                    serverResponse.suberror,\n                    serverResponse.timestamp || Constants.EMPTY_STRING,\n                    serverResponse.trace_id || Constants.EMPTY_STRING,\n                    serverResponse.correlation_id || Constants.EMPTY_STRING,\n                    serverResponse.claims || Constants.EMPTY_STRING,\n                    serverErrorNo\n                );\n            }\n\n            throw serverError;\n        }\n    }\n\n    /**\n     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\n     * @param serverTokenResponse\n     * @param authority\n     */\n    async handleServerTokenResponse(\n        serverTokenResponse: ServerAuthorizationTokenResponse,\n        authority: Authority,\n        reqTimestamp: number,\n        request: BaseAuthRequest,\n        authCodePayload?: AuthorizationCodePayload,\n        userAssertionHash?: string,\n        handlingRefreshTokenResponse?: boolean,\n        forceCacheRefreshTokenResponse?: boolean,\n        serverRequestId?: string\n    ): Promise<AuthenticationResult> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.HandleServerTokenResponse,\n            serverTokenResponse.correlation_id\n        );\n\n        // create an idToken object (not entity)\n        let idTokenClaims: TokenClaims | undefined;\n        if (serverTokenResponse.id_token) {\n            idTokenClaims = extractTokenClaims(\n                serverTokenResponse.id_token || Constants.EMPTY_STRING,\n                this.cryptoObj.base64Decode\n            );\n\n            // token nonce check (TODO: Add a warning if no nonce is given?)\n            if (authCodePayload && authCodePayload.nonce) {\n                if (idTokenClaims.nonce !== authCodePayload.nonce) {\n                    throw createClientAuthError(\n                        ClientAuthErrorCodes.nonceMismatch\n                    );\n                }\n            }\n\n            // token max_age check\n            if (request.maxAge || request.maxAge === 0) {\n                const authTime = idTokenClaims.auth_time;\n                if (!authTime) {\n                    throw createClientAuthError(\n                        ClientAuthErrorCodes.authTimeNotFound\n                    );\n                }\n\n                checkMaxAge(authTime, request.maxAge);\n            }\n        }\n\n        // generate homeAccountId\n        this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(\n            serverTokenResponse.client_info || Constants.EMPTY_STRING,\n            authority.authorityType,\n            this.logger,\n            this.cryptoObj,\n            idTokenClaims\n        );\n\n        // save the response tokens\n        let requestStateObj: RequestStateObject | undefined;\n        if (!!authCodePayload && !!authCodePayload.state) {\n            requestStateObj = ProtocolUtils.parseRequestState(\n                this.cryptoObj,\n                authCodePayload.state\n            );\n        }\n\n        // Add keyId from request to serverTokenResponse if defined\n        serverTokenResponse.key_id =\n            serverTokenResponse.key_id || request.sshKid || undefined;\n\n        const cacheRecord = this.generateCacheRecord(\n            serverTokenResponse,\n            authority,\n            reqTimestamp,\n            request,\n            idTokenClaims,\n            userAssertionHash,\n            authCodePayload\n        );\n        let cacheContext;\n        try {\n            if (this.persistencePlugin && this.serializableCache) {\n                this.logger.verbose(\n                    \"Persistence enabled, calling beforeCacheAccess\"\n                );\n                cacheContext = new TokenCacheContext(\n                    this.serializableCache,\n                    true\n                );\n                await this.persistencePlugin.beforeCacheAccess(cacheContext);\n            }\n            /*\n             * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\n             * If not present, we should return null, as it's the case that another application called removeAccount in between\n             * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal, unless explicitly flagged by\n             * the developer, as in the case of refresh token flow used in ADAL Node to MSAL Node migration.\n             */\n            if (\n                handlingRefreshTokenResponse &&\n                !forceCacheRefreshTokenResponse &&\n                cacheRecord.account\n            ) {\n                const key = cacheRecord.account.generateAccountKey();\n                const account = this.cacheStorage.getAccount(key);\n                if (!account) {\n                    this.logger.warning(\n                        \"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\"\n                    );\n                    return await ResponseHandler.generateAuthenticationResult(\n                        this.cryptoObj,\n                        authority,\n                        cacheRecord,\n                        false,\n                        request,\n                        idTokenClaims,\n                        requestStateObj,\n                        undefined,\n                        serverRequestId\n                    );\n                }\n            }\n            await this.cacheStorage.saveCacheRecord(\n                cacheRecord,\n                request.correlationId,\n                request.storeInCache\n            );\n        } finally {\n            if (\n                this.persistencePlugin &&\n                this.serializableCache &&\n                cacheContext\n            ) {\n                this.logger.verbose(\n                    \"Persistence enabled, calling afterCacheAccess\"\n                );\n                await this.persistencePlugin.afterCacheAccess(cacheContext);\n            }\n        }\n\n        return ResponseHandler.generateAuthenticationResult(\n            this.cryptoObj,\n            authority,\n            cacheRecord,\n            false,\n            request,\n            idTokenClaims,\n            requestStateObj,\n            serverTokenResponse,\n            serverRequestId\n        );\n    }\n\n    /**\n     * Generates CacheRecord\n     * @param serverTokenResponse\n     * @param idTokenObj\n     * @param authority\n     */\n    private generateCacheRecord(\n        serverTokenResponse: ServerAuthorizationTokenResponse,\n        authority: Authority,\n        reqTimestamp: number,\n        request: BaseAuthRequest,\n        idTokenClaims?: TokenClaims,\n        userAssertionHash?: string,\n        authCodePayload?: AuthorizationCodePayload\n    ): CacheRecord {\n        const env = authority.getPreferredCache();\n        if (!env) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.invalidCacheEnvironment\n            );\n        }\n\n        const claimsTenantId = getTenantIdFromIdTokenClaims(idTokenClaims);\n\n        // IdToken: non AAD scenarios can have empty realm\n        let cachedIdToken: IdTokenEntity | undefined;\n        let cachedAccount: AccountEntity | undefined;\n        if (serverTokenResponse.id_token && !!idTokenClaims) {\n            cachedIdToken = CacheHelpers.createIdTokenEntity(\n                this.homeAccountIdentifier,\n                env,\n                serverTokenResponse.id_token,\n                this.clientId,\n                claimsTenantId || \"\"\n            );\n\n            cachedAccount = buildAccountToCache(\n                this.cacheStorage,\n                authority,\n                this.homeAccountIdentifier,\n                this.cryptoObj.base64Decode,\n                idTokenClaims,\n                serverTokenResponse.client_info,\n                env,\n                claimsTenantId,\n                authCodePayload,\n                undefined, // nativeAccountId\n                this.logger\n            );\n        }\n\n        // AccessToken\n        let cachedAccessToken: AccessTokenEntity | null = null;\n        if (serverTokenResponse.access_token) {\n            // If scopes not returned in server response, use request scopes\n            const responseScopes = serverTokenResponse.scope\n                ? ScopeSet.fromString(serverTokenResponse.scope)\n                : new ScopeSet(request.scopes || []);\n\n            /*\n             * Use timestamp calculated before request\n             * Server may return timestamps as strings, parse to numbers if so.\n             */\n            const expiresIn: number =\n                (typeof serverTokenResponse.expires_in === \"string\"\n                    ? parseInt(serverTokenResponse.expires_in, 10)\n                    : serverTokenResponse.expires_in) || 0;\n            const extExpiresIn: number =\n                (typeof serverTokenResponse.ext_expires_in === \"string\"\n                    ? parseInt(serverTokenResponse.ext_expires_in, 10)\n                    : serverTokenResponse.ext_expires_in) || 0;\n            const refreshIn: number | undefined =\n                (typeof serverTokenResponse.refresh_in === \"string\"\n                    ? parseInt(serverTokenResponse.refresh_in, 10)\n                    : serverTokenResponse.refresh_in) || undefined;\n            const tokenExpirationSeconds = reqTimestamp + expiresIn;\n            const extendedTokenExpirationSeconds =\n                tokenExpirationSeconds + extExpiresIn;\n            const refreshOnSeconds =\n                refreshIn && refreshIn > 0\n                    ? reqTimestamp + refreshIn\n                    : undefined;\n\n            // non AAD scenarios can have empty realm\n            cachedAccessToken = CacheHelpers.createAccessTokenEntity(\n                this.homeAccountIdentifier,\n                env,\n                serverTokenResponse.access_token,\n                this.clientId,\n                claimsTenantId || authority.tenant || \"\",\n                responseScopes.printScopes(),\n                tokenExpirationSeconds,\n                extendedTokenExpirationSeconds,\n                this.cryptoObj.base64Decode,\n                refreshOnSeconds,\n                serverTokenResponse.token_type,\n                userAssertionHash,\n                serverTokenResponse.key_id,\n                request.claims,\n                request.requestedClaimsHash\n            );\n        }\n\n        // refreshToken\n        let cachedRefreshToken: RefreshTokenEntity | null = null;\n        if (serverTokenResponse.refresh_token) {\n            let rtExpiresOn: number | undefined;\n            if (serverTokenResponse.refresh_token_expires_in) {\n                const rtExpiresIn: number =\n                    typeof serverTokenResponse.refresh_token_expires_in ===\n                    \"string\"\n                        ? parseInt(\n                              serverTokenResponse.refresh_token_expires_in,\n                              10\n                          )\n                        : serverTokenResponse.refresh_token_expires_in;\n                rtExpiresOn = reqTimestamp + rtExpiresIn;\n            }\n            cachedRefreshToken = CacheHelpers.createRefreshTokenEntity(\n                this.homeAccountIdentifier,\n                env,\n                serverTokenResponse.refresh_token,\n                this.clientId,\n                serverTokenResponse.foci,\n                userAssertionHash,\n                rtExpiresOn\n            );\n        }\n\n        // appMetadata\n        let cachedAppMetadata: AppMetadataEntity | null = null;\n        if (serverTokenResponse.foci) {\n            cachedAppMetadata = {\n                clientId: this.clientId,\n                environment: env,\n                familyId: serverTokenResponse.foci,\n            };\n        }\n\n        return {\n            account: cachedAccount,\n            idToken: cachedIdToken,\n            accessToken: cachedAccessToken,\n            refreshToken: cachedRefreshToken,\n            appMetadata: cachedAppMetadata,\n        };\n    }\n\n    /**\n     * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\n     *\n     * Optionally takes a state string that is set as-is in the response.\n     *\n     * @param cacheRecord\n     * @param idTokenObj\n     * @param fromTokenCache\n     * @param stateString\n     */\n    static async generateAuthenticationResult(\n        cryptoObj: ICrypto,\n        authority: Authority,\n        cacheRecord: CacheRecord,\n        fromTokenCache: boolean,\n        request: BaseAuthRequest,\n        idTokenClaims?: TokenClaims,\n        requestState?: RequestStateObject,\n        serverTokenResponse?: ServerAuthorizationTokenResponse,\n        requestId?: string\n    ): Promise<AuthenticationResult> {\n        let accessToken: string = Constants.EMPTY_STRING;\n        let responseScopes: Array<string> = [];\n        let expiresOn: Date | null = null;\n        let extExpiresOn: Date | undefined;\n        let refreshOn: Date | undefined;\n        let familyId: string = Constants.EMPTY_STRING;\n\n        if (cacheRecord.accessToken) {\n            /*\n             * if the request object has `popKid` property, `signPopToken` will be set to false and\n             * the token will be returned unsigned\n             */\n            if (\n                cacheRecord.accessToken.tokenType ===\n                    AuthenticationScheme.POP &&\n                !request.popKid\n            ) {\n                const popTokenGenerator: PopTokenGenerator =\n                    new PopTokenGenerator(cryptoObj);\n                const { secret, keyId } = cacheRecord.accessToken;\n\n                if (!keyId) {\n                    throw createClientAuthError(\n                        ClientAuthErrorCodes.keyIdMissing\n                    );\n                }\n\n                accessToken = await popTokenGenerator.signPopToken(\n                    secret,\n                    keyId,\n                    request\n                );\n            } else {\n                accessToken = cacheRecord.accessToken.secret;\n            }\n            responseScopes = ScopeSet.fromString(\n                cacheRecord.accessToken.target\n            ).asArray();\n            // Access token expiresOn cached in seconds, converting to Date for AuthenticationResult\n            expiresOn = TimeUtils.toDateFromSeconds(\n                cacheRecord.accessToken.expiresOn\n            );\n            extExpiresOn = TimeUtils.toDateFromSeconds(\n                cacheRecord.accessToken.extendedExpiresOn\n            );\n            if (cacheRecord.accessToken.refreshOn) {\n                refreshOn = TimeUtils.toDateFromSeconds(\n                    cacheRecord.accessToken.refreshOn\n                );\n            }\n        }\n\n        if (cacheRecord.appMetadata) {\n            familyId =\n                cacheRecord.appMetadata.familyId === THE_FAMILY_ID\n                    ? THE_FAMILY_ID\n                    : \"\";\n        }\n        const uid = idTokenClaims?.oid || idTokenClaims?.sub || \"\";\n        const tid = idTokenClaims?.tid || \"\";\n\n        // for hybrid + native bridge enablement, send back the native account Id\n        if (serverTokenResponse?.spa_accountid && !!cacheRecord.account) {\n            cacheRecord.account.nativeAccountId =\n                serverTokenResponse?.spa_accountid;\n        }\n\n        const accountInfo: AccountInfo | null = cacheRecord.account\n            ? updateAccountTenantProfileData(\n                  cacheRecord.account.getAccountInfo(),\n                  undefined, // tenantProfile optional\n                  idTokenClaims,\n                  cacheRecord.idToken?.secret\n              )\n            : null;\n\n        return {\n            authority: authority.canonicalAuthority,\n            uniqueId: uid,\n            tenantId: tid,\n            scopes: responseScopes,\n            account: accountInfo,\n            idToken: cacheRecord?.idToken?.secret || \"\",\n            idTokenClaims: idTokenClaims || {},\n            accessToken: accessToken,\n            fromCache: fromTokenCache,\n            expiresOn: expiresOn,\n            extExpiresOn: extExpiresOn,\n            refreshOn: refreshOn,\n            correlationId: request.correlationId,\n            requestId: requestId || Constants.EMPTY_STRING,\n            familyId: familyId,\n            tokenType:\n                cacheRecord.accessToken?.tokenType || Constants.EMPTY_STRING,\n            state: requestState\n                ? requestState.userRequestState\n                : Constants.EMPTY_STRING,\n            cloudGraphHostName:\n                cacheRecord.account?.cloudGraphHostName ||\n                Constants.EMPTY_STRING,\n            msGraphHost:\n                cacheRecord.account?.msGraphHost || Constants.EMPTY_STRING,\n            code: serverTokenResponse?.spa_code,\n            fromNativeBroker: false,\n        };\n    }\n}\n\nexport function buildAccountToCache(\n    cacheStorage: CacheManager,\n    authority: Authority,\n    homeAccountId: string,\n    base64Decode: (input: string) => string,\n    idTokenClaims?: TokenClaims,\n    clientInfo?: string,\n    environment?: string,\n    claimsTenantId?: string | null,\n    authCodePayload?: AuthorizationCodePayload,\n    nativeAccountId?: string,\n    logger?: Logger\n): AccountEntity {\n    logger?.verbose(\"setCachedAccount called\");\n\n    // Check if base account is already cached\n    const accountKeys = cacheStorage.getAccountKeys();\n    const baseAccountKey = accountKeys.find((accountKey: string) => {\n        return accountKey.startsWith(homeAccountId);\n    });\n\n    let cachedAccount: AccountEntity | null = null;\n    if (baseAccountKey) {\n        cachedAccount = cacheStorage.getAccount(baseAccountKey);\n    }\n\n    const baseAccount =\n        cachedAccount ||\n        AccountEntity.createAccount(\n            {\n                homeAccountId,\n                idTokenClaims,\n                clientInfo,\n                environment,\n                cloudGraphHostName: authCodePayload?.cloud_graph_host_name,\n                msGraphHost: authCodePayload?.msgraph_host,\n                nativeAccountId: nativeAccountId,\n            },\n            authority,\n            base64Decode\n        );\n\n    const tenantProfiles = baseAccount.tenantProfiles || [];\n    const tenantId = claimsTenantId || baseAccount.realm;\n    if (\n        tenantId &&\n        !tenantProfiles.find((tenantProfile) => {\n            return tenantProfile.tenantId === tenantId;\n        })\n    ) {\n        const newTenantProfile = buildTenantProfile(\n            homeAccountId,\n            baseAccount.localAccountId,\n            tenantId,\n            idTokenClaims\n        );\n        tenantProfiles.push(newTenantProfile);\n    }\n    baseAccount.tenantProfiles = tenantProfiles;\n\n    return baseAccount;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}