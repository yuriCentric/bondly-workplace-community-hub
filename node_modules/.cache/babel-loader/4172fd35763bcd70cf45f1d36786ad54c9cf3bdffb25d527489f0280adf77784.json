{"ast":null,"code":"/*! @azure/msal-common v15.7.0 2025-05-30 */\n'use strict';\n\nimport { buildClientConfiguration } from '../config/ClientConfiguration.mjs';\nimport { Logger } from '../logger/Logger.mjs';\nimport { HeaderNames, Constants } from '../utils/Constants.mjs';\nimport { name, version } from '../packageMetadata.mjs';\nimport { CcsCredentialType } from '../account/CcsCredential.mjs';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { addBrokerParameters, addExtraQueryParameters, addCorrelationId, instrumentBrokerParams } from '../request/RequestParameterBuilder.mjs';\nimport { mapToQueryString } from '../utils/UrlUtils.mjs';\nimport { createDiscoveredInstance } from '../authority/AuthorityFactory.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { ThrottlingUtils } from '../network/ThrottlingUtils.mjs';\nimport { AuthError } from '../error/AuthError.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { NetworkError } from '../error/NetworkError.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\nimport { networkError } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\r\n * @internal\r\n */\nclass BaseClient {\n  constructor(configuration, performanceClient) {\n    // Set the configuration\n    this.config = buildClientConfiguration(configuration);\n    // Initialize the logger\n    this.logger = new Logger(this.config.loggerOptions, name, version);\n    // Initialize crypto\n    this.cryptoUtils = this.config.cryptoInterface;\n    // Initialize storage interface\n    this.cacheManager = this.config.storageInterface;\n    // Set the network interface\n    this.networkClient = this.config.networkInterface;\n    // Set TelemetryManager\n    this.serverTelemetryManager = this.config.serverTelemetryManager;\n    // set Authority\n    this.authority = this.config.authOptions.authority;\n    // set performance telemetry client\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Creates default headers for requests to token endpoint\r\n   */\n  createTokenRequestHeaders(ccsCred) {\n    const headers = {};\n    headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\n    if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n      switch (ccsCred.type) {\n        case CcsCredentialType.HOME_ACCOUNT_ID:\n          try {\n            const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n            headers[HeaderNames.CCS_HEADER] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;\n          } catch (e) {\n            this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n          }\n          break;\n        case CcsCredentialType.UPN:\n          headers[HeaderNames.CCS_HEADER] = `UPN: ${ccsCred.credential}`;\n          break;\n      }\n    }\n    return headers;\n  }\n  /**\r\n   * Http post to token endpoint\r\n   * @param tokenEndpoint\r\n   * @param queryString\r\n   * @param headers\r\n   * @param thumbprint\r\n   */\n  async executePostToTokenEndpoint(tokenEndpoint, queryString, headers, thumbprint, correlationId, queuedEvent) {\n    if (queuedEvent) {\n      this.performanceClient?.addQueueMeasurement(queuedEvent, correlationId);\n    }\n    const response = await this.sendPostRequest(thumbprint, tokenEndpoint, {\n      body: queryString,\n      headers: headers\n    }, correlationId);\n    if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\n      // Telemetry data successfully logged by server, clear Telemetry cache\n      this.config.serverTelemetryManager.clearTelemetryCache();\n    }\n    return response;\n  }\n  /**\r\n   * Wraps sendPostRequestAsync with necessary preflight and postflight logic\r\n   * @param thumbprint - Request thumbprint for throttling\r\n   * @param tokenEndpoint - Endpoint to make the POST to\r\n   * @param options - Body and Headers to include on the POST request\r\n   * @param correlationId - CorrelationId for telemetry\r\n   */\n  async sendPostRequest(thumbprint, tokenEndpoint, options, correlationId) {\n    ThrottlingUtils.preProcess(this.cacheManager, thumbprint);\n    let response;\n    try {\n      response = await invokeAsync(this.networkClient.sendPostRequestAsync.bind(this.networkClient), PerformanceEvents.NetworkClientSendPostRequestAsync, this.logger, this.performanceClient, correlationId)(tokenEndpoint, options);\n      const responseHeaders = response.headers || {};\n      this.performanceClient?.addFields({\n        refreshTokenSize: response.body.refresh_token?.length || 0,\n        httpVerToken: responseHeaders[HeaderNames.X_MS_HTTP_VERSION] || \"\",\n        requestId: responseHeaders[HeaderNames.X_MS_REQUEST_ID] || \"\"\n      }, correlationId);\n    } catch (e) {\n      if (e instanceof NetworkError) {\n        const responseHeaders = e.responseHeaders;\n        if (responseHeaders) {\n          this.performanceClient?.addFields({\n            httpVerToken: responseHeaders[HeaderNames.X_MS_HTTP_VERSION] || \"\",\n            requestId: responseHeaders[HeaderNames.X_MS_REQUEST_ID] || \"\",\n            contentTypeHeader: responseHeaders[HeaderNames.CONTENT_TYPE] || undefined,\n            contentLengthHeader: responseHeaders[HeaderNames.CONTENT_LENGTH] || undefined,\n            httpStatus: e.httpStatus\n          }, correlationId);\n        }\n        throw e.error;\n      }\n      if (e instanceof AuthError) {\n        throw e;\n      } else {\n        throw createClientAuthError(networkError);\n      }\n    }\n    ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);\n    return response;\n  }\n  /**\r\n   * Updates the authority object of the client. Endpoint discovery must be completed.\r\n   * @param updatedAuthority\r\n   */\n  async updateAuthority(cloudInstanceHostname, correlationId) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.UpdateTokenEndpointAuthority, correlationId);\n    const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${this.authority.tenant}/`;\n    const cloudInstanceAuthority = await createDiscoveredInstance(cloudInstanceAuthorityUri, this.networkClient, this.cacheManager, this.authority.options, this.logger, correlationId, this.performanceClient);\n    this.authority = cloudInstanceAuthority;\n  }\n  /**\r\n   * Creates query string for the /token request\r\n   * @param request\r\n   */\n  createTokenQueryParameters(request) {\n    const parameters = new Map();\n    if (request.embeddedClientId) {\n      addBrokerParameters(parameters, this.config.authOptions.clientId, this.config.authOptions.redirectUri);\n    }\n    if (request.tokenQueryParameters) {\n      addExtraQueryParameters(parameters, request.tokenQueryParameters);\n    }\n    addCorrelationId(parameters, request.correlationId);\n    instrumentBrokerParams(parameters, request.correlationId, this.performanceClient);\n    return mapToQueryString(parameters);\n  }\n}\nexport { BaseClient };","map":{"version":3,"names":["BaseClient","constructor","configuration","performanceClient","config","buildClientConfiguration","logger","Logger","loggerOptions","name","version","cryptoUtils","cryptoInterface","cacheManager","storageInterface","networkClient","networkInterface","serverTelemetryManager","authority","authOptions","createTokenRequestHeaders","ccsCred","headers","HeaderNames","CONTENT_TYPE","Constants","URL_FORM_CONTENT_TYPE","systemOptions","preventCorsPreflight","type","CcsCredentialType","HOME_ACCOUNT_ID","clientInfo","buildClientInfoFromHomeAccountId","credential","CCS_HEADER","uid","utid","e","verbose","UPN","executePostToTokenEndpoint","tokenEndpoint","queryString","thumbprint","correlationId","queuedEvent","addQueueMeasurement","response","sendPostRequest","body","status","clearTelemetryCache","options","ThrottlingUtils","preProcess","invokeAsync","sendPostRequestAsync","bind","PerformanceEvents","NetworkClientSendPostRequestAsync","responseHeaders","addFields","refreshTokenSize","refresh_token","length","httpVerToken","X_MS_HTTP_VERSION","requestId","X_MS_REQUEST_ID","NetworkError","contentTypeHeader","undefined","contentLengthHeader","CONTENT_LENGTH","httpStatus","error","AuthError","createClientAuthError","networkError","postProcess","updateAuthority","cloudInstanceHostname","UpdateTokenEndpointAuthority","cloudInstanceAuthorityUri","tenant","cloudInstanceAuthority","createDiscoveredInstance","createTokenQueryParameters","request","parameters","Map","embeddedClientId","addBrokerParameters","clientId","redirectUri","tokenQueryParameters","addExtraQueryParameters","addCorrelationId","instrumentBrokerParams","mapToQueryString"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-common/src/client/BaseClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ClientConfiguration,\n    buildClientConfiguration,\n    CommonClientConfiguration,\n} from \"../config/ClientConfiguration.js\";\nimport {\n    INetworkModule,\n    NetworkRequestOptions,\n} from \"../network/INetworkModule.js\";\nimport { NetworkResponse } from \"../network/NetworkResponse.js\";\nimport { ICrypto } from \"../crypto/ICrypto.js\";\nimport { Authority } from \"../authority/Authority.js\";\nimport { Logger } from \"../logger/Logger.js\";\nimport { Constants, HeaderNames } from \"../utils/Constants.js\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse.js\";\nimport { CacheManager } from \"../cache/CacheManager.js\";\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager.js\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint.js\";\nimport { version, name } from \"../packageMetadata.js\";\nimport { CcsCredential, CcsCredentialType } from \"../account/CcsCredential.js\";\nimport { buildClientInfoFromHomeAccountId } from \"../account/ClientInfo.js\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient.js\";\nimport * as RequestParameterBuilder from \"../request/RequestParameterBuilder.js\";\nimport * as UrlUtils from \"../utils/UrlUtils.js\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest.js\";\nimport { createDiscoveredInstance } from \"../authority/AuthorityFactory.js\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent.js\";\nimport { ThrottlingUtils } from \"../network/ThrottlingUtils.js\";\nimport { AuthError } from \"../error/AuthError.js\";\nimport {\n    ClientAuthErrorCodes,\n    createClientAuthError,\n} from \"../error/ClientAuthError.js\";\nimport { NetworkError } from \"../error/NetworkError.js\";\nimport { invokeAsync } from \"../utils/FunctionWrappers.js\";\n\n/**\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\n * @internal\n */\nexport abstract class BaseClient {\n    // Logger object\n    public logger: Logger;\n\n    // Application config\n    protected config: CommonClientConfiguration;\n\n    // Crypto Interface\n    protected cryptoUtils: ICrypto;\n\n    // Storage Interface\n    protected cacheManager: CacheManager;\n\n    // Network Interface\n    protected networkClient: INetworkModule;\n\n    // Server Telemetry Manager\n    protected serverTelemetryManager: ServerTelemetryManager | null;\n\n    // Default authority object\n    public authority: Authority;\n\n    // Performance telemetry client\n    protected performanceClient?: IPerformanceClient;\n\n    protected constructor(\n        configuration: ClientConfiguration,\n        performanceClient?: IPerformanceClient\n    ) {\n        // Set the configuration\n        this.config = buildClientConfiguration(configuration);\n\n        // Initialize the logger\n        this.logger = new Logger(this.config.loggerOptions, name, version);\n\n        // Initialize crypto\n        this.cryptoUtils = this.config.cryptoInterface;\n\n        // Initialize storage interface\n        this.cacheManager = this.config.storageInterface;\n\n        // Set the network interface\n        this.networkClient = this.config.networkInterface;\n\n        // Set TelemetryManager\n        this.serverTelemetryManager = this.config.serverTelemetryManager;\n\n        // set Authority\n        this.authority = this.config.authOptions.authority;\n\n        // set performance telemetry client\n        this.performanceClient = performanceClient;\n    }\n\n    /**\n     * Creates default headers for requests to token endpoint\n     */\n    protected createTokenRequestHeaders(\n        ccsCred?: CcsCredential\n    ): Record<string, string> {\n        const headers: Record<string, string> = {};\n        headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\n        if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n            switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(\n                            ccsCred.credential\n                        );\n                        headers[\n                            HeaderNames.CCS_HEADER\n                        ] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;\n                    } catch (e) {\n                        this.logger.verbose(\n                            \"Could not parse home account ID for CCS Header: \" +\n                                e\n                        );\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    headers[\n                        HeaderNames.CCS_HEADER\n                    ] = `UPN: ${ccsCred.credential}`;\n                    break;\n            }\n        }\n        return headers;\n    }\n\n    /**\n     * Http post to token endpoint\n     * @param tokenEndpoint\n     * @param queryString\n     * @param headers\n     * @param thumbprint\n     */\n    protected async executePostToTokenEndpoint(\n        tokenEndpoint: string,\n        queryString: string,\n        headers: Record<string, string>,\n        thumbprint: RequestThumbprint,\n        correlationId: string,\n        queuedEvent?: string\n    ): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        if (queuedEvent) {\n            this.performanceClient?.addQueueMeasurement(\n                queuedEvent,\n                correlationId\n            );\n        }\n\n        const response =\n            await this.sendPostRequest<ServerAuthorizationTokenResponse>(\n                thumbprint,\n                tokenEndpoint,\n                { body: queryString, headers: headers },\n                correlationId\n            );\n\n        if (\n            this.config.serverTelemetryManager &&\n            response.status < 500 &&\n            response.status !== 429\n        ) {\n            // Telemetry data successfully logged by server, clear Telemetry cache\n            this.config.serverTelemetryManager.clearTelemetryCache();\n        }\n\n        return response;\n    }\n\n    /**\n     * Wraps sendPostRequestAsync with necessary preflight and postflight logic\n     * @param thumbprint - Request thumbprint for throttling\n     * @param tokenEndpoint - Endpoint to make the POST to\n     * @param options - Body and Headers to include on the POST request\n     * @param correlationId - CorrelationId for telemetry\n     */\n    async sendPostRequest<T extends ServerAuthorizationTokenResponse>(\n        thumbprint: RequestThumbprint,\n        tokenEndpoint: string,\n        options: NetworkRequestOptions,\n        correlationId: string\n    ): Promise<NetworkResponse<T>> {\n        ThrottlingUtils.preProcess(this.cacheManager, thumbprint);\n\n        let response;\n        try {\n            response = await invokeAsync(\n                this.networkClient.sendPostRequestAsync.bind(\n                    this.networkClient\n                )<T>,\n                PerformanceEvents.NetworkClientSendPostRequestAsync,\n                this.logger,\n                this.performanceClient,\n                correlationId\n            )(tokenEndpoint, options);\n            const responseHeaders = response.headers || {};\n            this.performanceClient?.addFields(\n                {\n                    refreshTokenSize: response.body.refresh_token?.length || 0,\n                    httpVerToken:\n                        responseHeaders[HeaderNames.X_MS_HTTP_VERSION] || \"\",\n                    requestId:\n                        responseHeaders[HeaderNames.X_MS_REQUEST_ID] || \"\",\n                },\n                correlationId\n            );\n        } catch (e) {\n            if (e instanceof NetworkError) {\n                const responseHeaders = e.responseHeaders;\n                if (responseHeaders) {\n                    this.performanceClient?.addFields(\n                        {\n                            httpVerToken:\n                                responseHeaders[\n                                    HeaderNames.X_MS_HTTP_VERSION\n                                ] || \"\",\n                            requestId:\n                                responseHeaders[HeaderNames.X_MS_REQUEST_ID] ||\n                                \"\",\n                            contentTypeHeader:\n                                responseHeaders[HeaderNames.CONTENT_TYPE] ||\n                                undefined,\n                            contentLengthHeader:\n                                responseHeaders[HeaderNames.CONTENT_LENGTH] ||\n                                undefined,\n                            httpStatus: e.httpStatus,\n                        },\n                        correlationId\n                    );\n                }\n                throw e.error;\n            }\n            if (e instanceof AuthError) {\n                throw e;\n            } else {\n                throw createClientAuthError(ClientAuthErrorCodes.networkError);\n            }\n        }\n\n        ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);\n\n        return response;\n    }\n\n    /**\n     * Updates the authority object of the client. Endpoint discovery must be completed.\n     * @param updatedAuthority\n     */\n    async updateAuthority(\n        cloudInstanceHostname: string,\n        correlationId: string\n    ): Promise<void> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.UpdateTokenEndpointAuthority,\n            correlationId\n        );\n        const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${this.authority.tenant}/`;\n        const cloudInstanceAuthority = await createDiscoveredInstance(\n            cloudInstanceAuthorityUri,\n            this.networkClient,\n            this.cacheManager,\n            this.authority.options,\n            this.logger,\n            correlationId,\n            this.performanceClient\n        );\n        this.authority = cloudInstanceAuthority;\n    }\n\n    /**\n     * Creates query string for the /token request\n     * @param request\n     */\n    createTokenQueryParameters(request: BaseAuthRequest): string {\n        const parameters = new Map<string, string>();\n\n        if (request.embeddedClientId) {\n            RequestParameterBuilder.addBrokerParameters(\n                parameters,\n                this.config.authOptions.clientId,\n                this.config.authOptions.redirectUri\n            );\n        }\n\n        if (request.tokenQueryParameters) {\n            RequestParameterBuilder.addExtraQueryParameters(\n                parameters,\n                request.tokenQueryParameters\n            );\n        }\n\n        RequestParameterBuilder.addCorrelationId(\n            parameters,\n            request.correlationId\n        );\n\n        RequestParameterBuilder.instrumentBrokerParams(\n            parameters,\n            request.correlationId,\n            this.performanceClient\n        );\n        return UrlUtils.mapToQueryString(parameters);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}