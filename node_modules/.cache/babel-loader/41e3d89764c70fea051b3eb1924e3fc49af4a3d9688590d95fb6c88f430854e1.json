{"ast":null,"code":"/*! @azure/msal-common v15.7.0 2025-05-30 */\n'use strict';\n\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { Constants, HeaderNames } from '../utils/Constants.mjs';\nimport { invalidAuthenticationHeader, missingNonceAuthenticationHeader } from '../error/ClientConfigurationErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\r\n * header challenge values that can be used outside the basic authorization flows.\r\n */\nclass AuthenticationHeaderParser {\n  constructor(headers) {\n    this.headers = headers;\n  }\n  /**\r\n   * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\r\n   * @returns\r\n   */\n  getShrNonce() {\n    // Attempt to parse nonce from Authentiacation-Info\n    const authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\n    if (authenticationInfo) {\n      const authenticationInfoChallenges = this.parseChallenges(authenticationInfo);\n      if (authenticationInfoChallenges.nextnonce) {\n        return authenticationInfoChallenges.nextnonce;\n      }\n      throw createClientConfigurationError(invalidAuthenticationHeader);\n    }\n    // Attempt to parse nonce from WWW-Authenticate\n    const wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\n    if (wwwAuthenticate) {\n      const wwwAuthenticateChallenges = this.parseChallenges(wwwAuthenticate);\n      if (wwwAuthenticateChallenges.nonce) {\n        return wwwAuthenticateChallenges.nonce;\n      }\n      throw createClientConfigurationError(invalidAuthenticationHeader);\n    }\n    // If neither header is present, throw missing headers error\n    throw createClientConfigurationError(missingNonceAuthenticationHeader);\n  }\n  /**\r\n   * Parses an HTTP header's challenge set into a key/value map.\r\n   * @param header\r\n   * @returns\r\n   */\n  parseChallenges(header) {\n    const schemeSeparator = header.indexOf(\" \");\n    const challenges = header.substr(schemeSeparator + 1).split(\",\");\n    const challengeMap = {};\n    challenges.forEach(challenge => {\n      const [key, value] = challenge.split(\"=\");\n      // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\n      challengeMap[key] = unescape(value.replace(/['\"]+/g, Constants.EMPTY_STRING));\n    });\n    return challengeMap;\n  }\n}\nexport { AuthenticationHeaderParser };","map":{"version":3,"names":["AuthenticationHeaderParser","constructor","headers","getShrNonce","authenticationInfo","HeaderNames","AuthenticationInfo","authenticationInfoChallenges","parseChallenges","nextnonce","createClientConfigurationError","invalidAuthenticationHeader","wwwAuthenticate","WWWAuthenticate","wwwAuthenticateChallenges","nonce","missingNonceAuthenticationHeader","header","schemeSeparator","indexOf","challenges","substr","split","challengeMap","forEach","challenge","key","value","unescape","replace","Constants","EMPTY_STRING"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-common/src/request/AuthenticationHeaderParser.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    createClientConfigurationError,\n    ClientConfigurationErrorCodes,\n} from \"../error/ClientConfigurationError.js\";\nimport { Constants, HeaderNames } from \"../utils/Constants.js\";\n\ntype WWWAuthenticateChallenges = {\n    nonce?: string;\n};\n\ntype AuthenticationInfoChallenges = {\n    nextnonce?: string;\n};\n\n/**\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\n * header challenge values that can be used outside the basic authorization flows.\n */\nexport class AuthenticationHeaderParser {\n    private headers: Record<string, string>;\n\n    constructor(headers: Record<string, string>) {\n        this.headers = headers;\n    }\n\n    /**\n     * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\n     * @returns\n     */\n    getShrNonce(): string {\n        // Attempt to parse nonce from Authentiacation-Info\n        const authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\n        if (authenticationInfo) {\n            const authenticationInfoChallenges =\n                this.parseChallenges<AuthenticationInfoChallenges>(\n                    authenticationInfo\n                );\n            if (authenticationInfoChallenges.nextnonce) {\n                return authenticationInfoChallenges.nextnonce;\n            }\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.invalidAuthenticationHeader\n            );\n        }\n\n        // Attempt to parse nonce from WWW-Authenticate\n        const wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\n        if (wwwAuthenticate) {\n            const wwwAuthenticateChallenges =\n                this.parseChallenges<WWWAuthenticateChallenges>(\n                    wwwAuthenticate\n                );\n            if (wwwAuthenticateChallenges.nonce) {\n                return wwwAuthenticateChallenges.nonce;\n            }\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.invalidAuthenticationHeader\n            );\n        }\n\n        // If neither header is present, throw missing headers error\n        throw createClientConfigurationError(\n            ClientConfigurationErrorCodes.missingNonceAuthenticationHeader\n        );\n    }\n\n    /**\n     * Parses an HTTP header's challenge set into a key/value map.\n     * @param header\n     * @returns\n     */\n    private parseChallenges<T>(header: string): T {\n        const schemeSeparator = header.indexOf(\" \");\n        const challenges = header.substr(schemeSeparator + 1).split(\",\");\n        const challengeMap = {} as T;\n\n        challenges.forEach((challenge: string) => {\n            const [key, value] = challenge.split(\"=\");\n            // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\n            challengeMap[key] = unescape(\n                value.replace(/['\"]+/g, Constants.EMPTY_STRING)\n            );\n        });\n\n        return challengeMap;\n    }\n}\n"],"mappings":";;;;;;;AAAA;;;AAGG;AAgBH;;;AAGG;MACUA,0BAA0B;EAGnCC,YAAYC,OAA+B;IACvC,IAAI,CAACA,OAAO,GAAGA,OAAO;;EAG1B;;;AAGG;EACHC,WAAWA,CAAA;;IAEP,MAAMC,kBAAkB,GAAG,IAAI,CAACF,OAAO,CAACG,WAAW,CAACC,kBAAkB,CAAC;IACvE,IAAIF,kBAAkB,EAAE;MACpB,MAAMG,4BAA4B,GAC9B,IAAI,CAACC,eAAe,CAChBJ,kBAAkB,CACrB;MACL,IAAIG,4BAA4B,CAACE,SAAS,EAAE;QACxC,OAAOF,4BAA4B,CAACE,SAAS;MAChD;MACD,MAAMC,8BAA8B,CAChCC,2BAAyD,CAC5D;IACJ;;IAGD,MAAMC,eAAe,GAAG,IAAI,CAACV,OAAO,CAACG,WAAW,CAACQ,eAAe,CAAC;IACjE,IAAID,eAAe,EAAE;MACjB,MAAME,yBAAyB,GAC3B,IAAI,CAACN,eAAe,CAChBI,eAAe,CAClB;MACL,IAAIE,yBAAyB,CAACC,KAAK,EAAE;QACjC,OAAOD,yBAAyB,CAACC,KAAK;MACzC;MACD,MAAML,8BAA8B,CAChCC,2BAAyD,CAC5D;IACJ;;IAGD,MAAMD,8BAA8B,CAChCM,gCAA8D,CACjE;;EAGL;;;;AAIG;EACKR,eAAeA,CAAIS,MAAc;IACrC,MAAMC,eAAe,GAAGD,MAAM,CAACE,OAAO,CAAC,GAAG,CAAC;IAC3C,MAAMC,UAAU,GAAGH,MAAM,CAACI,MAAM,CAACH,eAAe,GAAG,CAAC,CAAC,CAACI,KAAK,CAAC,GAAG,CAAC;IAChE,MAAMC,YAAY,GAAG,EAAO;IAE5BH,UAAU,CAACI,OAAO,CAAEC,SAAiB,IAAI;MACrC,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAGF,SAAS,CAACH,KAAK,CAAC,GAAG,CAAC;;MAEzCC,YAAY,CAACG,GAAG,CAAC,GAAGE,QAAQ,CACxBD,KAAK,CAACE,OAAO,CAAC,QAAQ,EAAEC,SAAS,CAACC,YAAY,CAAC,CAClD;IACL,CAAC,CAAC;IAEF,OAAOR,YAAY;;AAE1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}