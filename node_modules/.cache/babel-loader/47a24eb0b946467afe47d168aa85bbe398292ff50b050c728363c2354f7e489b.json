{"ast":null,"code":"/*! @azure/msal-browser v4.13.1 2025-06-10 */\n'use strict';\n\nimport { OIDC_DEFAULT_SCOPES, invokeAsync, PerformanceEvents, ProtocolMode, invoke, AuthError, UrlString, ServerResponseType } from '@azure/msal-common/browser';\nimport { StandardInteractionClient } from './StandardInteractionClient.mjs';\nimport { EventType } from '../event/EventType.mjs';\nimport { InteractionType, ApiId, BrowserConstants } from '../utils/BrowserConstants.mjs';\nimport { preconnect, getCurrentUri } from '../utils/BrowserUtils.mjs';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { deserializeResponse } from '../response/ResponseHandler.mjs';\nimport { getAuthCodeRequestUrl, handleResponseCode, getEARForm, handleResponseEAR } from '../protocol/Authorize.mjs';\nimport { generatePkceCodes } from '../crypto/PkceGenerator.mjs';\nimport { isPlatformAuthAllowed } from '../broker/nativeBroker/PlatformAuthProvider.mjs';\nimport { generateEarKey } from '../crypto/BrowserCrypto.mjs';\nimport { emptyNavigateUri, userCancelled, emptyWindowError, popupWindowError } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass PopupClient extends StandardInteractionClient {\n  constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, platformAuthHandler, correlationId) {\n    super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, platformAuthHandler, correlationId);\n    // Properly sets this reference for the unload event.\n    this.unloadWindow = this.unloadWindow.bind(this);\n    this.nativeStorage = nativeStorageImpl;\n    this.eventHandler = eventHandler;\n  }\n  /**\r\n   * Acquires tokens by opening a popup window to the /authorize endpoint of the authority\r\n   * @param request\r\n   * @param pkceCodes\r\n   */\n  acquireToken(request, pkceCodes) {\n    try {\n      const popupName = this.generatePopupName(request.scopes || OIDC_DEFAULT_SCOPES, request.authority || this.config.auth.authority);\n      const popupParams = {\n        popupName,\n        popupWindowAttributes: request.popupWindowAttributes || {},\n        popupWindowParent: request.popupWindowParent ?? window\n      };\n      this.performanceClient.addFields({\n        isAsyncPopup: this.config.system.asyncPopups\n      }, this.correlationId);\n      // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n      if (this.config.system.asyncPopups) {\n        this.logger.verbose(\"asyncPopups set to true, acquiring token\");\n        // Passes on popup position and dimensions if in request\n        return this.acquireTokenPopupAsync(request, popupParams, pkceCodes);\n      } else {\n        // asyncPopups flag is set to false. Opens popup before acquiring token.\n        this.logger.verbose(\"asyncPopup set to false, opening popup before acquiring token\");\n        popupParams.popup = this.openSizedPopup(\"about:blank\", popupParams);\n        return this.acquireTokenPopupAsync(request, popupParams, pkceCodes);\n      }\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  /**\r\n   * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\r\n   * @param logoutRequest\r\n   */\n  logout(logoutRequest) {\n    try {\n      this.logger.verbose(\"logoutPopup called\");\n      const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n      const popupParams = {\n        popupName: this.generateLogoutPopupName(validLogoutRequest),\n        popupWindowAttributes: logoutRequest?.popupWindowAttributes || {},\n        popupWindowParent: logoutRequest?.popupWindowParent ?? window\n      };\n      const authority = logoutRequest && logoutRequest.authority;\n      const mainWindowRedirectUri = logoutRequest && logoutRequest.mainWindowRedirectUri;\n      // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n      if (this.config.system.asyncPopups) {\n        this.logger.verbose(\"asyncPopups set to true\");\n        // Passes on popup position and dimensions if in request\n        return this.logoutPopupAsync(validLogoutRequest, popupParams, authority, mainWindowRedirectUri);\n      } else {\n        // asyncPopups flag is set to false. Opens popup before logging out.\n        this.logger.verbose(\"asyncPopup set to false, opening popup\");\n        popupParams.popup = this.openSizedPopup(\"about:blank\", popupParams);\n        return this.logoutPopupAsync(validLogoutRequest, popupParams, authority, mainWindowRedirectUri);\n      }\n    } catch (e) {\n      // Since this function is synchronous we need to reject\n      return Promise.reject(e);\n    }\n  }\n  /**\r\n   * Helper which obtains an access_token for your API via opening a popup window in the user's browser\r\n   * @param request\r\n   * @param popupParams\r\n   * @param pkceCodes\r\n   *\r\n   * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n   */\n  async acquireTokenPopupAsync(request, popupParams, pkceCodes) {\n    this.logger.verbose(\"acquireTokenPopupAsync called\");\n    const validRequest = await invokeAsync(this.initializeAuthorizationRequest.bind(this), PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, this.correlationId)(request, InteractionType.Popup);\n    /*\r\n     * Skip pre-connect for async popups to reduce time between user interaction and popup window creation to avoid\r\n     * popup from being blocked by browsers with shorter popup timers\r\n     */\n    if (popupParams.popup) {\n      preconnect(validRequest.authority);\n    }\n    const isPlatformBroker = isPlatformAuthAllowed(this.config, this.logger, this.platformAuthProvider, request.authenticationScheme);\n    validRequest.platformBroker = isPlatformBroker;\n    if (this.config.auth.protocolMode === ProtocolMode.EAR) {\n      return this.executeEarFlow(validRequest, popupParams);\n    } else {\n      return this.executeCodeFlow(validRequest, popupParams, pkceCodes);\n    }\n  }\n  /**\r\n   * Executes auth code + PKCE flow\r\n   * @param request\r\n   * @param popupParams\r\n   * @param pkceCodes\r\n   * @returns\r\n   */\n  async executeCodeFlow(request, popupParams, pkceCodes) {\n    const correlationId = request.correlationId;\n    const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenPopup);\n    const pkce = pkceCodes || (await invokeAsync(generatePkceCodes, PerformanceEvents.GeneratePkceCodes, this.logger, this.performanceClient, correlationId)(this.performanceClient, this.logger, correlationId));\n    const popupRequest = {\n      ...request,\n      codeChallenge: pkce.challenge\n    };\n    try {\n      // Initialize the client\n      const authClient = await invokeAsync(this.createAuthCodeClient.bind(this), PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, correlationId)({\n        serverTelemetryManager,\n        requestAuthority: popupRequest.authority,\n        requestAzureCloudOptions: popupRequest.azureCloudOptions,\n        requestExtraQueryParameters: popupRequest.extraQueryParameters,\n        account: popupRequest.account\n      });\n      // Create acquire token url.\n      const navigateUrl = await invokeAsync(getAuthCodeRequestUrl, PerformanceEvents.GetAuthCodeUrl, this.logger, this.performanceClient, correlationId)(this.config, authClient.authority, popupRequest, this.logger, this.performanceClient);\n      // Show the UI once the url has been created. Get the window handle for the popup.\n      const popupWindow = this.initiateAuthRequest(navigateUrl, popupParams);\n      this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {\n        popupWindow\n      }, null);\n      // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n      const responseString = await this.monitorPopupForHash(popupWindow, popupParams.popupWindowParent);\n      const serverParams = invoke(deserializeResponse, PerformanceEvents.DeserializeResponse, this.logger, this.performanceClient, this.correlationId)(responseString, this.config.auth.OIDCOptions.serverResponseType, this.logger);\n      return await invokeAsync(handleResponseCode, PerformanceEvents.HandleResponseCode, this.logger, this.performanceClient, correlationId)(request, serverParams, pkce.verifier, ApiId.acquireTokenPopup, this.config, authClient, this.browserStorage, this.nativeStorage, this.eventHandler, this.logger, this.performanceClient, this.platformAuthProvider);\n    } catch (e) {\n      // Close the synchronous popup if an error is thrown before the window unload event is registered\n      popupParams.popup?.close();\n      if (e instanceof AuthError) {\n        e.setCorrelationId(this.correlationId);\n        serverTelemetryManager.cacheFailedRequest(e);\n      }\n      throw e;\n    }\n  }\n  /**\r\n   * Executes EAR flow\r\n   * @param request\r\n   */\n  async executeEarFlow(request, popupParams) {\n    const correlationId = request.correlationId;\n    // Get the frame handle for the silent request\n    const discoveredAuthority = await invokeAsync(this.getDiscoveredAuthority.bind(this), PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.logger, this.performanceClient, correlationId)({\n      requestAuthority: request.authority,\n      requestAzureCloudOptions: request.azureCloudOptions,\n      requestExtraQueryParameters: request.extraQueryParameters,\n      account: request.account\n    });\n    const earJwk = await invokeAsync(generateEarKey, PerformanceEvents.GenerateEarKey, this.logger, this.performanceClient, correlationId)();\n    const popupRequest = {\n      ...request,\n      earJwk: earJwk\n    };\n    const popupWindow = popupParams.popup || this.openPopup(\"about:blank\", popupParams);\n    const form = await getEARForm(popupWindow.document, this.config, discoveredAuthority, popupRequest, this.logger, this.performanceClient);\n    form.submit();\n    // Monitor the popup for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n    const responseString = await invokeAsync(this.monitorPopupForHash.bind(this), PerformanceEvents.SilentHandlerMonitorIframeForHash, this.logger, this.performanceClient, correlationId)(popupWindow, popupParams.popupWindowParent);\n    const serverParams = invoke(deserializeResponse, PerformanceEvents.DeserializeResponse, this.logger, this.performanceClient, this.correlationId)(responseString, this.config.auth.OIDCOptions.serverResponseType, this.logger);\n    return invokeAsync(handleResponseEAR, PerformanceEvents.HandleResponseEar, this.logger, this.performanceClient, correlationId)(popupRequest, serverParams, ApiId.acquireTokenPopup, this.config, discoveredAuthority, this.browserStorage, this.nativeStorage, this.eventHandler, this.logger, this.performanceClient, this.platformAuthProvider);\n  }\n  /**\r\n   *\r\n   * @param validRequest\r\n   * @param popupName\r\n   * @param requestAuthority\r\n   * @param popup\r\n   * @param mainWindowRedirectUri\r\n   * @param popupWindowAttributes\r\n   */\n  async logoutPopupAsync(validRequest, popupParams, requestAuthority, mainWindowRedirectUri) {\n    this.logger.verbose(\"logoutPopupAsync called\");\n    this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Popup, validRequest);\n    const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logoutPopup);\n    try {\n      // Clear cache on logout\n      await this.clearCacheOnLogout(validRequest.account);\n      // Initialize the client\n      const authClient = await invokeAsync(this.createAuthCodeClient.bind(this), PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, this.correlationId)({\n        serverTelemetryManager,\n        requestAuthority: requestAuthority,\n        account: validRequest.account || undefined\n      });\n      try {\n        authClient.authority.endSessionEndpoint;\n      } catch {\n        if (validRequest.account?.homeAccountId && validRequest.postLogoutRedirectUri && authClient.authority.protocolMode === ProtocolMode.OIDC) {\n          void this.browserStorage.removeAccount(validRequest.account?.homeAccountId);\n          this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Popup, validRequest);\n          if (mainWindowRedirectUri) {\n            const navigationOptions = {\n              apiId: ApiId.logoutPopup,\n              timeout: this.config.system.redirectNavigationTimeout,\n              noHistory: false\n            };\n            const absoluteUrl = UrlString.getAbsoluteUrl(mainWindowRedirectUri, getCurrentUri());\n            await this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);\n          }\n          popupParams.popup?.close();\n          return;\n        }\n      }\n      // Create logout string and navigate user window to logout.\n      const logoutUri = authClient.getLogoutUri(validRequest);\n      this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Popup, validRequest);\n      // Open the popup window to requestUrl.\n      const popupWindow = this.openPopup(logoutUri, popupParams);\n      this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {\n        popupWindow\n      }, null);\n      await this.monitorPopupForHash(popupWindow, popupParams.popupWindowParent).catch(() => {\n        // Swallow any errors related to monitoring the window. Server logout is best effort\n      });\n      if (mainWindowRedirectUri) {\n        const navigationOptions = {\n          apiId: ApiId.logoutPopup,\n          timeout: this.config.system.redirectNavigationTimeout,\n          noHistory: false\n        };\n        const absoluteUrl = UrlString.getAbsoluteUrl(mainWindowRedirectUri, getCurrentUri());\n        this.logger.verbose(\"Redirecting main window to url specified in the request\");\n        this.logger.verbosePii(`Redirecting main window to: ${absoluteUrl}`);\n        await this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);\n      } else {\n        this.logger.verbose(\"No main window navigation requested\");\n      }\n    } catch (e) {\n      // Close the synchronous popup if an error is thrown before the window unload event is registered\n      popupParams.popup?.close();\n      if (e instanceof AuthError) {\n        e.setCorrelationId(this.correlationId);\n        serverTelemetryManager.cacheFailedRequest(e);\n      }\n      this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Popup, null, e);\n      this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\n      throw e;\n    }\n    this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\n  }\n  /**\r\n   * Opens a popup window with given request Url.\r\n   * @param requestUrl\r\n   */\n  initiateAuthRequest(requestUrl, params) {\n    // Check that request url is not empty.\n    if (requestUrl) {\n      this.logger.infoPii(`Navigate to: ${requestUrl}`);\n      // Open the popup window to requestUrl.\n      return this.openPopup(requestUrl, params);\n    } else {\n      // Throw error if request URL is empty.\n      this.logger.error(\"Navigate url is empty\");\n      throw createBrowserAuthError(emptyNavigateUri);\n    }\n  }\n  /**\r\n   * Monitors a window until it loads a url with the same origin.\r\n   * @param popupWindow - window that is being monitored\r\n   * @param timeout - timeout for processing hash once popup is redirected back to application\r\n   */\n  monitorPopupForHash(popupWindow, popupWindowParent) {\n    return new Promise((resolve, reject) => {\n      this.logger.verbose(\"PopupHandler.monitorPopupForHash - polling started\");\n      const intervalId = setInterval(() => {\n        // Window is closed\n        if (popupWindow.closed) {\n          this.logger.error(\"PopupHandler.monitorPopupForHash - window closed\");\n          clearInterval(intervalId);\n          reject(createBrowserAuthError(userCancelled));\n          return;\n        }\n        let href = \"\";\n        try {\n          /*\r\n           * Will throw if cross origin,\r\n           * which should be caught and ignored\r\n           * since we need the interval to keep running while on STS UI.\r\n           */\n          href = popupWindow.location.href;\n        } catch (e) {}\n        // Don't process blank pages or cross domain\n        if (!href || href === \"about:blank\") {\n          return;\n        }\n        clearInterval(intervalId);\n        let responseString = \"\";\n        const responseType = this.config.auth.OIDCOptions.serverResponseType;\n        if (popupWindow) {\n          if (responseType === ServerResponseType.QUERY) {\n            responseString = popupWindow.location.search;\n          } else {\n            responseString = popupWindow.location.hash;\n          }\n        }\n        this.logger.verbose(\"PopupHandler.monitorPopupForHash - popup window is on same origin as caller\");\n        resolve(responseString);\n      }, this.config.system.pollIntervalMilliseconds);\n    }).finally(() => {\n      this.cleanPopup(popupWindow, popupWindowParent);\n    });\n  }\n  /**\r\n   * @hidden\r\n   *\r\n   * Configures popup window for login.\r\n   *\r\n   * @param urlNavigate\r\n   * @param title\r\n   * @param popUpWidth\r\n   * @param popUpHeight\r\n   * @param popupWindowAttributes\r\n   * @ignore\r\n   * @hidden\r\n   */\n  openPopup(urlNavigate, popupParams) {\n    try {\n      let popupWindow;\n      // Popup window passed in, setting url to navigate to\n      if (popupParams.popup) {\n        popupWindow = popupParams.popup;\n        this.logger.verbosePii(`Navigating popup window to: ${urlNavigate}`);\n        popupWindow.location.assign(urlNavigate);\n      } else if (typeof popupParams.popup === \"undefined\") {\n        // Popup will be undefined if it was not passed in\n        this.logger.verbosePii(`Opening popup window to: ${urlNavigate}`);\n        popupWindow = this.openSizedPopup(urlNavigate, popupParams);\n      }\n      // Popup will be null if popups are blocked\n      if (!popupWindow) {\n        throw createBrowserAuthError(emptyWindowError);\n      }\n      if (popupWindow.focus) {\n        popupWindow.focus();\n      }\n      this.currentWindow = popupWindow;\n      popupParams.popupWindowParent.addEventListener(\"beforeunload\", this.unloadWindow);\n      return popupWindow;\n    } catch (e) {\n      this.logger.error(\"error opening popup \" + e.message);\n      throw createBrowserAuthError(popupWindowError);\n    }\n  }\n  /**\r\n   * Helper function to set popup window dimensions and position\r\n   * @param urlNavigate\r\n   * @param popupName\r\n   * @param popupWindowAttributes\r\n   * @returns\r\n   */\n  openSizedPopup(urlNavigate, {\n    popupName,\n    popupWindowAttributes,\n    popupWindowParent\n  }) {\n    /**\r\n     * adding winLeft and winTop to account for dual monitor\r\n     * using screenLeft and screenTop for IE8 and earlier\r\n     */\n    const winLeft = popupWindowParent.screenLeft ? popupWindowParent.screenLeft : popupWindowParent.screenX;\n    const winTop = popupWindowParent.screenTop ? popupWindowParent.screenTop : popupWindowParent.screenY;\n    /**\r\n     * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n     * using document.documentElement.clientWidth for IE8 and earlier\r\n     */\n    const winWidth = popupWindowParent.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n    const winHeight = popupWindowParent.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n    let width = popupWindowAttributes.popupSize?.width;\n    let height = popupWindowAttributes.popupSize?.height;\n    let top = popupWindowAttributes.popupPosition?.top;\n    let left = popupWindowAttributes.popupPosition?.left;\n    if (!width || width < 0 || width > winWidth) {\n      this.logger.verbose(\"Default popup window width used. Window width not configured or invalid.\");\n      width = BrowserConstants.POPUP_WIDTH;\n    }\n    if (!height || height < 0 || height > winHeight) {\n      this.logger.verbose(\"Default popup window height used. Window height not configured or invalid.\");\n      height = BrowserConstants.POPUP_HEIGHT;\n    }\n    if (!top || top < 0 || top > winHeight) {\n      this.logger.verbose(\"Default popup window top position used. Window top not configured or invalid.\");\n      top = Math.max(0, winHeight / 2 - BrowserConstants.POPUP_HEIGHT / 2 + winTop);\n    }\n    if (!left || left < 0 || left > winWidth) {\n      this.logger.verbose(\"Default popup window left position used. Window left not configured or invalid.\");\n      left = Math.max(0, winWidth / 2 - BrowserConstants.POPUP_WIDTH / 2 + winLeft);\n    }\n    return popupWindowParent.open(urlNavigate, popupName, `width=${width}, height=${height}, top=${top}, left=${left}, scrollbars=yes`);\n  }\n  /**\r\n   * Event callback to unload main window.\r\n   */\n  unloadWindow(e) {\n    if (this.currentWindow) {\n      this.currentWindow.close();\n    }\n    // Guarantees browser unload will happen, so no other errors will be thrown.\n    e.preventDefault();\n  }\n  /**\r\n   * Closes popup, removes any state vars created during popup calls.\r\n   * @param popupWindow\r\n   */\n  cleanPopup(popupWindow, popupWindowParent) {\n    // Close window.\n    popupWindow.close();\n    // Remove window unload function\n    popupWindowParent.removeEventListener(\"beforeunload\", this.unloadWindow);\n  }\n  /**\r\n   * Generates the name for the popup based on the client id and request\r\n   * @param clientId\r\n   * @param request\r\n   */\n  generatePopupName(scopes, authority) {\n    return `${BrowserConstants.POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${scopes.join(\"-\")}.${authority}.${this.correlationId}`;\n  }\n  /**\r\n   * Generates the name for the popup based on the client id and request for logouts\r\n   * @param clientId\r\n   * @param request\r\n   */\n  generateLogoutPopupName(request) {\n    const homeAccountId = request.account && request.account.homeAccountId;\n    return `${BrowserConstants.POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${homeAccountId}.${this.correlationId}`;\n  }\n}\nexport { PopupClient };","map":{"version":3,"names":["PopupClient","StandardInteractionClient","constructor","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","performanceClient","nativeStorageImpl","platformAuthHandler","correlationId","unloadWindow","bind","nativeStorage","acquireToken","request","pkceCodes","popupName","generatePopupName","scopes","OIDC_DEFAULT_SCOPES","authority","auth","popupParams","popupWindowAttributes","popupWindowParent","window","addFields","isAsyncPopup","system","asyncPopups","verbose","acquireTokenPopupAsync","popup","openSizedPopup","e","Promise","reject","logout","logoutRequest","validLogoutRequest","initializeLogoutRequest","generateLogoutPopupName","mainWindowRedirectUri","logoutPopupAsync","validRequest","invokeAsync","initializeAuthorizationRequest","PerformanceEvents","StandardInteractionClientInitializeAuthorizationRequest","InteractionType","Popup","preconnect","isPlatformBroker","isPlatformAuthAllowed","platformAuthProvider","authenticationScheme","platformBroker","protocolMode","ProtocolMode","EAR","executeEarFlow","executeCodeFlow","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenPopup","pkce","generatePkceCodes","GeneratePkceCodes","popupRequest","codeChallenge","challenge","authClient","createAuthCodeClient","StandardInteractionClientCreateAuthCodeClient","requestAuthority","requestAzureCloudOptions","azureCloudOptions","requestExtraQueryParameters","extraQueryParameters","account","navigateUrl","getAuthCodeRequestUrl","GetAuthCodeUrl","popupWindow","initiateAuthRequest","emitEvent","EventType","POPUP_OPENED","responseString","monitorPopupForHash","serverParams","invoke","deserializeResponse","DeserializeResponse","OIDCOptions","serverResponseType","handleResponseCode","HandleResponseCode","verifier","browserStorage","close","AuthError","setCorrelationId","cacheFailedRequest","discoveredAuthority","getDiscoveredAuthority","StandardInteractionClientGetDiscoveredAuthority","earJwk","generateEarKey","GenerateEarKey","openPopup","form","getEARForm","document","submit","SilentHandlerMonitorIframeForHash","handleResponseEAR","HandleResponseEar","LOGOUT_START","logoutPopup","clearCacheOnLogout","undefined","endSessionEndpoint","homeAccountId","postLogoutRedirectUri","OIDC","removeAccount","LOGOUT_SUCCESS","navigationOptions","apiId","timeout","redirectNavigationTimeout","noHistory","absoluteUrl","UrlString","getAbsoluteUrl","getCurrentUri","navigateInternal","logoutUri","getLogoutUri","catch","verbosePii","LOGOUT_FAILURE","LOGOUT_END","requestUrl","params","infoPii","error","createBrowserAuthError","emptyNavigateUri","resolve","intervalId","setInterval","closed","clearInterval","userCancelled","href","location","responseType","ServerResponseType","QUERY","search","hash","pollIntervalMilliseconds","finally","cleanPopup","urlNavigate","assign","emptyWindowError","focus","currentWindow","addEventListener","message","popupWindowError","winLeft","screenLeft","screenX","winTop","screenTop","screenY","winWidth","innerWidth","documentElement","clientWidth","body","winHeight","innerHeight","clientHeight","width","popupSize","height","top","popupPosition","left","BrowserConstants","POPUP_WIDTH","POPUP_HEIGHT","Math","max","open","preventDefault","removeEventListener","POPUP_NAME_PREFIX","clientId","join"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-browser/src/interaction_client/PopupClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AuthorizationCodeClient,\n    CommonEndSessionRequest,\n    UrlString,\n    AuthError,\n    OIDC_DEFAULT_SCOPES,\n    PerformanceEvents,\n    IPerformanceClient,\n    Logger,\n    ICrypto,\n    ProtocolMode,\n    ServerResponseType,\n    invokeAsync,\n    invoke,\n    PkceCodes,\n    CommonAuthorizationUrlRequest,\n} from \"@azure/msal-common/browser\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient.js\";\nimport { EventType } from \"../event/EventType.js\";\nimport {\n    InteractionType,\n    ApiId,\n    BrowserConstants,\n} from \"../utils/BrowserConstants.js\";\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest.js\";\nimport { NavigationOptions } from \"../navigation/NavigationOptions.js\";\nimport * as BrowserUtils from \"../utils/BrowserUtils.js\";\nimport { PopupRequest } from \"../request/PopupRequest.js\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError.js\";\nimport { INavigationClient } from \"../navigation/INavigationClient.js\";\nimport { EventHandler } from \"../event/EventHandler.js\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager.js\";\nimport { BrowserConfiguration } from \"../config/Configuration.js\";\nimport { PopupWindowAttributes } from \"../request/PopupWindowAttributes.js\";\nimport { EventError } from \"../event/EventMessage.js\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult.js\";\nimport * as ResponseHandler from \"../response/ResponseHandler.js\";\nimport * as Authorize from \"../protocol/Authorize.js\";\nimport { generatePkceCodes } from \"../crypto/PkceGenerator.js\";\nimport { isPlatformAuthAllowed } from \"../broker/nativeBroker/PlatformAuthProvider.js\";\nimport { generateEarKey } from \"../crypto/BrowserCrypto.js\";\nimport { IPlatformAuthHandler } from \"../broker/nativeBroker/IPlatformAuthHandler.js\";\n\nexport type PopupParams = {\n    popup?: Window | null;\n    popupName: string;\n    popupWindowAttributes: PopupWindowAttributes;\n    popupWindowParent: Window;\n};\n\nexport class PopupClient extends StandardInteractionClient {\n    private currentWindow: Window | undefined;\n    protected nativeStorage: BrowserCacheManager;\n\n    constructor(\n        config: BrowserConfiguration,\n        storageImpl: BrowserCacheManager,\n        browserCrypto: ICrypto,\n        logger: Logger,\n        eventHandler: EventHandler,\n        navigationClient: INavigationClient,\n        performanceClient: IPerformanceClient,\n        nativeStorageImpl: BrowserCacheManager,\n        platformAuthHandler?: IPlatformAuthHandler,\n        correlationId?: string\n    ) {\n        super(\n            config,\n            storageImpl,\n            browserCrypto,\n            logger,\n            eventHandler,\n            navigationClient,\n            performanceClient,\n            platformAuthHandler,\n            correlationId\n        );\n        // Properly sets this reference for the unload event.\n        this.unloadWindow = this.unloadWindow.bind(this);\n        this.nativeStorage = nativeStorageImpl;\n        this.eventHandler = eventHandler;\n    }\n\n    /**\n     * Acquires tokens by opening a popup window to the /authorize endpoint of the authority\n     * @param request\n     * @param pkceCodes\n     */\n    acquireToken(\n        request: PopupRequest,\n        pkceCodes?: PkceCodes\n    ): Promise<AuthenticationResult> {\n        try {\n            const popupName = this.generatePopupName(\n                request.scopes || OIDC_DEFAULT_SCOPES,\n                request.authority || this.config.auth.authority\n            );\n            const popupParams: PopupParams = {\n                popupName,\n                popupWindowAttributes: request.popupWindowAttributes || {},\n                popupWindowParent: request.popupWindowParent ?? window,\n            };\n\n            this.performanceClient.addFields(\n                { isAsyncPopup: this.config.system.asyncPopups },\n                this.correlationId\n            );\n\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n            if (this.config.system.asyncPopups) {\n                this.logger.verbose(\"asyncPopups set to true, acquiring token\");\n                // Passes on popup position and dimensions if in request\n                return this.acquireTokenPopupAsync(\n                    request,\n                    popupParams,\n                    pkceCodes\n                );\n            } else {\n                // asyncPopups flag is set to false. Opens popup before acquiring token.\n                this.logger.verbose(\n                    \"asyncPopup set to false, opening popup before acquiring token\"\n                );\n                popupParams.popup = this.openSizedPopup(\n                    \"about:blank\",\n                    popupParams\n                );\n                return this.acquireTokenPopupAsync(\n                    request,\n                    popupParams,\n                    pkceCodes\n                );\n            }\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }\n\n    /**\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\n     * @param logoutRequest\n     */\n    logout(logoutRequest?: EndSessionPopupRequest): Promise<void> {\n        try {\n            this.logger.verbose(\"logoutPopup called\");\n            const validLogoutRequest =\n                this.initializeLogoutRequest(logoutRequest);\n            const popupParams: PopupParams = {\n                popupName: this.generateLogoutPopupName(validLogoutRequest),\n                popupWindowAttributes:\n                    logoutRequest?.popupWindowAttributes || {},\n                popupWindowParent: logoutRequest?.popupWindowParent ?? window,\n            };\n            const authority = logoutRequest && logoutRequest.authority;\n            const mainWindowRedirectUri =\n                logoutRequest && logoutRequest.mainWindowRedirectUri;\n\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n            if (this.config.system.asyncPopups) {\n                this.logger.verbose(\"asyncPopups set to true\");\n                // Passes on popup position and dimensions if in request\n                return this.logoutPopupAsync(\n                    validLogoutRequest,\n                    popupParams,\n                    authority,\n                    mainWindowRedirectUri\n                );\n            } else {\n                // asyncPopups flag is set to false. Opens popup before logging out.\n                this.logger.verbose(\"asyncPopup set to false, opening popup\");\n                popupParams.popup = this.openSizedPopup(\n                    \"about:blank\",\n                    popupParams\n                );\n                return this.logoutPopupAsync(\n                    validLogoutRequest,\n                    popupParams,\n                    authority,\n                    mainWindowRedirectUri\n                );\n            }\n        } catch (e) {\n            // Since this function is synchronous we need to reject\n            return Promise.reject(e);\n        }\n    }\n\n    /**\n     * Helper which obtains an access_token for your API via opening a popup window in the user's browser\n     * @param request\n     * @param popupParams\n     * @param pkceCodes\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    protected async acquireTokenPopupAsync(\n        request: PopupRequest,\n        popupParams: PopupParams,\n        pkceCodes?: PkceCodes\n    ): Promise<AuthenticationResult> {\n        this.logger.verbose(\"acquireTokenPopupAsync called\");\n\n        const validRequest = await invokeAsync(\n            this.initializeAuthorizationRequest.bind(this),\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(request, InteractionType.Popup);\n\n        /*\n         * Skip pre-connect for async popups to reduce time between user interaction and popup window creation to avoid\n         * popup from being blocked by browsers with shorter popup timers\n         */\n        if (popupParams.popup) {\n            BrowserUtils.preconnect(validRequest.authority);\n        }\n\n        const isPlatformBroker = isPlatformAuthAllowed(\n            this.config,\n            this.logger,\n            this.platformAuthProvider,\n            request.authenticationScheme\n        );\n        validRequest.platformBroker = isPlatformBroker;\n\n        if (this.config.auth.protocolMode === ProtocolMode.EAR) {\n            return this.executeEarFlow(validRequest, popupParams);\n        } else {\n            return this.executeCodeFlow(validRequest, popupParams, pkceCodes);\n        }\n    }\n\n    /**\n     * Executes auth code + PKCE flow\n     * @param request\n     * @param popupParams\n     * @param pkceCodes\n     * @returns\n     */\n    async executeCodeFlow(\n        request: CommonAuthorizationUrlRequest,\n        popupParams: PopupParams,\n        pkceCodes?: PkceCodes\n    ): Promise<AuthenticationResult> {\n        const correlationId = request.correlationId;\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            ApiId.acquireTokenPopup\n        );\n\n        const pkce =\n            pkceCodes ||\n            (await invokeAsync(\n                generatePkceCodes,\n                PerformanceEvents.GeneratePkceCodes,\n                this.logger,\n                this.performanceClient,\n                correlationId\n            )(this.performanceClient, this.logger, correlationId));\n\n        const popupRequest = {\n            ...request,\n            codeChallenge: pkce.challenge,\n        };\n\n        try {\n            // Initialize the client\n            const authClient: AuthorizationCodeClient = await invokeAsync(\n                this.createAuthCodeClient.bind(this),\n                PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n                this.logger,\n                this.performanceClient,\n                correlationId\n            )({\n                serverTelemetryManager,\n                requestAuthority: popupRequest.authority,\n                requestAzureCloudOptions: popupRequest.azureCloudOptions,\n                requestExtraQueryParameters: popupRequest.extraQueryParameters,\n                account: popupRequest.account,\n            });\n\n            // Create acquire token url.\n            const navigateUrl = await invokeAsync(\n                Authorize.getAuthCodeRequestUrl,\n                PerformanceEvents.GetAuthCodeUrl,\n                this.logger,\n                this.performanceClient,\n                correlationId\n            )(\n                this.config,\n                authClient.authority,\n                popupRequest,\n                this.logger,\n                this.performanceClient\n            );\n\n            // Show the UI once the url has been created. Get the window handle for the popup.\n            const popupWindow: Window = this.initiateAuthRequest(\n                navigateUrl,\n                popupParams\n            );\n            this.eventHandler.emitEvent(\n                EventType.POPUP_OPENED,\n                InteractionType.Popup,\n                { popupWindow },\n                null\n            );\n\n            // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n            const responseString = await this.monitorPopupForHash(\n                popupWindow,\n                popupParams.popupWindowParent\n            );\n\n            const serverParams = invoke(\n                ResponseHandler.deserializeResponse,\n                PerformanceEvents.DeserializeResponse,\n                this.logger,\n                this.performanceClient,\n                this.correlationId\n            )(\n                responseString,\n                this.config.auth.OIDCOptions.serverResponseType,\n                this.logger\n            );\n\n            return await invokeAsync(\n                Authorize.handleResponseCode,\n                PerformanceEvents.HandleResponseCode,\n                this.logger,\n                this.performanceClient,\n                correlationId\n            )(\n                request,\n                serverParams,\n                pkce.verifier,\n                ApiId.acquireTokenPopup,\n                this.config,\n                authClient,\n                this.browserStorage,\n                this.nativeStorage,\n                this.eventHandler,\n                this.logger,\n                this.performanceClient,\n                this.platformAuthProvider\n            );\n        } catch (e) {\n            // Close the synchronous popup if an error is thrown before the window unload event is registered\n            popupParams.popup?.close();\n\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            throw e;\n        }\n    }\n\n    /**\n     * Executes EAR flow\n     * @param request\n     */\n    async executeEarFlow(\n        request: CommonAuthorizationUrlRequest,\n        popupParams: PopupParams\n    ): Promise<AuthenticationResult> {\n        const correlationId = request.correlationId;\n        // Get the frame handle for the silent request\n        const discoveredAuthority = await invokeAsync(\n            this.getDiscoveredAuthority.bind(this),\n            PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )({\n            requestAuthority: request.authority,\n            requestAzureCloudOptions: request.azureCloudOptions,\n            requestExtraQueryParameters: request.extraQueryParameters,\n            account: request.account,\n        });\n\n        const earJwk = await invokeAsync(\n            generateEarKey,\n            PerformanceEvents.GenerateEarKey,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )();\n        const popupRequest = {\n            ...request,\n            earJwk: earJwk,\n        };\n        const popupWindow =\n            popupParams.popup || this.openPopup(\"about:blank\", popupParams);\n\n        const form = await Authorize.getEARForm(\n            popupWindow.document,\n            this.config,\n            discoveredAuthority,\n            popupRequest,\n            this.logger,\n            this.performanceClient\n        );\n        form.submit();\n\n        // Monitor the popup for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n        const responseString = await invokeAsync(\n            this.monitorPopupForHash.bind(this),\n            PerformanceEvents.SilentHandlerMonitorIframeForHash,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )(popupWindow, popupParams.popupWindowParent);\n\n        const serverParams = invoke(\n            ResponseHandler.deserializeResponse,\n            PerformanceEvents.DeserializeResponse,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(\n            responseString,\n            this.config.auth.OIDCOptions.serverResponseType,\n            this.logger\n        );\n\n        return invokeAsync(\n            Authorize.handleResponseEAR,\n            PerformanceEvents.HandleResponseEar,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )(\n            popupRequest,\n            serverParams,\n            ApiId.acquireTokenPopup,\n            this.config,\n            discoveredAuthority,\n            this.browserStorage,\n            this.nativeStorage,\n            this.eventHandler,\n            this.logger,\n            this.performanceClient,\n            this.platformAuthProvider\n        );\n    }\n\n    /**\n     *\n     * @param validRequest\n     * @param popupName\n     * @param requestAuthority\n     * @param popup\n     * @param mainWindowRedirectUri\n     * @param popupWindowAttributes\n     */\n    protected async logoutPopupAsync(\n        validRequest: CommonEndSessionRequest,\n        popupParams: PopupParams,\n        requestAuthority?: string,\n        mainWindowRedirectUri?: string\n    ): Promise<void> {\n        this.logger.verbose(\"logoutPopupAsync called\");\n        this.eventHandler.emitEvent(\n            EventType.LOGOUT_START,\n            InteractionType.Popup,\n            validRequest\n        );\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            ApiId.logoutPopup\n        );\n\n        try {\n            // Clear cache on logout\n            await this.clearCacheOnLogout(validRequest.account);\n\n            // Initialize the client\n            const authClient = await invokeAsync(\n                this.createAuthCodeClient.bind(this),\n                PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n                this.logger,\n                this.performanceClient,\n                this.correlationId\n            )({\n                serverTelemetryManager,\n                requestAuthority: requestAuthority,\n                account: validRequest.account || undefined,\n            });\n\n            try {\n                authClient.authority.endSessionEndpoint;\n            } catch {\n                if (\n                    validRequest.account?.homeAccountId &&\n                    validRequest.postLogoutRedirectUri &&\n                    authClient.authority.protocolMode === ProtocolMode.OIDC\n                ) {\n                    void this.browserStorage.removeAccount(\n                        validRequest.account?.homeAccountId\n                    );\n\n                    this.eventHandler.emitEvent(\n                        EventType.LOGOUT_SUCCESS,\n                        InteractionType.Popup,\n                        validRequest\n                    );\n\n                    if (mainWindowRedirectUri) {\n                        const navigationOptions: NavigationOptions = {\n                            apiId: ApiId.logoutPopup,\n                            timeout:\n                                this.config.system.redirectNavigationTimeout,\n                            noHistory: false,\n                        };\n                        const absoluteUrl = UrlString.getAbsoluteUrl(\n                            mainWindowRedirectUri,\n                            BrowserUtils.getCurrentUri()\n                        );\n                        await this.navigationClient.navigateInternal(\n                            absoluteUrl,\n                            navigationOptions\n                        );\n                    }\n\n                    popupParams.popup?.close();\n\n                    return;\n                }\n            }\n\n            // Create logout string and navigate user window to logout.\n            const logoutUri: string = authClient.getLogoutUri(validRequest);\n\n            this.eventHandler.emitEvent(\n                EventType.LOGOUT_SUCCESS,\n                InteractionType.Popup,\n                validRequest\n            );\n\n            // Open the popup window to requestUrl.\n            const popupWindow = this.openPopup(logoutUri, popupParams);\n            this.eventHandler.emitEvent(\n                EventType.POPUP_OPENED,\n                InteractionType.Popup,\n                { popupWindow },\n                null\n            );\n\n            await this.monitorPopupForHash(\n                popupWindow,\n                popupParams.popupWindowParent\n            ).catch(() => {\n                // Swallow any errors related to monitoring the window. Server logout is best effort\n            });\n\n            if (mainWindowRedirectUri) {\n                const navigationOptions: NavigationOptions = {\n                    apiId: ApiId.logoutPopup,\n                    timeout: this.config.system.redirectNavigationTimeout,\n                    noHistory: false,\n                };\n                const absoluteUrl = UrlString.getAbsoluteUrl(\n                    mainWindowRedirectUri,\n                    BrowserUtils.getCurrentUri()\n                );\n\n                this.logger.verbose(\n                    \"Redirecting main window to url specified in the request\"\n                );\n                this.logger.verbosePii(\n                    `Redirecting main window to: ${absoluteUrl}`\n                );\n                await this.navigationClient.navigateInternal(\n                    absoluteUrl,\n                    navigationOptions\n                );\n            } else {\n                this.logger.verbose(\"No main window navigation requested\");\n            }\n        } catch (e) {\n            // Close the synchronous popup if an error is thrown before the window unload event is registered\n            popupParams.popup?.close();\n\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            this.eventHandler.emitEvent(\n                EventType.LOGOUT_FAILURE,\n                InteractionType.Popup,\n                null,\n                e as EventError\n            );\n            this.eventHandler.emitEvent(\n                EventType.LOGOUT_END,\n                InteractionType.Popup\n            );\n            throw e;\n        }\n\n        this.eventHandler.emitEvent(\n            EventType.LOGOUT_END,\n            InteractionType.Popup\n        );\n    }\n\n    /**\n     * Opens a popup window with given request Url.\n     * @param requestUrl\n     */\n    initiateAuthRequest(requestUrl: string, params: PopupParams): Window {\n        // Check that request url is not empty.\n        if (requestUrl) {\n            this.logger.infoPii(`Navigate to: ${requestUrl}`);\n            // Open the popup window to requestUrl.\n            return this.openPopup(requestUrl, params);\n        } else {\n            // Throw error if request URL is empty.\n            this.logger.error(\"Navigate url is empty\");\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.emptyNavigateUri\n            );\n        }\n    }\n\n    /**\n     * Monitors a window until it loads a url with the same origin.\n     * @param popupWindow - window that is being monitored\n     * @param timeout - timeout for processing hash once popup is redirected back to application\n     */\n    monitorPopupForHash(\n        popupWindow: Window,\n        popupWindowParent: Window\n    ): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            this.logger.verbose(\n                \"PopupHandler.monitorPopupForHash - polling started\"\n            );\n\n            const intervalId = setInterval(() => {\n                // Window is closed\n                if (popupWindow.closed) {\n                    this.logger.error(\n                        \"PopupHandler.monitorPopupForHash - window closed\"\n                    );\n                    clearInterval(intervalId);\n                    reject(\n                        createBrowserAuthError(\n                            BrowserAuthErrorCodes.userCancelled\n                        )\n                    );\n                    return;\n                }\n\n                let href = \"\";\n                try {\n                    /*\n                     * Will throw if cross origin,\n                     * which should be caught and ignored\n                     * since we need the interval to keep running while on STS UI.\n                     */\n                    href = popupWindow.location.href;\n                } catch (e) {}\n\n                // Don't process blank pages or cross domain\n                if (!href || href === \"about:blank\") {\n                    return;\n                }\n                clearInterval(intervalId);\n\n                let responseString = \"\";\n                const responseType =\n                    this.config.auth.OIDCOptions.serverResponseType;\n                if (popupWindow) {\n                    if (responseType === ServerResponseType.QUERY) {\n                        responseString = popupWindow.location.search;\n                    } else {\n                        responseString = popupWindow.location.hash;\n                    }\n                }\n\n                this.logger.verbose(\n                    \"PopupHandler.monitorPopupForHash - popup window is on same origin as caller\"\n                );\n\n                resolve(responseString);\n            }, this.config.system.pollIntervalMilliseconds);\n        }).finally(() => {\n            this.cleanPopup(popupWindow, popupWindowParent);\n        });\n    }\n\n    /**\n     * @hidden\n     *\n     * Configures popup window for login.\n     *\n     * @param urlNavigate\n     * @param title\n     * @param popUpWidth\n     * @param popUpHeight\n     * @param popupWindowAttributes\n     * @ignore\n     * @hidden\n     */\n    openPopup(urlNavigate: string, popupParams: PopupParams): Window {\n        try {\n            let popupWindow;\n            // Popup window passed in, setting url to navigate to\n            if (popupParams.popup) {\n                popupWindow = popupParams.popup;\n                this.logger.verbosePii(\n                    `Navigating popup window to: ${urlNavigate}`\n                );\n                popupWindow.location.assign(urlNavigate);\n            } else if (typeof popupParams.popup === \"undefined\") {\n                // Popup will be undefined if it was not passed in\n                this.logger.verbosePii(\n                    `Opening popup window to: ${urlNavigate}`\n                );\n                popupWindow = this.openSizedPopup(urlNavigate, popupParams);\n            }\n\n            // Popup will be null if popups are blocked\n            if (!popupWindow) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.emptyWindowError\n                );\n            }\n            if (popupWindow.focus) {\n                popupWindow.focus();\n            }\n            this.currentWindow = popupWindow;\n            popupParams.popupWindowParent.addEventListener(\n                \"beforeunload\",\n                this.unloadWindow\n            );\n\n            return popupWindow;\n        } catch (e) {\n            this.logger.error(\n                \"error opening popup \" + (e as AuthError).message\n            );\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.popupWindowError\n            );\n        }\n    }\n\n    /**\n     * Helper function to set popup window dimensions and position\n     * @param urlNavigate\n     * @param popupName\n     * @param popupWindowAttributes\n     * @returns\n     */\n    openSizedPopup(\n        urlNavigate: string,\n        { popupName, popupWindowAttributes, popupWindowParent }: PopupParams\n    ): Window | null {\n        /**\n         * adding winLeft and winTop to account for dual monitor\n         * using screenLeft and screenTop for IE8 and earlier\n         */\n        const winLeft = popupWindowParent.screenLeft\n            ? popupWindowParent.screenLeft\n            : popupWindowParent.screenX;\n        const winTop = popupWindowParent.screenTop\n            ? popupWindowParent.screenTop\n            : popupWindowParent.screenY;\n        /**\n         * window.innerWidth displays browser window\"s height and width excluding toolbars\n         * using document.documentElement.clientWidth for IE8 and earlier\n         */\n        const winWidth =\n            popupWindowParent.innerWidth ||\n            document.documentElement.clientWidth ||\n            document.body.clientWidth;\n        const winHeight =\n            popupWindowParent.innerHeight ||\n            document.documentElement.clientHeight ||\n            document.body.clientHeight;\n\n        let width = popupWindowAttributes.popupSize?.width;\n        let height = popupWindowAttributes.popupSize?.height;\n        let top = popupWindowAttributes.popupPosition?.top;\n        let left = popupWindowAttributes.popupPosition?.left;\n\n        if (!width || width < 0 || width > winWidth) {\n            this.logger.verbose(\n                \"Default popup window width used. Window width not configured or invalid.\"\n            );\n            width = BrowserConstants.POPUP_WIDTH;\n        }\n\n        if (!height || height < 0 || height > winHeight) {\n            this.logger.verbose(\n                \"Default popup window height used. Window height not configured or invalid.\"\n            );\n            height = BrowserConstants.POPUP_HEIGHT;\n        }\n\n        if (!top || top < 0 || top > winHeight) {\n            this.logger.verbose(\n                \"Default popup window top position used. Window top not configured or invalid.\"\n            );\n            top = Math.max(\n                0,\n                winHeight / 2 - BrowserConstants.POPUP_HEIGHT / 2 + winTop\n            );\n        }\n\n        if (!left || left < 0 || left > winWidth) {\n            this.logger.verbose(\n                \"Default popup window left position used. Window left not configured or invalid.\"\n            );\n            left = Math.max(\n                0,\n                winWidth / 2 - BrowserConstants.POPUP_WIDTH / 2 + winLeft\n            );\n        }\n\n        return popupWindowParent.open(\n            urlNavigate,\n            popupName,\n            `width=${width}, height=${height}, top=${top}, left=${left}, scrollbars=yes`\n        );\n    }\n\n    /**\n     * Event callback to unload main window.\n     */\n    unloadWindow(e: Event): void {\n        if (this.currentWindow) {\n            this.currentWindow.close();\n        }\n        // Guarantees browser unload will happen, so no other errors will be thrown.\n        e.preventDefault();\n    }\n\n    /**\n     * Closes popup, removes any state vars created during popup calls.\n     * @param popupWindow\n     */\n    cleanPopup(popupWindow: Window, popupWindowParent: Window): void {\n        // Close window.\n        popupWindow.close();\n\n        // Remove window unload function\n        popupWindowParent.removeEventListener(\n            \"beforeunload\",\n            this.unloadWindow\n        );\n    }\n\n    /**\n     * Generates the name for the popup based on the client id and request\n     * @param clientId\n     * @param request\n     */\n    generatePopupName(scopes: Array<string>, authority: string): string {\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${\n            this.config.auth.clientId\n        }.${scopes.join(\"-\")}.${authority}.${this.correlationId}`;\n    }\n\n    /**\n     * Generates the name for the popup based on the client id and request for logouts\n     * @param clientId\n     * @param request\n     */\n    generateLogoutPopupName(request: CommonEndSessionRequest): string {\n        const homeAccountId = request.account && request.account.homeAccountId;\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${homeAccountId}.${this.correlationId}`;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}