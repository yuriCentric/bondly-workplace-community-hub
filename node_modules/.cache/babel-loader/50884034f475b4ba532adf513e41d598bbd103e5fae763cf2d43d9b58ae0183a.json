{"ast":null,"code":"/*! @azure/msal-browser v4.13.1 2025-06-10 */\n'use strict';\n\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { invalidBase64String } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Class which exposes APIs to decode base64 strings to plaintext. See here for implementation details:\r\n * https://developer.mozilla.org/en-US/docs/Glossary/Base64#the_unicode_problem\r\n */\n/**\r\n * Returns a URL-safe plaintext decoded string from b64 encoded input.\r\n * @param input\r\n */\nfunction base64Decode(input) {\n  return new TextDecoder().decode(base64DecToArr(input));\n}\n/**\r\n * Decodes base64 into Uint8Array\r\n * @param base64String\r\n */\nfunction base64DecToArr(base64String) {\n  let encodedString = base64String.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  switch (encodedString.length % 4) {\n    case 0:\n      break;\n    case 2:\n      encodedString += \"==\";\n      break;\n    case 3:\n      encodedString += \"=\";\n      break;\n    default:\n      throw createBrowserAuthError(invalidBase64String);\n  }\n  const binString = atob(encodedString);\n  return Uint8Array.from(binString, m => m.codePointAt(0) || 0);\n}\nexport { base64DecToArr, base64Decode };","map":{"version":3,"names":["base64Decode","input","TextDecoder","decode","base64DecToArr","base64String","encodedString","replace","length","createBrowserAuthError","invalidBase64String","binString","atob","Uint8Array","from","m","codePointAt"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-browser/src/encode/Base64Decode.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    BrowserAuthErrorCodes,\n    createBrowserAuthError,\n} from \"../error/BrowserAuthError.js\";\n\n/**\n * Class which exposes APIs to decode base64 strings to plaintext. See here for implementation details:\n * https://developer.mozilla.org/en-US/docs/Glossary/Base64#the_unicode_problem\n */\n\n/**\n * Returns a URL-safe plaintext decoded string from b64 encoded input.\n * @param input\n */\nexport function base64Decode(input: string): string {\n    return new TextDecoder().decode(base64DecToArr(input));\n}\n\n/**\n * Decodes base64 into Uint8Array\n * @param base64String\n */\nexport function base64DecToArr(base64String: string): Uint8Array {\n    let encodedString = base64String.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (encodedString.length % 4) {\n        case 0:\n            break;\n        case 2:\n            encodedString += \"==\";\n            break;\n        case 3:\n            encodedString += \"=\";\n            break;\n        default:\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.invalidBase64String\n            );\n    }\n    const binString = atob(encodedString);\n    return Uint8Array.from(binString, (m) => m.codePointAt(0) || 0);\n}\n"],"mappings":";;;;;;AAAA;;;AAGG;AAOH;;;AAGG;AAEH;;;AAGG;AACG,SAAUA,YAAYA,CAACC,KAAa;EACtC,OAAO,IAAIC,WAAW,EAAE,CAACC,MAAM,CAACC,cAAc,CAACH,KAAK,CAAC,CAAC;AAC1D;AAEA;;;AAGG;AACG,SAAUG,cAAcA,CAACC,YAAoB;EAC/C,IAAIC,aAAa,GAAGD,YAAY,CAACE,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EACtE,QAAQD,aAAa,CAACE,MAAM,GAAG,CAAC;IAC5B,KAAK,CAAC;MACF;IACJ,KAAK,CAAC;MACFF,aAAa,IAAI,IAAI;MACrB;IACJ,KAAK,CAAC;MACFA,aAAa,IAAI,GAAG;MACpB;IACJ;MACI,MAAMG,sBAAsB,CACxBC,mBAAyC,CAC5C;EACR;EACD,MAAMC,SAAS,GAAGC,IAAI,CAACN,aAAa,CAAC;EACrC,OAAOO,UAAU,CAACC,IAAI,CAACH,SAAS,EAAGI,CAAC,IAAKA,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACnE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}