{"ast":null,"code":"/*! @azure/msal-browser v4.13.1 2025-06-10 */\n'use strict';\n\nimport { CryptoOps } from './CryptoOps.mjs';\nimport { Logger, PopTokenGenerator } from '@azure/msal-common/browser';\nimport { name, version } from '../packageMetadata.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass SignedHttpRequest {\n  constructor(shrParameters, shrOptions) {\n    const loggerOptions = shrOptions && shrOptions.loggerOptions || {};\n    this.logger = new Logger(loggerOptions, name, version);\n    this.cryptoOps = new CryptoOps(this.logger);\n    this.popTokenGenerator = new PopTokenGenerator(this.cryptoOps);\n    this.shrParameters = shrParameters;\n  }\n  /**\r\n   * Generates and caches a keypair for the given request options.\r\n   * @returns Public key digest, which should be sent to the token issuer.\r\n   */\n  async generatePublicKeyThumbprint() {\n    const {\n      kid\n    } = await this.popTokenGenerator.generateKid(this.shrParameters);\n    return kid;\n  }\n  /**\r\n   * Generates a signed http request for the given payload with the given key.\r\n   * @param payload Payload to sign (e.g. access token)\r\n   * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\r\n   * @param claims Additional claims to include/override in the signed JWT\r\n   * @returns Pop token signed with the corresponding private key\r\n   */\n  async signRequest(payload, publicKeyThumbprint, claims) {\n    return this.popTokenGenerator.signPayload(payload, publicKeyThumbprint, this.shrParameters, claims);\n  }\n  /**\r\n   * Removes cached keys from browser for given public key thumbprint\r\n   * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\r\n   * @returns If keys are properly deleted\r\n   */\n  async removeKeys(publicKeyThumbprint) {\n    return this.cryptoOps.removeTokenBindingKey(publicKeyThumbprint);\n  }\n}\nexport { SignedHttpRequest };","map":{"version":3,"names":["SignedHttpRequest","constructor","shrParameters","shrOptions","loggerOptions","logger","Logger","name","version","cryptoOps","CryptoOps","popTokenGenerator","PopTokenGenerator","generatePublicKeyThumbprint","kid","generateKid","signRequest","payload","publicKeyThumbprint","claims","signPayload","removeKeys","removeTokenBindingKey"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-browser/src/crypto/SignedHttpRequest.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CryptoOps } from \"./CryptoOps.js\";\nimport {\n    Logger,\n    LoggerOptions,\n    PopTokenGenerator,\n    SignedHttpRequestParameters,\n} from \"@azure/msal-common/browser\";\nimport { version, name } from \"../packageMetadata.js\";\n\nexport type SignedHttpRequestOptions = {\n    loggerOptions: LoggerOptions;\n};\n\nexport class SignedHttpRequest {\n    private popTokenGenerator: PopTokenGenerator;\n    private cryptoOps: CryptoOps;\n    private shrParameters: SignedHttpRequestParameters;\n    private logger: Logger;\n\n    constructor(\n        shrParameters: SignedHttpRequestParameters,\n        shrOptions?: SignedHttpRequestOptions\n    ) {\n        const loggerOptions = (shrOptions && shrOptions.loggerOptions) || {};\n        this.logger = new Logger(loggerOptions, name, version);\n        this.cryptoOps = new CryptoOps(this.logger);\n        this.popTokenGenerator = new PopTokenGenerator(this.cryptoOps);\n        this.shrParameters = shrParameters;\n    }\n\n    /**\n     * Generates and caches a keypair for the given request options.\n     * @returns Public key digest, which should be sent to the token issuer.\n     */\n    async generatePublicKeyThumbprint(): Promise<string> {\n        const { kid } = await this.popTokenGenerator.generateKid(\n            this.shrParameters\n        );\n\n        return kid;\n    }\n\n    /**\n     * Generates a signed http request for the given payload with the given key.\n     * @param payload Payload to sign (e.g. access token)\n     * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\n     * @param claims Additional claims to include/override in the signed JWT\n     * @returns Pop token signed with the corresponding private key\n     */\n    async signRequest(\n        payload: string,\n        publicKeyThumbprint: string,\n        claims?: object\n    ): Promise<string> {\n        return this.popTokenGenerator.signPayload(\n            payload,\n            publicKeyThumbprint,\n            this.shrParameters,\n            claims\n        );\n    }\n\n    /**\n     * Removes cached keys from browser for given public key thumbprint\n     * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\n     * @returns If keys are properly deleted\n     */\n    async removeKeys(publicKeyThumbprint: string): Promise<boolean> {\n        return this.cryptoOps.removeTokenBindingKey(publicKeyThumbprint);\n    }\n}\n"],"mappings":";;;;;;;AAAA;;;AAGG;MAeUA,iBAAiB;EAM1BC,WACIA,CAAAC,aAA0C,EAC1CC,UAAqC;IAErC,MAAMC,aAAa,GAAID,UAAU,IAAIA,UAAU,CAACC,aAAa,IAAK,EAAE;IACpE,IAAI,CAACC,MAAM,GAAG,IAAIC,MAAM,CAACF,aAAa,EAAEG,IAAI,EAAEC,OAAO,CAAC;IACtD,IAAI,CAACC,SAAS,GAAG,IAAIC,SAAS,CAAC,IAAI,CAACL,MAAM,CAAC;IAC3C,IAAI,CAACM,iBAAiB,GAAG,IAAIC,iBAAiB,CAAC,IAAI,CAACH,SAAS,CAAC;IAC9D,IAAI,CAACP,aAAa,GAAGA,aAAa;;EAGtC;;;AAGG;EACH,MAAMW,2BAA2BA,CAAA;IAC7B,MAAM;MAAEC;IAAG,CAAE,GAAG,MAAM,IAAI,CAACH,iBAAiB,CAACI,WAAW,CACpD,IAAI,CAACb,aAAa,CACrB;IAED,OAAOY,GAAG;;EAGd;;;;;;AAMG;EACH,MAAME,WAAWA,CACbC,OAAe,EACfC,mBAA2B,EAC3BC,MAAe;IAEf,OAAO,IAAI,CAACR,iBAAiB,CAACS,WAAW,CACrCH,OAAO,EACPC,mBAAmB,EACnB,IAAI,CAAChB,aAAa,EAClBiB,MAAM,CACT;;EAGL;;;;AAIG;EACH,MAAME,UAAUA,CAACH,mBAA2B;IACxC,OAAO,IAAI,CAACT,SAAS,CAACa,qBAAqB,CAACJ,mBAAmB,CAAC;;AAEvE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}