{"ast":null,"code":"/*! @azure/msal-browser v4.13.1 2025-06-10 */\n'use strict';\n\nimport { StaticCacheKeys } from '../utils/BrowserConstants.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Returns a list of cache keys for all known accounts\r\n * @param storage\r\n * @returns\r\n */\nfunction getAccountKeys(storage) {\n  const accountKeys = storage.getItem(StaticCacheKeys.ACCOUNT_KEYS);\n  if (accountKeys) {\n    return JSON.parse(accountKeys);\n  }\n  return [];\n}\n/**\r\n * Returns a list of cache keys for all known tokens\r\n * @param clientId\r\n * @param storage\r\n * @returns\r\n */\nfunction getTokenKeys(clientId, storage) {\n  const item = storage.getItem(`${StaticCacheKeys.TOKEN_KEYS}.${clientId}`);\n  if (item) {\n    const tokenKeys = JSON.parse(item);\n    if (tokenKeys && tokenKeys.hasOwnProperty(\"idToken\") && tokenKeys.hasOwnProperty(\"accessToken\") && tokenKeys.hasOwnProperty(\"refreshToken\")) {\n      return tokenKeys;\n    }\n  }\n  return {\n    idToken: [],\n    accessToken: [],\n    refreshToken: []\n  };\n}\nexport { getAccountKeys, getTokenKeys };","map":{"version":3,"names":["getAccountKeys","storage","accountKeys","getItem","StaticCacheKeys","ACCOUNT_KEYS","JSON","parse","getTokenKeys","clientId","item","TOKEN_KEYS","tokenKeys","hasOwnProperty","idToken","accessToken","refreshToken"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-browser/src/cache/CacheHelpers.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { TokenKeys } from \"@azure/msal-common/browser\";\nimport { StaticCacheKeys } from \"../utils/BrowserConstants.js\";\nimport { IWindowStorage } from \"./IWindowStorage.js\";\n\n/**\n * Returns a list of cache keys for all known accounts\n * @param storage\n * @returns\n */\nexport function getAccountKeys(storage: IWindowStorage<string>): Array<string> {\n    const accountKeys = storage.getItem(StaticCacheKeys.ACCOUNT_KEYS);\n    if (accountKeys) {\n        return JSON.parse(accountKeys);\n    }\n\n    return [];\n}\n\n/**\n * Returns a list of cache keys for all known tokens\n * @param clientId\n * @param storage\n * @returns\n */\nexport function getTokenKeys(\n    clientId: string,\n    storage: IWindowStorage<string>\n): TokenKeys {\n    const item = storage.getItem(`${StaticCacheKeys.TOKEN_KEYS}.${clientId}`);\n    if (item) {\n        const tokenKeys = JSON.parse(item);\n        if (\n            tokenKeys &&\n            tokenKeys.hasOwnProperty(\"idToken\") &&\n            tokenKeys.hasOwnProperty(\"accessToken\") &&\n            tokenKeys.hasOwnProperty(\"refreshToken\")\n        ) {\n            return tokenKeys as TokenKeys;\n        }\n    }\n\n    return {\n        idToken: [],\n        accessToken: [],\n        refreshToken: [],\n    };\n}\n"],"mappings":";;;;;AAAA;;;AAGG;AAMH;;;;AAIG;AACG,SAAUA,cAAcA,CAACC,OAA+B;EAC1D,MAAMC,WAAW,GAAGD,OAAO,CAACE,OAAO,CAACC,eAAe,CAACC,YAAY,CAAC;EACjE,IAAIH,WAAW,EAAE;IACb,OAAOI,IAAI,CAACC,KAAK,CAACL,WAAW,CAAC;EACjC;EAED,OAAO,EAAE;AACb;AAEA;;;;;AAKG;AACa,SAAAM,YAAYA,CACxBC,QAAgB,EAChBR,OAA+B;EAE/B,MAAMS,IAAI,GAAGT,OAAO,CAACE,OAAO,CAAC,GAAGC,eAAe,CAACO,UAAU,IAAIF,QAAQ,EAAE,CAAC;EACzE,IAAIC,IAAI,EAAE;IACN,MAAME,SAAS,GAAGN,IAAI,CAACC,KAAK,CAACG,IAAI,CAAC;IAClC,IACIE,SAAS,IACTA,SAAS,CAACC,cAAc,CAAC,SAAS,CAAC,IACnCD,SAAS,CAACC,cAAc,CAAC,aAAa,CAAC,IACvCD,SAAS,CAACC,cAAc,CAAC,cAAc,CAAC,EAC1C;MACE,OAAOD,SAAsB;IAChC;EACJ;EAED,OAAO;IACHE,OAAO,EAAE,EAAE;IACXC,WAAW,EAAE,EAAE;IACfC,YAAY,EAAE;GACjB;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}