{"ast":null,"code":"/*! @azure/msal-browser v4.13.1 2025-06-10 */\n'use strict';\n\nimport { PerformanceEvents, invoke, invokeAsync } from '@azure/msal-common/browser';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { urlEncodeArr } from '../encode/Base64Encode.mjs';\nimport { getRandomValues, sha256Digest } from './BrowserCrypto.mjs';\nimport { pkceNotCreated } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n// Constant byte array length\nconst RANDOM_BYTE_ARR_LENGTH = 32;\n/**\r\n * This file defines APIs to generate PKCE codes and code verifiers.\r\n */\n/**\r\n * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\r\n */\nasync function generatePkceCodes(performanceClient, logger, correlationId) {\n  performanceClient.addQueueMeasurement(PerformanceEvents.GeneratePkceCodes, correlationId);\n  const codeVerifier = invoke(generateCodeVerifier, PerformanceEvents.GenerateCodeVerifier, logger, performanceClient, correlationId)(performanceClient, logger, correlationId);\n  const codeChallenge = await invokeAsync(generateCodeChallengeFromVerifier, PerformanceEvents.GenerateCodeChallengeFromVerifier, logger, performanceClient, correlationId)(codeVerifier, performanceClient, logger, correlationId);\n  return {\n    verifier: codeVerifier,\n    challenge: codeChallenge\n  };\n}\n/**\r\n * Generates a random 32 byte buffer and returns the base64\r\n * encoded string to be used as a PKCE Code Verifier\r\n */\nfunction generateCodeVerifier(performanceClient, logger, correlationId) {\n  try {\n    // Generate random values as utf-8\n    const buffer = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\n    invoke(getRandomValues, PerformanceEvents.GetRandomValues, logger, performanceClient, correlationId)(buffer);\n    // encode verifier as base64\n    const pkceCodeVerifierB64 = urlEncodeArr(buffer);\n    return pkceCodeVerifierB64;\n  } catch (e) {\n    throw createBrowserAuthError(pkceNotCreated);\n  }\n}\n/**\r\n * Creates a base64 encoded PKCE Code Challenge string from the\r\n * hash created from the PKCE Code Verifier supplied\r\n */\nasync function generateCodeChallengeFromVerifier(pkceCodeVerifier, performanceClient, logger, correlationId) {\n  performanceClient.addQueueMeasurement(PerformanceEvents.GenerateCodeChallengeFromVerifier, correlationId);\n  try {\n    // hashed verifier\n    const pkceHashedCodeVerifier = await invokeAsync(sha256Digest, PerformanceEvents.Sha256Digest, logger, performanceClient, correlationId)(pkceCodeVerifier, performanceClient, correlationId);\n    // encode hash as base64\n    return urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier));\n  } catch (e) {\n    throw createBrowserAuthError(pkceNotCreated);\n  }\n}\nexport { generatePkceCodes };","map":{"version":3,"names":["RANDOM_BYTE_ARR_LENGTH","generatePkceCodes","performanceClient","logger","correlationId","addQueueMeasurement","PerformanceEvents","GeneratePkceCodes","codeVerifier","invoke","generateCodeVerifier","GenerateCodeVerifier","codeChallenge","invokeAsync","generateCodeChallengeFromVerifier","GenerateCodeChallengeFromVerifier","verifier","challenge","buffer","Uint8Array","getRandomValues","GetRandomValues","pkceCodeVerifierB64","urlEncodeArr","e","createBrowserAuthError","pkceNotCreated","pkceCodeVerifier","pkceHashedCodeVerifier","sha256Digest","Sha256Digest"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-browser/src/crypto/PkceGenerator.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    IPerformanceClient,\n    Logger,\n    PerformanceEvents,\n    PkceCodes,\n    invoke,\n    invokeAsync,\n} from \"@azure/msal-common/browser\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError.js\";\nimport { urlEncodeArr } from \"../encode/Base64Encode.js\";\nimport { getRandomValues, sha256Digest } from \"./BrowserCrypto.js\";\n\n// Constant byte array length\nconst RANDOM_BYTE_ARR_LENGTH = 32;\n\n/**\n * This file defines APIs to generate PKCE codes and code verifiers.\n */\n\n/**\n * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\n */\nexport async function generatePkceCodes(\n    performanceClient: IPerformanceClient,\n    logger: Logger,\n    correlationId: string\n): Promise<PkceCodes> {\n    performanceClient.addQueueMeasurement(\n        PerformanceEvents.GeneratePkceCodes,\n        correlationId\n    );\n    const codeVerifier = invoke(\n        generateCodeVerifier,\n        PerformanceEvents.GenerateCodeVerifier,\n        logger,\n        performanceClient,\n        correlationId\n    )(performanceClient, logger, correlationId);\n    const codeChallenge = await invokeAsync(\n        generateCodeChallengeFromVerifier,\n        PerformanceEvents.GenerateCodeChallengeFromVerifier,\n        logger,\n        performanceClient,\n        correlationId\n    )(codeVerifier, performanceClient, logger, correlationId);\n    return {\n        verifier: codeVerifier,\n        challenge: codeChallenge,\n    };\n}\n\n/**\n * Generates a random 32 byte buffer and returns the base64\n * encoded string to be used as a PKCE Code Verifier\n */\nfunction generateCodeVerifier(\n    performanceClient: IPerformanceClient,\n    logger: Logger,\n    correlationId: string\n): string {\n    try {\n        // Generate random values as utf-8\n        const buffer: Uint8Array = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\n        invoke(\n            getRandomValues,\n            PerformanceEvents.GetRandomValues,\n            logger,\n            performanceClient,\n            correlationId\n        )(buffer);\n        // encode verifier as base64\n        const pkceCodeVerifierB64: string = urlEncodeArr(buffer);\n        return pkceCodeVerifierB64;\n    } catch (e) {\n        throw createBrowserAuthError(BrowserAuthErrorCodes.pkceNotCreated);\n    }\n}\n\n/**\n * Creates a base64 encoded PKCE Code Challenge string from the\n * hash created from the PKCE Code Verifier supplied\n */\nasync function generateCodeChallengeFromVerifier(\n    pkceCodeVerifier: string,\n    performanceClient: IPerformanceClient,\n    logger: Logger,\n    correlationId: string\n): Promise<string> {\n    performanceClient.addQueueMeasurement(\n        PerformanceEvents.GenerateCodeChallengeFromVerifier,\n        correlationId\n    );\n    try {\n        // hashed verifier\n        const pkceHashedCodeVerifier = await invokeAsync(\n            sha256Digest,\n            PerformanceEvents.Sha256Digest,\n            logger,\n            performanceClient,\n            correlationId\n        )(pkceCodeVerifier, performanceClient, correlationId);\n        // encode hash as base64\n        return urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier));\n    } catch (e) {\n        throw createBrowserAuthError(BrowserAuthErrorCodes.pkceNotCreated);\n    }\n}\n"],"mappings":";;;;;;;;;AAAA;;;AAGG;AAiBH;AACA,MAAMA,sBAAsB,GAAG,EAAE;AAEjC;;AAEG;AAEH;;AAEG;AACI,eAAeC,iBAAiBA,CACnCC,iBAAqC,EACrCC,MAAc,EACdC,aAAqB;EAErBF,iBAAiB,CAACG,mBAAmB,CACjCC,iBAAiB,CAACC,iBAAiB,EACnCH,aAAa,CAChB;EACD,MAAMI,YAAY,GAAGC,MAAM,CACvBC,oBAAoB,EACpBJ,iBAAiB,CAACK,oBAAoB,EACtCR,MAAM,EACND,iBAAiB,EACjBE,aAAa,CAChB,CAACF,iBAAiB,EAAEC,MAAM,EAAEC,aAAa,CAAC;EAC3C,MAAMQ,aAAa,GAAG,MAAMC,WAAW,CACnCC,iCAAiC,EACjCR,iBAAiB,CAACS,iCAAiC,EACnDZ,MAAM,EACND,iBAAiB,EACjBE,aAAa,CAChB,CAACI,YAAY,EAAEN,iBAAiB,EAAEC,MAAM,EAAEC,aAAa,CAAC;EACzD,OAAO;IACHY,QAAQ,EAAER,YAAY;IACtBS,SAAS,EAAEL;GACd;AACL;AAEA;;;AAGG;AACH,SAASF,oBAAoBA,CACzBR,iBAAqC,EACrCC,MAAc,EACdC,aAAqB;EAErB,IAAI;;IAEA,MAAMc,MAAM,GAAe,IAAIC,UAAU,CAACnB,sBAAsB,CAAC;IACjES,MAAM,CACFW,eAAe,EACfd,iBAAiB,CAACe,eAAe,EACjClB,MAAM,EACND,iBAAiB,EACjBE,aAAa,CAChB,CAACc,MAAM,CAAC;;IAET,MAAMI,mBAAmB,GAAWC,YAAY,CAACL,MAAM,CAAC;IACxD,OAAOI,mBAAmB;EAC7B,EAAC,OAAOE,CAAC,EAAE;IACR,MAAMC,sBAAsB,CAACC,cAAoC,CAAC;EACrE;AACL;AAEA;;;AAGG;AACH,eAAeZ,iCAAiCA,CAC5Ca,gBAAwB,EACxBzB,iBAAqC,EACrCC,MAAc,EACdC,aAAqB;EAErBF,iBAAiB,CAACG,mBAAmB,CACjCC,iBAAiB,CAACS,iCAAiC,EACnDX,aAAa,CAChB;EACD,IAAI;;IAEA,MAAMwB,sBAAsB,GAAG,MAAMf,WAAW,CAC5CgB,YAAY,EACZvB,iBAAiB,CAACwB,YAAY,EAC9B3B,MAAM,EACND,iBAAiB,EACjBE,aAAa,CAChB,CAACuB,gBAAgB,EAAEzB,iBAAiB,EAAEE,aAAa,CAAC;;IAErD,OAAOmB,YAAY,CAAC,IAAIJ,UAAU,CAACS,sBAAsB,CAAC,CAAC;EAC9D,EAAC,OAAOJ,CAAC,EAAE;IACR,MAAMC,sBAAsB,CAACC,cAAoC,CAAC;EACrE;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}