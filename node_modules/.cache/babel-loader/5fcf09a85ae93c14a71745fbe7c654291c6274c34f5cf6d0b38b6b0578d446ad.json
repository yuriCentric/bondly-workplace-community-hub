{"ast":null,"code":"/*! @azure/msal-common v15.7.0 2025-05-30 */\n'use strict';\n\nimport { createJoseHeaderError } from '../error/JoseHeaderError.mjs';\nimport { JsonWebTokenTypes } from '../utils/Constants.mjs';\nimport { missingKidError, missingAlgError } from '../error/JoseHeaderErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/** @internal */\nclass JoseHeader {\n  constructor(options) {\n    this.typ = options.typ;\n    this.alg = options.alg;\n    this.kid = options.kid;\n  }\n  /**\r\n   * Builds SignedHttpRequest formatted JOSE Header from the\r\n   * JOSE Header options provided or previously set on the object and returns\r\n   * the stringified header object.\r\n   * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\r\n   * @param shrHeaderOptions\r\n   * @returns\r\n   */\n  static getShrHeaderString(shrHeaderOptions) {\n    // KeyID is required on the SHR header\n    if (!shrHeaderOptions.kid) {\n      throw createJoseHeaderError(missingKidError);\n    }\n    // Alg is required on the SHR header\n    if (!shrHeaderOptions.alg) {\n      throw createJoseHeaderError(missingAlgError);\n    }\n    const shrHeader = new JoseHeader({\n      // Access Token PoP headers must have type pop, but the type header can be overriden for special cases\n      typ: shrHeaderOptions.typ || JsonWebTokenTypes.Pop,\n      kid: shrHeaderOptions.kid,\n      alg: shrHeaderOptions.alg\n    });\n    return JSON.stringify(shrHeader);\n  }\n}\nexport { JoseHeader };","map":{"version":3,"names":["JoseHeader","constructor","options","typ","alg","kid","getShrHeaderString","shrHeaderOptions","createJoseHeaderError","missingKidError","missingAlgError","shrHeader","JsonWebTokenTypes","Pop","JSON","stringify"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-common/src/crypto/JoseHeader.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    JoseHeaderErrorCodes,\n    createJoseHeaderError,\n} from \"../error/JoseHeaderError.js\";\nimport { JsonWebTokenTypes } from \"../utils/Constants.js\";\n\nexport type JoseHeaderOptions = {\n    typ?: JsonWebTokenTypes;\n    alg?: string;\n    kid?: string;\n};\n\n/** @internal */\nexport class JoseHeader {\n    public typ?: JsonWebTokenTypes;\n    public alg?: string;\n    public kid?: string;\n\n    constructor(options: JoseHeaderOptions) {\n        this.typ = options.typ;\n        this.alg = options.alg;\n        this.kid = options.kid;\n    }\n\n    /**\n     * Builds SignedHttpRequest formatted JOSE Header from the\n     * JOSE Header options provided or previously set on the object and returns\n     * the stringified header object.\n     * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\n     * @param shrHeaderOptions\n     * @returns\n     */\n    static getShrHeaderString(shrHeaderOptions: JoseHeaderOptions): string {\n        // KeyID is required on the SHR header\n        if (!shrHeaderOptions.kid) {\n            throw createJoseHeaderError(JoseHeaderErrorCodes.missingKidError);\n        }\n\n        // Alg is required on the SHR header\n        if (!shrHeaderOptions.alg) {\n            throw createJoseHeaderError(JoseHeaderErrorCodes.missingAlgError);\n        }\n\n        const shrHeader = new JoseHeader({\n            // Access Token PoP headers must have type pop, but the type header can be overriden for special cases\n            typ: shrHeaderOptions.typ || JsonWebTokenTypes.Pop,\n            kid: shrHeaderOptions.kid,\n            alg: shrHeaderOptions.alg,\n        });\n\n        return JSON.stringify(shrHeader);\n    }\n}\n"],"mappings":";;;;;;;AAAA;;;AAGG;AAcH;MACaA,UAAU;EAKnBC,YAAYC,OAA0B;IAClC,IAAI,CAACC,GAAG,GAAGD,OAAO,CAACC,GAAG;IACtB,IAAI,CAACC,GAAG,GAAGF,OAAO,CAACE,GAAG;IACtB,IAAI,CAACC,GAAG,GAAGH,OAAO,CAACG,GAAG;;EAG1B;;;;;;;AAOG;EACH,OAAOC,kBAAkBA,CAACC,gBAAmC;;IAEzD,IAAI,CAACA,gBAAgB,CAACF,GAAG,EAAE;MACvB,MAAMG,qBAAqB,CAACC,eAAoC,CAAC;IACpE;;IAGD,IAAI,CAACF,gBAAgB,CAACH,GAAG,EAAE;MACvB,MAAMI,qBAAqB,CAACE,eAAoC,CAAC;IACpE;IAED,MAAMC,SAAS,GAAG,IAAIX,UAAU,CAAC;;MAE7BG,GAAG,EAAEI,gBAAgB,CAACJ,GAAG,IAAIS,iBAAiB,CAACC,GAAG;MAClDR,GAAG,EAAEE,gBAAgB,CAACF,GAAG;MACzBD,GAAG,EAAEG,gBAAgB,CAACH;IACzB,EAAC;IAEF,OAAOU,IAAI,CAACC,SAAS,CAACJ,SAAS,CAAC;;AAEvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}