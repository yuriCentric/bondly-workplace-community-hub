{"ast":null,"code":"/*! @azure/msal-browser v4.13.1 2025-06-10 */\n'use strict';\n\nimport { EventType } from './EventType.mjs';\nimport { InteractionType, InteractionStatus } from '../utils/BrowserConstants.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass EventMessageUtils {\n  /**\r\n   * Gets interaction status from event message\r\n   * @param message\r\n   * @param currentStatus\r\n   */\n  static getInteractionStatusFromEvent(message, currentStatus) {\n    switch (message.eventType) {\n      case EventType.LOGIN_START:\n        return InteractionStatus.Login;\n      case EventType.SSO_SILENT_START:\n        return InteractionStatus.SsoSilent;\n      case EventType.ACQUIRE_TOKEN_START:\n        if (message.interactionType === InteractionType.Redirect || message.interactionType === InteractionType.Popup) {\n          return InteractionStatus.AcquireToken;\n        }\n        break;\n      case EventType.HANDLE_REDIRECT_START:\n        return InteractionStatus.HandleRedirect;\n      case EventType.LOGOUT_START:\n        return InteractionStatus.Logout;\n      case EventType.SSO_SILENT_SUCCESS:\n      case EventType.SSO_SILENT_FAILURE:\n        if (currentStatus && currentStatus !== InteractionStatus.SsoSilent) {\n          // Prevent this event from clearing any status other than ssoSilent\n          break;\n        }\n        return InteractionStatus.None;\n      case EventType.LOGOUT_END:\n        if (currentStatus && currentStatus !== InteractionStatus.Logout) {\n          // Prevent this event from clearing any status other than logout\n          break;\n        }\n        return InteractionStatus.None;\n      case EventType.HANDLE_REDIRECT_END:\n        if (currentStatus && currentStatus !== InteractionStatus.HandleRedirect) {\n          // Prevent this event from clearing any status other than handleRedirect\n          break;\n        }\n        return InteractionStatus.None;\n      case EventType.LOGIN_SUCCESS:\n      case EventType.LOGIN_FAILURE:\n      case EventType.ACQUIRE_TOKEN_SUCCESS:\n      case EventType.ACQUIRE_TOKEN_FAILURE:\n      case EventType.RESTORE_FROM_BFCACHE:\n        if (message.interactionType === InteractionType.Redirect || message.interactionType === InteractionType.Popup) {\n          if (currentStatus && currentStatus !== InteractionStatus.Login && currentStatus !== InteractionStatus.AcquireToken) {\n            // Prevent this event from clearing any status other than login or acquireToken\n            break;\n          }\n          return InteractionStatus.None;\n        }\n        break;\n    }\n    return null;\n  }\n}\nexport { EventMessageUtils };","map":{"version":3,"names":["EventMessageUtils","getInteractionStatusFromEvent","message","currentStatus","eventType","EventType","LOGIN_START","InteractionStatus","Login","SSO_SILENT_START","SsoSilent","ACQUIRE_TOKEN_START","interactionType","InteractionType","Redirect","Popup","AcquireToken","HANDLE_REDIRECT_START","HandleRedirect","LOGOUT_START","Logout","SSO_SILENT_SUCCESS","SSO_SILENT_FAILURE","None","LOGOUT_END","HANDLE_REDIRECT_END","LOGIN_SUCCESS","LOGIN_FAILURE","ACQUIRE_TOKEN_SUCCESS","ACQUIRE_TOKEN_FAILURE","RESTORE_FROM_BFCACHE"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-browser/src/event/EventMessage.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError, AccountInfo } from \"@azure/msal-common/browser\";\nimport { EventType } from \"./EventType.js\";\nimport {\n    InteractionStatus,\n    InteractionType,\n} from \"../utils/BrowserConstants.js\";\nimport { PopupRequest } from \"../request/PopupRequest.js\";\nimport { RedirectRequest } from \"../request/RedirectRequest.js\";\nimport { SilentRequest } from \"../request/SilentRequest.js\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest.js\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest.js\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult.js\";\n\nexport type EventMessage = {\n    eventType: EventType;\n    interactionType: InteractionType | null;\n    payload: EventPayload;\n    error: EventError;\n    timestamp: number;\n};\n\nexport type PopupEvent = {\n    popupWindow: Window;\n};\n\n/**\n * Payload for the BrokerConnectionEstablished event\n */\nexport type BrokerConnectionEvent = {\n    /**\n     * The origin of the broker that is connected to the client\n     */\n    pairwiseBrokerOrigin: string;\n};\n\nexport type EventPayload =\n    | AccountInfo\n    | PopupRequest\n    | RedirectRequest\n    | SilentRequest\n    | SsoSilentRequest\n    | EndSessionRequest\n    | AuthenticationResult\n    | PopupEvent\n    | BrokerConnectionEvent\n    | null;\n\nexport type EventError = AuthError | Error | null;\n\nexport type EventCallbackFunction = (message: EventMessage) => void;\n\nexport class EventMessageUtils {\n    /**\n     * Gets interaction status from event message\n     * @param message\n     * @param currentStatus\n     */\n    static getInteractionStatusFromEvent(\n        message: EventMessage,\n        currentStatus?: InteractionStatus\n    ): InteractionStatus | null {\n        switch (message.eventType) {\n            case EventType.LOGIN_START:\n                return InteractionStatus.Login;\n            case EventType.SSO_SILENT_START:\n                return InteractionStatus.SsoSilent;\n            case EventType.ACQUIRE_TOKEN_START:\n                if (\n                    message.interactionType === InteractionType.Redirect ||\n                    message.interactionType === InteractionType.Popup\n                ) {\n                    return InteractionStatus.AcquireToken;\n                }\n                break;\n            case EventType.HANDLE_REDIRECT_START:\n                return InteractionStatus.HandleRedirect;\n            case EventType.LOGOUT_START:\n                return InteractionStatus.Logout;\n            case EventType.SSO_SILENT_SUCCESS:\n            case EventType.SSO_SILENT_FAILURE:\n                if (\n                    currentStatus &&\n                    currentStatus !== InteractionStatus.SsoSilent\n                ) {\n                    // Prevent this event from clearing any status other than ssoSilent\n                    break;\n                }\n                return InteractionStatus.None;\n            case EventType.LOGOUT_END:\n                if (\n                    currentStatus &&\n                    currentStatus !== InteractionStatus.Logout\n                ) {\n                    // Prevent this event from clearing any status other than logout\n                    break;\n                }\n                return InteractionStatus.None;\n            case EventType.HANDLE_REDIRECT_END:\n                if (\n                    currentStatus &&\n                    currentStatus !== InteractionStatus.HandleRedirect\n                ) {\n                    // Prevent this event from clearing any status other than handleRedirect\n                    break;\n                }\n                return InteractionStatus.None;\n            case EventType.LOGIN_SUCCESS:\n            case EventType.LOGIN_FAILURE:\n            case EventType.ACQUIRE_TOKEN_SUCCESS:\n            case EventType.ACQUIRE_TOKEN_FAILURE:\n            case EventType.RESTORE_FROM_BFCACHE:\n                if (\n                    message.interactionType === InteractionType.Redirect ||\n                    message.interactionType === InteractionType.Popup\n                ) {\n                    if (\n                        currentStatus &&\n                        currentStatus !== InteractionStatus.Login &&\n                        currentStatus !== InteractionStatus.AcquireToken\n                    ) {\n                        // Prevent this event from clearing any status other than login or acquireToken\n                        break;\n                    }\n                    return InteractionStatus.None;\n                }\n                break;\n            default:\n                break;\n        }\n        return null;\n    }\n}\n"],"mappings":";;;;;;AAAA;;;AAGG;MAqDUA,iBAAiB;EAC1B;;;;AAIG;EACH,OAAOC,6BAA6BA,CAChCC,OAAqB,EACrBC,aAAiC;IAEjC,QAAQD,OAAO,CAACE,SAAS;MACrB,KAAKC,SAAS,CAACC,WAAW;QACtB,OAAOC,iBAAiB,CAACC,KAAK;MAClC,KAAKH,SAAS,CAACI,gBAAgB;QAC3B,OAAOF,iBAAiB,CAACG,SAAS;MACtC,KAAKL,SAAS,CAACM,mBAAmB;QAC9B,IACIT,OAAO,CAACU,eAAe,KAAKC,eAAe,CAACC,QAAQ,IACpDZ,OAAO,CAACU,eAAe,KAAKC,eAAe,CAACE,KAAK,EACnD;UACE,OAAOR,iBAAiB,CAACS,YAAY;QACxC;QACD;MACJ,KAAKX,SAAS,CAACY,qBAAqB;QAChC,OAAOV,iBAAiB,CAACW,cAAc;MAC3C,KAAKb,SAAS,CAACc,YAAY;QACvB,OAAOZ,iBAAiB,CAACa,MAAM;MACnC,KAAKf,SAAS,CAACgB,kBAAkB;MACjC,KAAKhB,SAAS,CAACiB,kBAAkB;QAC7B,IACInB,aAAa,IACbA,aAAa,KAAKI,iBAAiB,CAACG,SAAS,EAC/C;;UAEE;QACH;QACD,OAAOH,iBAAiB,CAACgB,IAAI;MACjC,KAAKlB,SAAS,CAACmB,UAAU;QACrB,IACIrB,aAAa,IACbA,aAAa,KAAKI,iBAAiB,CAACa,MAAM,EAC5C;;UAEE;QACH;QACD,OAAOb,iBAAiB,CAACgB,IAAI;MACjC,KAAKlB,SAAS,CAACoB,mBAAmB;QAC9B,IACItB,aAAa,IACbA,aAAa,KAAKI,iBAAiB,CAACW,cAAc,EACpD;;UAEE;QACH;QACD,OAAOX,iBAAiB,CAACgB,IAAI;MACjC,KAAKlB,SAAS,CAACqB,aAAa;MAC5B,KAAKrB,SAAS,CAACsB,aAAa;MAC5B,KAAKtB,SAAS,CAACuB,qBAAqB;MACpC,KAAKvB,SAAS,CAACwB,qBAAqB;MACpC,KAAKxB,SAAS,CAACyB,oBAAoB;QAC/B,IACI5B,OAAO,CAACU,eAAe,KAAKC,eAAe,CAACC,QAAQ,IACpDZ,OAAO,CAACU,eAAe,KAAKC,eAAe,CAACE,KAAK,EACnD;UACE,IACIZ,aAAa,IACbA,aAAa,KAAKI,iBAAiB,CAACC,KAAK,IACzCL,aAAa,KAAKI,iBAAiB,CAACS,YAAY,EAClD;;YAEE;UACH;UACD,OAAOT,iBAAiB,CAACgB,IAAI;QAChC;QACD;IAGP;IACD,OAAO,IAAI;;AAElB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}