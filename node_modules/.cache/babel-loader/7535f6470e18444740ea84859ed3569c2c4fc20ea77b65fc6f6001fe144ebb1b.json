{"ast":null,"code":"/*! @azure/msal-browser v4.13.1 2025-06-10 */\n'use strict';\n\nimport { RequestParameterBuilder, StringUtils, AuthenticationScheme, createClientAuthError, ClientAuthErrorCodes, TimeUtils, AuthToken, buildTenantProfile, AuthError, InteractionRequiredAuthError, ServerError, ClientAuthError, OIDC_DEFAULT_SCOPES } from '@azure/msal-common/browser';\nimport { isBridgeError } from '../BridgeError.mjs';\nimport { BridgeStatusCode } from '../BridgeStatusCode.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass NestedAppAuthAdapter {\n  constructor(clientId, clientCapabilities, crypto, logger) {\n    this.clientId = clientId;\n    this.clientCapabilities = clientCapabilities;\n    this.crypto = crypto;\n    this.logger = logger;\n  }\n  toNaaTokenRequest(request) {\n    let extraParams;\n    if (request.extraQueryParameters === undefined) {\n      extraParams = new Map();\n    } else {\n      extraParams = new Map(Object.entries(request.extraQueryParameters));\n    }\n    const correlationId = request.correlationId || this.crypto.createNewGuid();\n    const claims = RequestParameterBuilder.addClientCapabilitiesToClaims(request.claims, this.clientCapabilities);\n    const scopes = request.scopes || OIDC_DEFAULT_SCOPES;\n    const tokenRequest = {\n      platformBrokerId: request.account?.homeAccountId,\n      clientId: this.clientId,\n      authority: request.authority,\n      scope: scopes.join(\" \"),\n      correlationId,\n      claims: !StringUtils.isEmptyObj(claims) ? claims : undefined,\n      state: request.state,\n      authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n      extraParameters: extraParams\n    };\n    return tokenRequest;\n  }\n  fromNaaTokenResponse(request, response, reqTimestamp) {\n    if (!response.token.id_token || !response.token.access_token) {\n      throw createClientAuthError(ClientAuthErrorCodes.nullOrEmptyToken);\n    }\n    // Request timestamp and AuthResult expires_in are in seconds, converting to Date for AuthenticationResult\n    const expiresOn = TimeUtils.toDateFromSeconds(reqTimestamp + (response.token.expires_in || 0));\n    const idTokenClaims = AuthToken.extractTokenClaims(response.token.id_token, this.crypto.base64Decode);\n    const account = this.fromNaaAccountInfo(response.account, response.token.id_token, idTokenClaims);\n    const scopes = response.token.scope || request.scope;\n    const authenticationResult = {\n      authority: response.token.authority || account.environment,\n      uniqueId: account.localAccountId,\n      tenantId: account.tenantId,\n      scopes: scopes.split(\" \"),\n      account,\n      idToken: response.token.id_token,\n      idTokenClaims,\n      accessToken: response.token.access_token,\n      fromCache: false,\n      expiresOn: expiresOn,\n      tokenType: request.authenticationScheme || AuthenticationScheme.BEARER,\n      correlationId: request.correlationId,\n      extExpiresOn: expiresOn,\n      state: request.state\n    };\n    return authenticationResult;\n  }\n  /*\r\n   *  export type AccountInfo = {\r\n   *     homeAccountId: string;\r\n   *     environment: string;\r\n   *     tenantId: string;\r\n   *     username: string;\r\n   *     localAccountId: string;\r\n   *     name?: string;\r\n   *     idToken?: string;\r\n   *     idTokenClaims?: TokenClaims & {\r\n   *         [key: string]:\r\n   *             | string\r\n   *             | number\r\n   *             | string[]\r\n   *             | object\r\n   *             | undefined\r\n   *             | unknown;\r\n   *     };\r\n   *     nativeAccountId?: string;\r\n   *     authorityType?: string;\r\n   * };\r\n   */\n  fromNaaAccountInfo(fromAccount, idToken, idTokenClaims) {\n    const effectiveIdTokenClaims = idTokenClaims || fromAccount.idTokenClaims;\n    const localAccountId = fromAccount.localAccountId || effectiveIdTokenClaims?.oid || effectiveIdTokenClaims?.sub || \"\";\n    const tenantId = fromAccount.tenantId || effectiveIdTokenClaims?.tid || \"\";\n    const homeAccountId = fromAccount.homeAccountId || `${localAccountId}.${tenantId}`;\n    const username = fromAccount.username || effectiveIdTokenClaims?.preferred_username || \"\";\n    const name = fromAccount.name || effectiveIdTokenClaims?.name;\n    const tenantProfiles = new Map();\n    const tenantProfile = buildTenantProfile(homeAccountId, localAccountId, tenantId, effectiveIdTokenClaims);\n    tenantProfiles.set(tenantId, tenantProfile);\n    const account = {\n      homeAccountId,\n      environment: fromAccount.environment,\n      tenantId,\n      username,\n      localAccountId,\n      name,\n      idToken: idToken,\n      idTokenClaims: effectiveIdTokenClaims,\n      tenantProfiles\n    };\n    return account;\n  }\n  /**\r\n   *\r\n   * @param error BridgeError\r\n   * @returns AuthError, ClientAuthError, ClientConfigurationError, ServerError, InteractionRequiredError\r\n   */\n  fromBridgeError(error) {\n    if (isBridgeError(error)) {\n      switch (error.status) {\n        case BridgeStatusCode.UserCancel:\n          return new ClientAuthError(ClientAuthErrorCodes.userCanceled);\n        case BridgeStatusCode.NoNetwork:\n          return new ClientAuthError(ClientAuthErrorCodes.noNetworkConnectivity);\n        case BridgeStatusCode.AccountUnavailable:\n          return new ClientAuthError(ClientAuthErrorCodes.noAccountFound);\n        case BridgeStatusCode.Disabled:\n          return new ClientAuthError(ClientAuthErrorCodes.nestedAppAuthBridgeDisabled);\n        case BridgeStatusCode.NestedAppAuthUnavailable:\n          return new ClientAuthError(error.code || ClientAuthErrorCodes.nestedAppAuthBridgeDisabled, error.description);\n        case BridgeStatusCode.TransientError:\n        case BridgeStatusCode.PersistentError:\n          return new ServerError(error.code, error.description);\n        case BridgeStatusCode.UserInteractionRequired:\n          return new InteractionRequiredAuthError(error.code, error.description);\n        default:\n          return new AuthError(error.code, error.description);\n      }\n    } else {\n      return new AuthError(\"unknown_error\", \"An unknown error occurred\");\n    }\n  }\n  /**\r\n   * Returns an AuthenticationResult from the given cache items\r\n   *\r\n   * @param account\r\n   * @param idToken\r\n   * @param accessToken\r\n   * @param reqTimestamp\r\n   * @returns\r\n   */\n  toAuthenticationResultFromCache(account, idToken, accessToken, request, correlationId) {\n    if (!idToken || !accessToken) {\n      throw createClientAuthError(ClientAuthErrorCodes.nullOrEmptyToken);\n    }\n    const idTokenClaims = AuthToken.extractTokenClaims(idToken.secret, this.crypto.base64Decode);\n    const scopes = accessToken.target || request.scopes.join(\" \");\n    const authenticationResult = {\n      authority: accessToken.environment || account.environment,\n      uniqueId: account.localAccountId,\n      tenantId: account.tenantId,\n      scopes: scopes.split(\" \"),\n      account,\n      idToken: idToken.secret,\n      idTokenClaims: idTokenClaims || {},\n      accessToken: accessToken.secret,\n      fromCache: true,\n      expiresOn: TimeUtils.toDateFromSeconds(accessToken.expiresOn),\n      extExpiresOn: TimeUtils.toDateFromSeconds(accessToken.extendedExpiresOn),\n      tokenType: request.authenticationScheme || AuthenticationScheme.BEARER,\n      correlationId,\n      state: request.state\n    };\n    return authenticationResult;\n  }\n}\nexport { NestedAppAuthAdapter };","map":{"version":3,"names":["NestedAppAuthAdapter","constructor","clientId","clientCapabilities","crypto","logger","toNaaTokenRequest","request","extraParams","extraQueryParameters","undefined","Map","Object","entries","correlationId","createNewGuid","claims","RequestParameterBuilder","addClientCapabilitiesToClaims","scopes","OIDC_DEFAULT_SCOPES","tokenRequest","platformBrokerId","account","homeAccountId","authority","scope","join","StringUtils","isEmptyObj","state","authenticationScheme","AuthenticationScheme","BEARER","extraParameters","fromNaaTokenResponse","response","reqTimestamp","token","id_token","access_token","createClientAuthError","ClientAuthErrorCodes","nullOrEmptyToken","expiresOn","TimeUtils","toDateFromSeconds","expires_in","idTokenClaims","AuthToken","extractTokenClaims","base64Decode","fromNaaAccountInfo","authenticationResult","environment","uniqueId","localAccountId","tenantId","split","idToken","accessToken","fromCache","tokenType","extExpiresOn","fromAccount","effectiveIdTokenClaims","oid","sub","tid","username","preferred_username","name","tenantProfiles","tenantProfile","buildTenantProfile","set","fromBridgeError","error","isBridgeError","status","BridgeStatusCode","UserCancel","ClientAuthError","userCanceled","NoNetwork","noNetworkConnectivity","AccountUnavailable","noAccountFound","Disabled","nestedAppAuthBridgeDisabled","NestedAppAuthUnavailable","code","description","TransientError","PersistentError","ServerError","UserInteractionRequired","InteractionRequiredAuthError","AuthError","toAuthenticationResultFromCache","secret","target","extendedExpiresOn"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-browser/src/naa/mapping/NestedAppAuthAdapter.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { TokenRequest } from \"../TokenRequest.js\";\nimport { AccountInfo as NaaAccountInfo } from \"../AccountInfo.js\";\nimport { RedirectRequest } from \"../../request/RedirectRequest.js\";\nimport { PopupRequest } from \"../../request/PopupRequest.js\";\nimport {\n    AccountInfo as MsalAccountInfo,\n    AuthError,\n    ClientAuthError,\n    ClientConfigurationError,\n    InteractionRequiredAuthError,\n    ServerError,\n    ICrypto,\n    Logger,\n    AuthToken,\n    TokenClaims,\n    ClientAuthErrorCodes,\n    AuthenticationScheme,\n    RequestParameterBuilder,\n    StringUtils,\n    createClientAuthError,\n    OIDC_DEFAULT_SCOPES,\n    AccountInfo,\n    IdTokenEntity,\n    AccessTokenEntity,\n    TenantProfile,\n    buildTenantProfile,\n    TimeUtils,\n} from \"@azure/msal-common/browser\";\nimport { isBridgeError } from \"../BridgeError.js\";\nimport { BridgeStatusCode } from \"../BridgeStatusCode.js\";\nimport { AuthenticationResult } from \"../../response/AuthenticationResult.js\";\nimport {} from \"../../error/BrowserAuthErrorCodes.js\";\nimport { AuthResult } from \"../AuthResult.js\";\nimport { SsoSilentRequest } from \"../../request/SsoSilentRequest.js\";\nimport { SilentRequest } from \"../../request/SilentRequest.js\";\n\nexport class NestedAppAuthAdapter {\n    protected crypto: ICrypto;\n    protected logger: Logger;\n    protected clientId: string;\n    protected clientCapabilities: string[];\n\n    constructor(\n        clientId: string,\n        clientCapabilities: string[],\n        crypto: ICrypto,\n        logger: Logger\n    ) {\n        this.clientId = clientId;\n        this.clientCapabilities = clientCapabilities;\n        this.crypto = crypto;\n        this.logger = logger;\n    }\n\n    public toNaaTokenRequest(\n        request:\n            | PopupRequest\n            | RedirectRequest\n            | SilentRequest\n            | SsoSilentRequest\n    ): TokenRequest {\n        let extraParams: Map<string, string>;\n        if (request.extraQueryParameters === undefined) {\n            extraParams = new Map<string, string>();\n        } else {\n            extraParams = new Map<string, string>(\n                Object.entries(request.extraQueryParameters)\n            );\n        }\n\n        const correlationId =\n            request.correlationId || this.crypto.createNewGuid();\n        const claims = RequestParameterBuilder.addClientCapabilitiesToClaims(\n            request.claims,\n            this.clientCapabilities\n        );\n        const scopes = request.scopes || OIDC_DEFAULT_SCOPES;\n        const tokenRequest: TokenRequest = {\n            platformBrokerId: request.account?.homeAccountId,\n            clientId: this.clientId,\n            authority: request.authority,\n            scope: scopes.join(\" \"),\n            correlationId,\n            claims: !StringUtils.isEmptyObj(claims) ? claims : undefined,\n            state: request.state,\n            authenticationScheme:\n                request.authenticationScheme || AuthenticationScheme.BEARER,\n            extraParameters: extraParams,\n        };\n\n        return tokenRequest;\n    }\n\n    public fromNaaTokenResponse(\n        request: TokenRequest,\n        response: AuthResult,\n        reqTimestamp: number\n    ): AuthenticationResult {\n        if (!response.token.id_token || !response.token.access_token) {\n            throw createClientAuthError(ClientAuthErrorCodes.nullOrEmptyToken);\n        }\n\n        // Request timestamp and AuthResult expires_in are in seconds, converting to Date for AuthenticationResult\n        const expiresOn = TimeUtils.toDateFromSeconds(\n            reqTimestamp + (response.token.expires_in || 0)\n        );\n        const idTokenClaims = AuthToken.extractTokenClaims(\n            response.token.id_token,\n            this.crypto.base64Decode\n        );\n        const account = this.fromNaaAccountInfo(\n            response.account,\n            response.token.id_token,\n            idTokenClaims\n        );\n        const scopes = response.token.scope || request.scope;\n\n        const authenticationResult: AuthenticationResult = {\n            authority: response.token.authority || account.environment,\n            uniqueId: account.localAccountId,\n            tenantId: account.tenantId,\n            scopes: scopes.split(\" \"),\n            account,\n            idToken: response.token.id_token,\n            idTokenClaims,\n            accessToken: response.token.access_token,\n            fromCache: false,\n            expiresOn: expiresOn,\n            tokenType:\n                request.authenticationScheme || AuthenticationScheme.BEARER,\n            correlationId: request.correlationId,\n            extExpiresOn: expiresOn,\n            state: request.state,\n        };\n\n        return authenticationResult;\n    }\n\n    /*\n     *  export type AccountInfo = {\n     *     homeAccountId: string;\n     *     environment: string;\n     *     tenantId: string;\n     *     username: string;\n     *     localAccountId: string;\n     *     name?: string;\n     *     idToken?: string;\n     *     idTokenClaims?: TokenClaims & {\n     *         [key: string]:\n     *             | string\n     *             | number\n     *             | string[]\n     *             | object\n     *             | undefined\n     *             | unknown;\n     *     };\n     *     nativeAccountId?: string;\n     *     authorityType?: string;\n     * };\n     */\n    public fromNaaAccountInfo(\n        fromAccount: NaaAccountInfo,\n        idToken?: string,\n        idTokenClaims?: TokenClaims\n    ): MsalAccountInfo {\n        const effectiveIdTokenClaims =\n            idTokenClaims || (fromAccount.idTokenClaims as TokenClaims);\n\n        const localAccountId =\n            fromAccount.localAccountId ||\n            effectiveIdTokenClaims?.oid ||\n            effectiveIdTokenClaims?.sub ||\n            \"\";\n\n        const tenantId =\n            fromAccount.tenantId || effectiveIdTokenClaims?.tid || \"\";\n\n        const homeAccountId =\n            fromAccount.homeAccountId || `${localAccountId}.${tenantId}`;\n\n        const username =\n            fromAccount.username ||\n            effectiveIdTokenClaims?.preferred_username ||\n            \"\";\n\n        const name = fromAccount.name || effectiveIdTokenClaims?.name;\n\n        const tenantProfiles = new Map<string, TenantProfile>();\n\n        const tenantProfile = buildTenantProfile(\n            homeAccountId,\n            localAccountId,\n            tenantId,\n            effectiveIdTokenClaims\n        );\n        tenantProfiles.set(tenantId, tenantProfile);\n\n        const account: MsalAccountInfo = {\n            homeAccountId,\n            environment: fromAccount.environment,\n            tenantId,\n            username,\n            localAccountId,\n            name,\n            idToken: idToken,\n            idTokenClaims: effectiveIdTokenClaims,\n            tenantProfiles,\n        };\n\n        return account;\n    }\n\n    /**\n     *\n     * @param error BridgeError\n     * @returns AuthError, ClientAuthError, ClientConfigurationError, ServerError, InteractionRequiredError\n     */\n    public fromBridgeError(\n        error: unknown\n    ):\n        | AuthError\n        | ClientAuthError\n        | ClientConfigurationError\n        | ServerError\n        | InteractionRequiredAuthError {\n        if (isBridgeError(error)) {\n            switch (error.status) {\n                case BridgeStatusCode.UserCancel:\n                    return new ClientAuthError(\n                        ClientAuthErrorCodes.userCanceled\n                    );\n                case BridgeStatusCode.NoNetwork:\n                    return new ClientAuthError(\n                        ClientAuthErrorCodes.noNetworkConnectivity\n                    );\n                case BridgeStatusCode.AccountUnavailable:\n                    return new ClientAuthError(\n                        ClientAuthErrorCodes.noAccountFound\n                    );\n                case BridgeStatusCode.Disabled:\n                    return new ClientAuthError(\n                        ClientAuthErrorCodes.nestedAppAuthBridgeDisabled\n                    );\n                case BridgeStatusCode.NestedAppAuthUnavailable:\n                    return new ClientAuthError(\n                        error.code ||\n                            ClientAuthErrorCodes.nestedAppAuthBridgeDisabled,\n                        error.description\n                    );\n                case BridgeStatusCode.TransientError:\n                case BridgeStatusCode.PersistentError:\n                    return new ServerError(error.code, error.description);\n                case BridgeStatusCode.UserInteractionRequired:\n                    return new InteractionRequiredAuthError(\n                        error.code,\n                        error.description\n                    );\n                default:\n                    return new AuthError(error.code, error.description);\n            }\n        } else {\n            return new AuthError(\"unknown_error\", \"An unknown error occurred\");\n        }\n    }\n\n    /**\n     * Returns an AuthenticationResult from the given cache items\n     *\n     * @param account\n     * @param idToken\n     * @param accessToken\n     * @param reqTimestamp\n     * @returns\n     */\n    public toAuthenticationResultFromCache(\n        account: AccountInfo,\n        idToken: IdTokenEntity,\n        accessToken: AccessTokenEntity,\n        request: SilentRequest,\n        correlationId: string\n    ): AuthenticationResult {\n        if (!idToken || !accessToken) {\n            throw createClientAuthError(ClientAuthErrorCodes.nullOrEmptyToken);\n        }\n\n        const idTokenClaims = AuthToken.extractTokenClaims(\n            idToken.secret,\n            this.crypto.base64Decode\n        );\n\n        const scopes = accessToken.target || request.scopes.join(\" \");\n\n        const authenticationResult: AuthenticationResult = {\n            authority: accessToken.environment || account.environment,\n            uniqueId: account.localAccountId,\n            tenantId: account.tenantId,\n            scopes: scopes.split(\" \"),\n            account,\n            idToken: idToken.secret,\n            idTokenClaims: idTokenClaims || {},\n            accessToken: accessToken.secret,\n            fromCache: true,\n            expiresOn: TimeUtils.toDateFromSeconds(accessToken.expiresOn),\n            extExpiresOn: TimeUtils.toDateFromSeconds(\n                accessToken.extendedExpiresOn\n            ),\n            tokenType:\n                request.authenticationScheme || AuthenticationScheme.BEARER,\n            correlationId,\n            state: request.state,\n        };\n\n        return authenticationResult;\n    }\n}\n"],"mappings":";;;;;;;AAAA;;;AAGG;MAsCUA,oBAAoB;EAM7BC,YACIC,QAAgB,EAChBC,kBAA4B,EAC5BC,MAAe,EACfC,MAAc;IAEd,IAAI,CAACH,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,MAAM,GAAGA,MAAM;;EAGjBC,iBAAiBA,CACpBC,OAIsB;IAEtB,IAAIC,WAAgC;IACpC,IAAID,OAAO,CAACE,oBAAoB,KAAKC,SAAS,EAAE;MAC5CF,WAAW,GAAG,IAAIG,GAAG,EAAkB;IAC1C,OAAM;MACHH,WAAW,GAAG,IAAIG,GAAG,CACjBC,MAAM,CAACC,OAAO,CAACN,OAAO,CAACE,oBAAoB,CAAC,CAC/C;IACJ;IAED,MAAMK,aAAa,GACfP,OAAO,CAACO,aAAa,IAAI,IAAI,CAACV,MAAM,CAACW,aAAa,EAAE;IACxD,MAAMC,MAAM,GAAGC,uBAAuB,CAACC,6BAA6B,CAChEX,OAAO,CAACS,MAAM,EACd,IAAI,CAACb,kBAAkB,CAC1B;IACD,MAAMgB,MAAM,GAAGZ,OAAO,CAACY,MAAM,IAAIC,mBAAmB;IACpD,MAAMC,YAAY,GAAiB;MAC/BC,gBAAgB,EAAEf,OAAO,CAACgB,OAAO,EAAEC,aAAa;MAChDtB,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBuB,SAAS,EAAElB,OAAO,CAACkB,SAAS;MAC5BC,KAAK,EAAEP,MAAM,CAACQ,IAAI,CAAC,GAAG,CAAC;MACvBb,aAAa;MACbE,MAAM,EAAE,CAACY,WAAW,CAACC,UAAU,CAACb,MAAM,CAAC,GAAGA,MAAM,GAAGN,SAAS;MAC5DoB,KAAK,EAAEvB,OAAO,CAACuB,KAAK;MACpBC,oBAAoB,EAChBxB,OAAO,CAACwB,oBAAoB,IAAIC,oBAAoB,CAACC,MAAM;MAC/DC,eAAe,EAAE1B;KACpB;IAED,OAAOa,YAAY;;EAGhBc,oBAAoBA,CACvB5B,OAAqB,EACrB6B,QAAoB,EACpBC,YAAoB;IAEpB,IAAI,CAACD,QAAQ,CAACE,KAAK,CAACC,QAAQ,IAAI,CAACH,QAAQ,CAACE,KAAK,CAACE,YAAY,EAAE;MAC1D,MAAMC,qBAAqB,CAACC,oBAAoB,CAACC,gBAAgB,CAAC;IACrE;;IAGD,MAAMC,SAAS,GAAGC,SAAS,CAACC,iBAAiB,CACzCT,YAAY,IAAID,QAAQ,CAACE,KAAK,CAACS,UAAU,IAAI,CAAC,CAAC,CAClD;IACD,MAAMC,aAAa,GAAGC,SAAS,CAACC,kBAAkB,CAC9Cd,QAAQ,CAACE,KAAK,CAACC,QAAQ,EACvB,IAAI,CAACnC,MAAM,CAAC+C,YAAY,CAC3B;IACD,MAAM5B,OAAO,GAAG,IAAI,CAAC6B,kBAAkB,CACnChB,QAAQ,CAACb,OAAO,EAChBa,QAAQ,CAACE,KAAK,CAACC,QAAQ,EACvBS,aAAa,CAChB;IACD,MAAM7B,MAAM,GAAGiB,QAAQ,CAACE,KAAK,CAACZ,KAAK,IAAInB,OAAO,CAACmB,KAAK;IAEpD,MAAM2B,oBAAoB,GAAyB;MAC/C5B,SAAS,EAAEW,QAAQ,CAACE,KAAK,CAACb,SAAS,IAAIF,OAAO,CAAC+B,WAAW;MAC1DC,QAAQ,EAAEhC,OAAO,CAACiC,cAAc;MAChCC,QAAQ,EAAElC,OAAO,CAACkC,QAAQ;MAC1BtC,MAAM,EAAEA,MAAM,CAACuC,KAAK,CAAC,GAAG,CAAC;MACzBnC,OAAO;MACPoC,OAAO,EAAEvB,QAAQ,CAACE,KAAK,CAACC,QAAQ;MAChCS,aAAa;MACbY,WAAW,EAAExB,QAAQ,CAACE,KAAK,CAACE,YAAY;MACxCqB,SAAS,EAAE,KAAK;MAChBjB,SAAS,EAAEA,SAAS;MACpBkB,SAAS,EACLvD,OAAO,CAACwB,oBAAoB,IAAIC,oBAAoB,CAACC,MAAM;MAC/DnB,aAAa,EAAEP,OAAO,CAACO,aAAa;MACpCiD,YAAY,EAAEnB,SAAS;MACvBd,KAAK,EAAEvB,OAAO,CAACuB;KAClB;IAED,OAAOuB,oBAAoB;;EAG/B;;;;;;;;;;;;;;;;;;;;;AAqBG;EACID,kBAAkBA,CACrBY,WAA2B,EAC3BL,OAAgB,EAChBX,aAA2B;IAE3B,MAAMiB,sBAAsB,GACxBjB,aAAa,IAAKgB,WAAW,CAAChB,aAA6B;IAE/D,MAAMQ,cAAc,GAChBQ,WAAW,CAACR,cAAc,IAC1BS,sBAAsB,EAAEC,GAAG,IAC3BD,sBAAsB,EAAEE,GAAG,IAC3B,EAAE;IAEN,MAAMV,QAAQ,GACVO,WAAW,CAACP,QAAQ,IAAIQ,sBAAsB,EAAEG,GAAG,IAAI,EAAE;IAE7D,MAAM5C,aAAa,GACfwC,WAAW,CAACxC,aAAa,IAAI,GAAGgC,cAAc,IAAIC,QAAQ,EAAE;IAEhE,MAAMY,QAAQ,GACVL,WAAW,CAACK,QAAQ,IACpBJ,sBAAsB,EAAEK,kBAAkB,IAC1C,EAAE;IAEN,MAAMC,IAAI,GAAGP,WAAW,CAACO,IAAI,IAAIN,sBAAsB,EAAEM,IAAI;IAE7D,MAAMC,cAAc,GAAG,IAAI7D,GAAG,EAAyB;IAEvD,MAAM8D,aAAa,GAAGC,kBAAkB,CACpClD,aAAa,EACbgC,cAAc,EACdC,QAAQ,EACRQ,sBAAsB,CACzB;IACDO,cAAc,CAACG,GAAG,CAAClB,QAAQ,EAAEgB,aAAa,CAAC;IAE3C,MAAMlD,OAAO,GAAoB;MAC7BC,aAAa;MACb8B,WAAW,EAAEU,WAAW,CAACV,WAAW;MACpCG,QAAQ;MACRY,QAAQ;MACRb,cAAc;MACde,IAAI;MACJZ,OAAO,EAAEA,OAAO;MAChBX,aAAa,EAAEiB,sBAAsB;MACrCO;KACH;IAED,OAAOjD,OAAO;;EAGlB;;;;AAIG;EACIqD,eAAeA,CAClBC,KAAc;IAOd,IAAIC,aAAa,CAACD,KAAK,CAAC,EAAE;MACtB,QAAQA,KAAK,CAACE,MAAM;QAChB,KAAKC,gBAAgB,CAACC,UAAU;UAC5B,OAAO,IAAIC,eAAe,CACtBxC,oBAAoB,CAACyC,YAAY,CACpC;QACL,KAAKH,gBAAgB,CAACI,SAAS;UAC3B,OAAO,IAAIF,eAAe,CACtBxC,oBAAoB,CAAC2C,qBAAqB,CAC7C;QACL,KAAKL,gBAAgB,CAACM,kBAAkB;UACpC,OAAO,IAAIJ,eAAe,CACtBxC,oBAAoB,CAAC6C,cAAc,CACtC;QACL,KAAKP,gBAAgB,CAACQ,QAAQ;UAC1B,OAAO,IAAIN,eAAe,CACtBxC,oBAAoB,CAAC+C,2BAA2B,CACnD;QACL,KAAKT,gBAAgB,CAACU,wBAAwB;UAC1C,OAAO,IAAIR,eAAe,CACtBL,KAAK,CAACc,IAAI,IACNjD,oBAAoB,CAAC+C,2BAA2B,EACpDZ,KAAK,CAACe,WAAW,CACpB;QACL,KAAKZ,gBAAgB,CAACa,cAAc;QACpC,KAAKb,gBAAgB,CAACc,eAAe;UACjC,OAAO,IAAIC,WAAW,CAAClB,KAAK,CAACc,IAAI,EAAEd,KAAK,CAACe,WAAW,CAAC;QACzD,KAAKZ,gBAAgB,CAACgB,uBAAuB;UACzC,OAAO,IAAIC,4BAA4B,CACnCpB,KAAK,CAACc,IAAI,EACVd,KAAK,CAACe,WAAW,CACpB;QACL;UACI,OAAO,IAAIM,SAAS,CAACrB,KAAK,CAACc,IAAI,EAAEd,KAAK,CAACe,WAAW,CAAC;MAC1D;IACJ,OAAM;MACH,OAAO,IAAIM,SAAS,CAAC,eAAe,EAAE,2BAA2B,CAAC;IACrE;;EAGL;;;;;;;;AAQG;EACIC,+BAA+BA,CAClC5E,OAAoB,EACpBoC,OAAsB,EACtBC,WAA8B,EAC9BrD,OAAsB,EACtBO,aAAqB;IAErB,IAAI,CAAC6C,OAAO,IAAI,CAACC,WAAW,EAAE;MAC1B,MAAMnB,qBAAqB,CAACC,oBAAoB,CAACC,gBAAgB,CAAC;IACrE;IAED,MAAMK,aAAa,GAAGC,SAAS,CAACC,kBAAkB,CAC9CS,OAAO,CAACyC,MAAM,EACd,IAAI,CAAChG,MAAM,CAAC+C,YAAY,CAC3B;IAED,MAAMhC,MAAM,GAAGyC,WAAW,CAACyC,MAAM,IAAI9F,OAAO,CAACY,MAAM,CAACQ,IAAI,CAAC,GAAG,CAAC;IAE7D,MAAM0B,oBAAoB,GAAyB;MAC/C5B,SAAS,EAAEmC,WAAW,CAACN,WAAW,IAAI/B,OAAO,CAAC+B,WAAW;MACzDC,QAAQ,EAAEhC,OAAO,CAACiC,cAAc;MAChCC,QAAQ,EAAElC,OAAO,CAACkC,QAAQ;MAC1BtC,MAAM,EAAEA,MAAM,CAACuC,KAAK,CAAC,GAAG,CAAC;MACzBnC,OAAO;MACPoC,OAAO,EAAEA,OAAO,CAACyC,MAAM;MACvBpD,aAAa,EAAEA,aAAa,IAAI,EAAE;MAClCY,WAAW,EAAEA,WAAW,CAACwC,MAAM;MAC/BvC,SAAS,EAAE,IAAI;MACfjB,SAAS,EAAEC,SAAS,CAACC,iBAAiB,CAACc,WAAW,CAAChB,SAAS,CAAC;MAC7DmB,YAAY,EAAElB,SAAS,CAACC,iBAAiB,CACrCc,WAAW,CAAC0C,iBAAiB,CAChC;MACDxC,SAAS,EACLvD,OAAO,CAACwB,oBAAoB,IAAIC,oBAAoB,CAACC,MAAM;MAC/DnB,aAAa;MACbgB,KAAK,EAAEvB,OAAO,CAACuB;KAClB;IAED,OAAOuB,oBAAoB;;AAElC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}