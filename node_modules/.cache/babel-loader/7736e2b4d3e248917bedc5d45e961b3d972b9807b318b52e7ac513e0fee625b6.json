{"ast":null,"code":"/*! @azure/msal-browser v4.13.1 2025-06-10 */\n'use strict';\n\nimport { BaseOperatingContext } from './BaseOperatingContext.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass StandardOperatingContext extends BaseOperatingContext {\n  /**\r\n   * Return the module name.  Intended for use with import() to enable dynamic import\r\n   * of the implementation associated with this operating context\r\n   * @returns\r\n   */\n  getModuleName() {\n    return StandardOperatingContext.MODULE_NAME;\n  }\n  /**\r\n   * Returns the unique identifier for this operating context\r\n   * @returns string\r\n   */\n  getId() {\n    return StandardOperatingContext.ID;\n  }\n  /**\r\n   * Checks whether the operating context is available.\r\n   * Confirms that the code is running a browser rather.  This is required.\r\n   * @returns Promise<boolean> indicating whether this operating context is currently available.\r\n   */\n  async initialize() {\n    this.available = typeof window !== \"undefined\";\n    return this.available;\n    /*\r\n     * NOTE: The standard context is available as long as there is a window.  If/when we split out WAM from Browser\r\n     * We can move the current contents of the initialize method to here and verify that the WAM extension is available\r\n     */\n  }\n}\n/*\r\n * TODO: Once we have determine the bundling code return here to specify the name of the bundle\r\n * containing the implementation for this operating context\r\n */\nStandardOperatingContext.MODULE_NAME = \"\";\n/**\r\n * Unique identifier for the operating context\r\n */\nStandardOperatingContext.ID = \"StandardOperatingContext\";\nexport { StandardOperatingContext };","map":{"version":3,"names":["StandardOperatingContext","BaseOperatingContext","getModuleName","MODULE_NAME","getId","ID","initialize","available","window"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-browser/src/operatingcontext/StandardOperatingContext.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseOperatingContext } from \"./BaseOperatingContext.js\";\n\nexport class StandardOperatingContext extends BaseOperatingContext {\n    /*\n     * TODO: Once we have determine the bundling code return here to specify the name of the bundle\n     * containing the implementation for this operating context\n     */\n    static readonly MODULE_NAME: string = \"\";\n\n    /**\n     * Unique identifier for the operating context\n     */\n    static readonly ID: string = \"StandardOperatingContext\";\n\n    /**\n     * Return the module name.  Intended for use with import() to enable dynamic import\n     * of the implementation associated with this operating context\n     * @returns\n     */\n    getModuleName(): string {\n        return StandardOperatingContext.MODULE_NAME;\n    }\n\n    /**\n     * Returns the unique identifier for this operating context\n     * @returns string\n     */\n    getId(): string {\n        return StandardOperatingContext.ID;\n    }\n\n    /**\n     * Checks whether the operating context is available.\n     * Confirms that the code is running a browser rather.  This is required.\n     * @returns Promise<boolean> indicating whether this operating context is currently available.\n     */\n    async initialize(): Promise<boolean> {\n        this.available = typeof window !== \"undefined\";\n        return this.available;\n        /*\n         * NOTE: The standard context is available as long as there is a window.  If/when we split out WAM from Browser\n         * We can move the current contents of the initialize method to here and verify that the WAM extension is available\n         */\n    }\n}\n"],"mappings":";;;;;AAAA;;;AAGG;AAIG,MAAOA,wBAAyB,SAAQC,oBAAoB;EAY9D;;;;AAIG;EACHC,aAAaA,CAAA;IACT,OAAOF,wBAAwB,CAACG,WAAW;;EAG/C;;;AAGG;EACHC,KAAKA,CAAA;IACD,OAAOJ,wBAAwB,CAACK,EAAE;;EAGtC;;;;AAIG;EACH,MAAMC,UAAUA,CAAA;IACZ,IAAI,CAACC,SAAS,GAAG,OAAOC,MAAM,KAAK,WAAW;IAC9C,OAAO,IAAI,CAACD,SAAS;IACrB;;;AAGG;;;AAvCP;;;AAGG;AACaP,wBAAW,CAAAG,WAAA,GAAW,EAAE;AAExC;;AAEG;AACaH,wBAAE,CAAAK,EAAA,GAAW,0BAA0B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}