{"ast":null,"code":"/*! @azure/msal-browser v4.13.1 2025-06-10 */\n'use strict';\n\nimport { ProtocolUtils, createClientAuthError, ClientAuthErrorCodes } from '@azure/msal-common/browser';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Extracts the BrowserStateObject from the state string.\r\n * @param browserCrypto\r\n * @param state\r\n */\nfunction extractBrowserRequestState(browserCrypto, state) {\n  if (!state) {\n    return null;\n  }\n  try {\n    const requestStateObj = ProtocolUtils.parseRequestState(browserCrypto, state);\n    return requestStateObj.libraryState.meta;\n  } catch (e) {\n    throw createClientAuthError(ClientAuthErrorCodes.invalidState);\n  }\n}\nexport { extractBrowserRequestState };","map":{"version":3,"names":["extractBrowserRequestState","browserCrypto","state","requestStateObj","ProtocolUtils","parseRequestState","libraryState","meta","e","createClientAuthError","ClientAuthErrorCodes","invalidState"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-browser/src/utils/BrowserProtocolUtils.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { InteractionType } from \"./BrowserConstants.js\";\nimport {\n    ICrypto,\n    RequestStateObject,\n    ProtocolUtils,\n    createClientAuthError,\n    ClientAuthErrorCodes,\n} from \"@azure/msal-common/browser\";\n\nexport type BrowserStateObject = {\n    interactionType: InteractionType;\n};\n\n/**\n * Extracts the BrowserStateObject from the state string.\n * @param browserCrypto\n * @param state\n */\nexport function extractBrowserRequestState(\n    browserCrypto: ICrypto,\n    state: string\n): BrowserStateObject | null {\n    if (!state) {\n        return null;\n    }\n\n    try {\n        const requestStateObj: RequestStateObject =\n            ProtocolUtils.parseRequestState(browserCrypto, state);\n        return requestStateObj.libraryState.meta as BrowserStateObject;\n    } catch (e) {\n        throw createClientAuthError(ClientAuthErrorCodes.invalidState);\n    }\n}\n"],"mappings":";;;;;AAAA;;;AAGG;AAeH;;;;AAIG;AACa,SAAAA,0BAA0BA,CACtCC,aAAsB,EACtBC,KAAa;EAEb,IAAI,CAACA,KAAK,EAAE;IACR,OAAO,IAAI;EACd;EAED,IAAI;IACA,MAAMC,eAAe,GACjBC,aAAa,CAACC,iBAAiB,CAACJ,aAAa,EAAEC,KAAK,CAAC;IACzD,OAAOC,eAAe,CAACG,YAAY,CAACC,IAA0B;EACjE,EAAC,OAAOC,CAAC,EAAE;IACR,MAAMC,qBAAqB,CAACC,oBAAoB,CAACC,YAAY,CAAC;EACjE;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}