{"ast":null,"code":"/*! @azure/msal-browser v4.13.1 2025-06-10 */\n'use strict';\n\nimport { LogLevel, Logger } from '@azure/msal-common/browser';\nimport { buildConfiguration } from '../config/Configuration.mjs';\nimport { name, version } from '../packageMetadata.mjs';\nimport { BrowserCacheLocation, LOG_LEVEL_CACHE_KEY, LOG_PII_CACHE_KEY } from '../utils/BrowserConstants.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Base class for operating context\r\n * Operating contexts are contexts in which MSAL.js is being run\r\n * More than one operating context may be available at a time\r\n * It's important from a logging and telemetry point of view for us to be able to identify the operating context.\r\n * For example: Some operating contexts will pre-cache tokens impacting performance telemetry\r\n */\nclass BaseOperatingContext {\n  static loggerCallback(level, message) {\n    switch (level) {\n      case LogLevel.Error:\n        // eslint-disable-next-line no-console\n        console.error(message);\n        return;\n      case LogLevel.Info:\n        // eslint-disable-next-line no-console\n        console.info(message);\n        return;\n      case LogLevel.Verbose:\n        // eslint-disable-next-line no-console\n        console.debug(message);\n        return;\n      case LogLevel.Warning:\n        // eslint-disable-next-line no-console\n        console.warn(message);\n        return;\n      default:\n        // eslint-disable-next-line no-console\n        console.log(message);\n        return;\n    }\n  }\n  constructor(config) {\n    /*\r\n     * If loaded in an environment where window is not available,\r\n     * set internal flag to false so that further requests fail.\r\n     * This is to support server-side rendering environments.\r\n     */\n    this.browserEnvironment = typeof window !== \"undefined\";\n    this.config = buildConfiguration(config, this.browserEnvironment);\n    let sessionStorage;\n    try {\n      sessionStorage = window[BrowserCacheLocation.SessionStorage];\n      // Mute errors if it's a non-browser environment or cookies are blocked.\n    } catch (e) {}\n    const logLevelKey = sessionStorage?.getItem(LOG_LEVEL_CACHE_KEY);\n    const piiLoggingKey = sessionStorage?.getItem(LOG_PII_CACHE_KEY)?.toLowerCase();\n    const piiLoggingEnabled = piiLoggingKey === \"true\" ? true : piiLoggingKey === \"false\" ? false : undefined;\n    const loggerOptions = {\n      ...this.config.system.loggerOptions\n    };\n    const logLevel = logLevelKey && Object.keys(LogLevel).includes(logLevelKey) ? LogLevel[logLevelKey] : undefined;\n    if (logLevel) {\n      loggerOptions.loggerCallback = BaseOperatingContext.loggerCallback;\n      loggerOptions.logLevel = logLevel;\n    }\n    if (piiLoggingEnabled !== undefined) {\n      loggerOptions.piiLoggingEnabled = piiLoggingEnabled;\n    }\n    this.logger = new Logger(loggerOptions, name, version);\n    this.available = false;\n  }\n  /**\r\n   * Return the MSAL config\r\n   * @returns BrowserConfiguration\r\n   */\n  getConfig() {\n    return this.config;\n  }\n  /**\r\n   * Returns the MSAL Logger\r\n   * @returns Logger\r\n   */\n  getLogger() {\n    return this.logger;\n  }\n  isAvailable() {\n    return this.available;\n  }\n  isBrowserEnvironment() {\n    return this.browserEnvironment;\n  }\n}\nexport { BaseOperatingContext };","map":{"version":3,"names":["BaseOperatingContext","loggerCallback","level","message","LogLevel","Error","console","error","Info","info","Verbose","debug","Warning","warn","log","constructor","config","browserEnvironment","window","buildConfiguration","sessionStorage","BrowserCacheLocation","SessionStorage","e","logLevelKey","getItem","LOG_LEVEL_CACHE_KEY","piiLoggingKey","LOG_PII_CACHE_KEY","toLowerCase","piiLoggingEnabled","undefined","loggerOptions","system","logLevel","Object","keys","includes","logger","Logger","name","version","available","getConfig","getLogger","isAvailable","isBrowserEnvironment"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-browser/src/operatingcontext/BaseOperatingContext.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Logger, LogLevel } from \"@azure/msal-common/browser\";\nimport {\n    BrowserConfiguration,\n    buildConfiguration,\n    Configuration,\n} from \"../config/Configuration.js\";\nimport { version, name } from \"../packageMetadata.js\";\nimport {\n    BrowserCacheLocation,\n    LOG_LEVEL_CACHE_KEY,\n    LOG_PII_CACHE_KEY,\n} from \"../utils/BrowserConstants.js\";\n\n/**\n * Base class for operating context\n * Operating contexts are contexts in which MSAL.js is being run\n * More than one operating context may be available at a time\n * It's important from a logging and telemetry point of view for us to be able to identify the operating context.\n * For example: Some operating contexts will pre-cache tokens impacting performance telemetry\n */\nexport abstract class BaseOperatingContext {\n    protected logger: Logger;\n    protected config: BrowserConfiguration;\n    protected available: boolean;\n    protected browserEnvironment: boolean;\n\n    protected static loggerCallback(level: LogLevel, message: string): void {\n        switch (level) {\n            case LogLevel.Error:\n                // eslint-disable-next-line no-console\n                console.error(message);\n                return;\n            case LogLevel.Info:\n                // eslint-disable-next-line no-console\n                console.info(message);\n                return;\n            case LogLevel.Verbose:\n                // eslint-disable-next-line no-console\n                console.debug(message);\n                return;\n            case LogLevel.Warning:\n                // eslint-disable-next-line no-console\n                console.warn(message);\n                return;\n            default:\n                // eslint-disable-next-line no-console\n                console.log(message);\n                return;\n        }\n    }\n\n    constructor(config: Configuration) {\n        /*\n         * If loaded in an environment where window is not available,\n         * set internal flag to false so that further requests fail.\n         * This is to support server-side rendering environments.\n         */\n        this.browserEnvironment = typeof window !== \"undefined\";\n        this.config = buildConfiguration(config, this.browserEnvironment);\n\n        let sessionStorage: Storage | undefined;\n        try {\n            sessionStorage = window[BrowserCacheLocation.SessionStorage];\n            // Mute errors if it's a non-browser environment or cookies are blocked.\n        } catch (e) {}\n\n        const logLevelKey = sessionStorage?.getItem(LOG_LEVEL_CACHE_KEY);\n        const piiLoggingKey = sessionStorage\n            ?.getItem(LOG_PII_CACHE_KEY)\n            ?.toLowerCase();\n\n        const piiLoggingEnabled =\n            piiLoggingKey === \"true\"\n                ? true\n                : piiLoggingKey === \"false\"\n                ? false\n                : undefined;\n        const loggerOptions = { ...this.config.system.loggerOptions };\n\n        const logLevel =\n            logLevelKey && Object.keys(LogLevel).includes(logLevelKey)\n                ? LogLevel[logLevelKey]\n                : undefined;\n        if (logLevel) {\n            loggerOptions.loggerCallback = BaseOperatingContext.loggerCallback;\n            loggerOptions.logLevel = logLevel;\n        }\n        if (piiLoggingEnabled !== undefined) {\n            loggerOptions.piiLoggingEnabled = piiLoggingEnabled;\n        }\n\n        this.logger = new Logger(loggerOptions, name, version);\n        this.available = false;\n    }\n\n    /**\n     * returns the name of the module containing the API controller associated with this operating context\n     */\n    abstract getModuleName(): string;\n\n    /**\n     * returns the string identifier of this operating context\n     */\n    abstract getId(): string;\n\n    /**\n     * returns a boolean indicating whether this operating context is present\n     */\n    abstract initialize(): Promise<boolean>;\n\n    /**\n     * Return the MSAL config\n     * @returns BrowserConfiguration\n     */\n    getConfig(): BrowserConfiguration {\n        return this.config;\n    }\n\n    /**\n     * Returns the MSAL Logger\n     * @returns Logger\n     */\n    getLogger(): Logger {\n        return this.logger;\n    }\n\n    isAvailable(): boolean {\n        return this.available;\n    }\n\n    isBrowserEnvironment(): boolean {\n        return this.browserEnvironment;\n    }\n}\n"],"mappings":";;;;;;;;AAAA;;;AAGG;AAeH;;;;;;AAMG;MACmBA,oBAAoB;EAM5B,OAAOC,cAAcA,CAACC,KAAe,EAAEC,OAAe;IAC5D,QAAQD,KAAK;MACT,KAAKE,QAAQ,CAACC,KAAK;;QAEfC,OAAO,CAACC,KAAK,CAACJ,OAAO,CAAC;QACtB;MACJ,KAAKC,QAAQ,CAACI,IAAI;;QAEdF,OAAO,CAACG,IAAI,CAACN,OAAO,CAAC;QACrB;MACJ,KAAKC,QAAQ,CAACM,OAAO;;QAEjBJ,OAAO,CAACK,KAAK,CAACR,OAAO,CAAC;QACtB;MACJ,KAAKC,QAAQ,CAACQ,OAAO;;QAEjBN,OAAO,CAACO,IAAI,CAACV,OAAO,CAAC;QACrB;MACJ;;QAEIG,OAAO,CAACQ,GAAG,CAACX,OAAO,CAAC;QACpB;IACP;;EAGLY,YAAYC,MAAqB;IAC7B;;;;AAIG;IACH,IAAI,CAACC,kBAAkB,GAAG,OAAOC,MAAM,KAAK,WAAW;IACvD,IAAI,CAACF,MAAM,GAAGG,kBAAkB,CAACH,MAAM,EAAE,IAAI,CAACC,kBAAkB,CAAC;IAEjE,IAAIG,cAAmC;IACvC,IAAI;MACAA,cAAc,GAAGF,MAAM,CAACG,oBAAoB,CAACC,cAAc,CAAC;;IAE/D,EAAC,OAAOC,CAAC,EAAE;IAEZ,MAAMC,WAAW,GAAGJ,cAAc,EAAEK,OAAO,CAACC,mBAAmB,CAAC;IAChE,MAAMC,aAAa,GAAGP,cAAc,EAC9BK,OAAO,CAACG,iBAAiB,CAAC,EAC1BC,WAAW,EAAE;IAEnB,MAAMC,iBAAiB,GACnBH,aAAa,KAAK,MAAM,GAClB,IAAI,GACJA,aAAa,KAAK,OAAO,GACzB,KAAK,GACLI,SAAS;IACnB,MAAMC,aAAa,GAAG;MAAE,GAAG,IAAI,CAAChB,MAAM,CAACiB,MAAM,CAACD;IAAa,CAAE;IAE7D,MAAME,QAAQ,GACVV,WAAW,IAAIW,MAAM,CAACC,IAAI,CAAChC,QAAQ,CAAC,CAACiC,QAAQ,CAACb,WAAW,CAAC,GACpDpB,QAAQ,CAACoB,WAAW,CAAC,GACrBO,SAAS;IACnB,IAAIG,QAAQ,EAAE;MACVF,aAAa,CAAC/B,cAAc,GAAGD,oBAAoB,CAACC,cAAc;MAClE+B,aAAa,CAACE,QAAQ,GAAGA,QAAQ;IACpC;IACD,IAAIJ,iBAAiB,KAAKC,SAAS,EAAE;MACjCC,aAAa,CAACF,iBAAiB,GAAGA,iBAAiB;IACtD;IAED,IAAI,CAACQ,MAAM,GAAG,IAAIC,MAAM,CAACP,aAAa,EAAEQ,IAAI,EAAEC,OAAO,CAAC;IACtD,IAAI,CAACC,SAAS,GAAG,KAAK;;EAkB1B;;;AAGG;EACHC,SAASA,CAAA;IACL,OAAO,IAAI,CAAC3B,MAAM;;EAGtB;;;AAGG;EACH4B,SAASA,CAAA;IACL,OAAO,IAAI,CAACN,MAAM;;EAGtBO,WAAWA,CAAA;IACP,OAAO,IAAI,CAACH,SAAS;;EAGzBI,oBAAoBA,CAAA;IAChB,OAAO,IAAI,CAAC7B,kBAAkB;;AAErC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}