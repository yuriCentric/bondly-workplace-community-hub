{"ast":null,"code":"/*! @azure/msal-browser v4.13.1 2025-06-10 */\n'use strict';\n\nimport { AuthError, InteractionRequiredAuthError, createInteractionRequiredAuthError, InteractionRequiredAuthErrorCodes } from '@azure/msal-common/browser';\nimport { createBrowserAuthError } from './BrowserAuthError.mjs';\nimport { contentError, userSwitch } from './NativeAuthErrorCodes.mjs';\nimport { PERSISTENT_ERROR, DISABLED, NO_NETWORK, USER_CANCEL, USER_INTERACTION_REQUIRED, ACCOUNT_UNAVAILABLE } from '../broker/nativeBroker/NativeStatusCodes.mjs';\nimport { noNetworkConnectivity, userCancelled } from './BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst INVALID_METHOD_ERROR = -2147186943;\nconst NativeAuthErrorMessages = {\n  [userSwitch]: \"User attempted to switch accounts in the native broker, which is not allowed. All new accounts must sign-in through the standard web flow first, please try again.\"\n};\nclass NativeAuthError extends AuthError {\n  constructor(errorCode, description, ext) {\n    super(errorCode, description);\n    Object.setPrototypeOf(this, NativeAuthError.prototype);\n    this.name = \"NativeAuthError\";\n    this.ext = ext;\n  }\n}\n/**\r\n * These errors should result in a fallback to the 'standard' browser based auth flow.\r\n */\nfunction isFatalNativeAuthError(error) {\n  if (error.ext && error.ext.status && (error.ext.status === PERSISTENT_ERROR || error.ext.status === DISABLED)) {\n    return true;\n  }\n  if (error.ext && error.ext.error && error.ext.error === INVALID_METHOD_ERROR) {\n    return true;\n  }\n  switch (error.errorCode) {\n    case contentError:\n      return true;\n    default:\n      return false;\n  }\n}\n/**\r\n * Create the appropriate error object based on the WAM status code.\r\n * @param code\r\n * @param description\r\n * @param ext\r\n * @returns\r\n */\nfunction createNativeAuthError(code, description, ext) {\n  if (ext && ext.status) {\n    switch (ext.status) {\n      case ACCOUNT_UNAVAILABLE:\n        return createInteractionRequiredAuthError(InteractionRequiredAuthErrorCodes.nativeAccountUnavailable);\n      case USER_INTERACTION_REQUIRED:\n        return new InteractionRequiredAuthError(code, description);\n      case USER_CANCEL:\n        return createBrowserAuthError(userCancelled);\n      case NO_NETWORK:\n        return createBrowserAuthError(noNetworkConnectivity);\n    }\n  }\n  return new NativeAuthError(code, NativeAuthErrorMessages[code] || description, ext);\n}\nexport { NativeAuthError, NativeAuthErrorMessages, createNativeAuthError, isFatalNativeAuthError };","map":{"version":3,"names":["INVALID_METHOD_ERROR","NativeAuthErrorMessages","userSwitch","NativeAuthError","AuthError","constructor","errorCode","description","ext","Object","setPrototypeOf","prototype","name","isFatalNativeAuthError","error","status","PERSISTENT_ERROR","DISABLED","contentError","createNativeAuthError","code","ACCOUNT_UNAVAILABLE","createInteractionRequiredAuthError","InteractionRequiredAuthErrorCodes","nativeAccountUnavailable","USER_INTERACTION_REQUIRED","InteractionRequiredAuthError","USER_CANCEL","createBrowserAuthError","userCancelled","NO_NETWORK","noNetworkConnectivity"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-browser/src/error/NativeAuthError.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AuthError,\n    InteractionRequiredAuthError,\n    InteractionRequiredAuthErrorCodes,\n    createInteractionRequiredAuthError,\n} from \"@azure/msal-common/browser\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"./BrowserAuthError.js\";\n\nimport * as NativeAuthErrorCodes from \"./NativeAuthErrorCodes.js\";\nimport * as NativeStatusCodes from \"../broker/nativeBroker/NativeStatusCodes.js\";\nexport { NativeAuthErrorCodes };\n\nexport type OSError = {\n    error?: number;\n    protocol_error?: string;\n    properties?: object;\n    status?: string;\n    retryable?: boolean;\n};\n\nconst INVALID_METHOD_ERROR = -2147186943;\n\nexport const NativeAuthErrorMessages = {\n    [NativeAuthErrorCodes.userSwitch]:\n        \"User attempted to switch accounts in the native broker, which is not allowed. All new accounts must sign-in through the standard web flow first, please try again.\",\n};\n\nexport class NativeAuthError extends AuthError {\n    ext: OSError | undefined;\n\n    constructor(errorCode: string, description?: string, ext?: OSError) {\n        super(errorCode, description);\n\n        Object.setPrototypeOf(this, NativeAuthError.prototype);\n        this.name = \"NativeAuthError\";\n        this.ext = ext;\n    }\n}\n\n/**\n * These errors should result in a fallback to the 'standard' browser based auth flow.\n */\nexport function isFatalNativeAuthError(error: NativeAuthError): boolean {\n    if (\n        error.ext &&\n        error.ext.status &&\n        (error.ext.status === NativeStatusCodes.PERSISTENT_ERROR ||\n            error.ext.status === NativeStatusCodes.DISABLED)\n    ) {\n        return true;\n    }\n\n    if (\n        error.ext &&\n        error.ext.error &&\n        error.ext.error === INVALID_METHOD_ERROR\n    ) {\n        return true;\n    }\n\n    switch (error.errorCode) {\n        case NativeAuthErrorCodes.contentError:\n            return true;\n        default:\n            return false;\n    }\n}\n\n/**\n * Create the appropriate error object based on the WAM status code.\n * @param code\n * @param description\n * @param ext\n * @returns\n */\nexport function createNativeAuthError(\n    code: string,\n    description?: string,\n    ext?: OSError\n): AuthError {\n    if (ext && ext.status) {\n        switch (ext.status) {\n            case NativeStatusCodes.ACCOUNT_UNAVAILABLE:\n                return createInteractionRequiredAuthError(\n                    InteractionRequiredAuthErrorCodes.nativeAccountUnavailable\n                );\n            case NativeStatusCodes.USER_INTERACTION_REQUIRED:\n                return new InteractionRequiredAuthError(code, description);\n            case NativeStatusCodes.USER_CANCEL:\n                return createBrowserAuthError(\n                    BrowserAuthErrorCodes.userCancelled\n                );\n            case NativeStatusCodes.NO_NETWORK:\n                return createBrowserAuthError(\n                    BrowserAuthErrorCodes.noNetworkConnectivity\n                );\n        }\n    }\n\n    return new NativeAuthError(\n        code,\n        NativeAuthErrorMessages[code] || description,\n        ext\n    );\n}\n"],"mappings":";;;;;;;;;AAAA;;;AAGG;AAyBH,MAAMA,oBAAoB,GAAG,WAAW;AAE3B,MAAAC,uBAAuB,GAAG;EACnC,CAACC,UAA+B,GAC5B;;AAGF,MAAOC,eAAgB,SAAQC,SAAS;EAG1CC,YAAYC,SAAiB,EAAEC,WAAoB,EAAEC,GAAa;IAC9D,KAAK,CAACF,SAAS,EAAEC,WAAW,CAAC;IAE7BE,MAAM,CAACC,cAAc,CAAC,IAAI,EAAEP,eAAe,CAACQ,SAAS,CAAC;IACtD,IAAI,CAACC,IAAI,GAAG,iBAAiB;IAC7B,IAAI,CAACJ,GAAG,GAAGA,GAAG;;AAErB;AAED;;AAEG;AACG,SAAUK,sBAAsBA,CAACC,KAAsB;EACzD,IACIA,KAAK,CAACN,GAAG,IACTM,KAAK,CAACN,GAAG,CAACO,MAAM,KACfD,KAAK,CAACN,GAAG,CAACO,MAAM,KAAKC,gBAAkC,IACpDF,KAAK,CAACN,GAAG,CAACO,MAAM,KAAKE,QAA0B,CAAC,EACtD;IACE,OAAO,IAAI;EACd;EAED,IACIH,KAAK,CAACN,GAAG,IACTM,KAAK,CAACN,GAAG,CAACM,KAAK,IACfA,KAAK,CAACN,GAAG,CAACM,KAAK,KAAKd,oBAAoB,EAC1C;IACE,OAAO,IAAI;EACd;EAED,QAAQc,KAAK,CAACR,SAAS;IACnB,KAAKY,YAAiC;MAClC,OAAO,IAAI;IACf;MACI,OAAO,KAAK;EACnB;AACL;AAEA;;;;;;AAMG;SACaC,qBAAqBA,CACjCC,IAAY,EACZb,WAAoB,EACpBC,GAAa;EAEb,IAAIA,GAAG,IAAIA,GAAG,CAACO,MAAM,EAAE;IACnB,QAAQP,GAAG,CAACO,MAAM;MACd,KAAKM,mBAAqC;QACtC,OAAOC,kCAAkC,CACrCC,iCAAiC,CAACC,wBAAwB,CAC7D;MACL,KAAKC,yBAA2C;QAC5C,OAAO,IAAIC,4BAA4B,CAACN,IAAI,EAAEb,WAAW,CAAC;MAC9D,KAAKoB,WAA6B;QAC9B,OAAOC,sBAAsB,CACzBC,aAAmC,CACtC;MACL,KAAKC,UAA4B;QAC7B,OAAOF,sBAAsB,CACzBG,qBAA2C,CAC9C;IACR;EACJ;EAED,OAAO,IAAI5B,eAAe,CACtBiB,IAAI,EACJnB,uBAAuB,CAACmB,IAAI,CAAC,IAAIb,WAAW,EAC5CC,GAAG,CACN;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}