{"ast":null,"code":"/*! @azure/msal-common v15.7.0 2025-05-30 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Enumeration of operations that are instrumented by have their performance measured by the PerformanceClient.\r\n *\r\n * @export\r\n * @enum {number}\r\n */\nconst PerformanceEvents = {\n  /**\r\n   * acquireTokenByCode API (msal-browser and msal-node).\r\n   * Used to acquire tokens by trading an authorization code against the token endpoint.\r\n   */\n  AcquireTokenByCode: \"acquireTokenByCode\",\n  /**\r\n   * acquireTokenByRefreshToken API (msal-browser and msal-node).\r\n   * Used to renew an access token using a refresh token against the token endpoint.\r\n   */\n  AcquireTokenByRefreshToken: \"acquireTokenByRefreshToken\",\n  /**\r\n   * acquireTokenSilent API (msal-browser and msal-node).\r\n   * Used to silently acquire a new access token (from the cache or the network).\r\n   */\n  AcquireTokenSilent: \"acquireTokenSilent\",\n  /**\r\n   * acquireTokenSilentAsync (msal-browser).\r\n   * Internal API for acquireTokenSilent.\r\n   */\n  AcquireTokenSilentAsync: \"acquireTokenSilentAsync\",\n  /**\r\n   * acquireTokenPopup (msal-browser).\r\n   * Used to acquire a new access token interactively through pop ups\r\n   */\n  AcquireTokenPopup: \"acquireTokenPopup\",\n  /**\r\n   * acquireTokenPreRedirect (msal-browser).\r\n   * First part of the redirect flow.\r\n   * Used to acquire a new access token interactively through redirects.\r\n   */\n  AcquireTokenPreRedirect: \"acquireTokenPreRedirect\",\n  /**\r\n   * acquireTokenRedirect (msal-browser).\r\n   * Second part of the redirect flow.\r\n   * Used to acquire a new access token interactively through redirects.\r\n   */\n  AcquireTokenRedirect: \"acquireTokenRedirect\",\n  /**\r\n   * getPublicKeyThumbprint API in CryptoOpts class (msal-browser).\r\n   * Used to generate a public/private keypair and generate a public key thumbprint for pop requests.\r\n   */\n  CryptoOptsGetPublicKeyThumbprint: \"cryptoOptsGetPublicKeyThumbprint\",\n  /**\r\n   * signJwt API in CryptoOpts class (msal-browser).\r\n   * Used to signed a pop token.\r\n   */\n  CryptoOptsSignJwt: \"cryptoOptsSignJwt\",\n  /**\r\n   * acquireToken API in the SilentCacheClient class (msal-browser).\r\n   * Used to read access tokens from the cache.\r\n   */\n  SilentCacheClientAcquireToken: \"silentCacheClientAcquireToken\",\n  /**\r\n   * acquireToken API in the SilentIframeClient class (msal-browser).\r\n   * Used to acquire a new set of tokens from the authorize endpoint in a hidden iframe.\r\n   */\n  SilentIframeClientAcquireToken: \"silentIframeClientAcquireToken\",\n  AwaitConcurrentIframe: \"awaitConcurrentIframe\",\n  /**\r\n   * acquireToken API in SilentRereshClient (msal-browser).\r\n   * Used to acquire a new set of tokens from the token endpoint using a refresh token.\r\n   */\n  SilentRefreshClientAcquireToken: \"silentRefreshClientAcquireToken\",\n  /**\r\n   * ssoSilent API (msal-browser).\r\n   * Used to silently acquire an authorization code and set of tokens using a hidden iframe.\r\n   */\n  SsoSilent: \"ssoSilent\",\n  /**\r\n   * getDiscoveredAuthority API in StandardInteractionClient class (msal-browser).\r\n   * Used to load authority metadata for a request.\r\n   */\n  StandardInteractionClientGetDiscoveredAuthority: \"standardInteractionClientGetDiscoveredAuthority\",\n  /**\r\n   * acquireToken APIs in msal-browser.\r\n   * Used to make an /authorize endpoint call with native brokering enabled.\r\n   */\n  FetchAccountIdWithNativeBroker: \"fetchAccountIdWithNativeBroker\",\n  /**\r\n   * acquireToken API in NativeInteractionClient class (msal-browser).\r\n   * Used to acquire a token from Native component when native brokering is enabled.\r\n   */\n  NativeInteractionClientAcquireToken: \"nativeInteractionClientAcquireToken\",\n  /**\r\n   * Time spent creating default headers for requests to token endpoint\r\n   */\n  BaseClientCreateTokenRequestHeaders: \"baseClientCreateTokenRequestHeaders\",\n  /**\r\n   * Time spent sending/waiting for the response of a request to the token endpoint\r\n   */\n  NetworkClientSendPostRequestAsync: \"networkClientSendPostRequestAsync\",\n  RefreshTokenClientExecutePostToTokenEndpoint: \"refreshTokenClientExecutePostToTokenEndpoint\",\n  AuthorizationCodeClientExecutePostToTokenEndpoint: \"authorizationCodeClientExecutePostToTokenEndpoint\",\n  /**\r\n   * Used to measure the time taken for completing embedded-broker handshake (PW-Broker).\r\n   */\n  BrokerHandhshake: \"brokerHandshake\",\n  /**\r\n   * acquireTokenByRefreshToken API in BrokerClientApplication (PW-Broker) .\r\n   */\n  AcquireTokenByRefreshTokenInBroker: \"acquireTokenByRefreshTokenInBroker\",\n  /**\r\n   * Time taken for token acquisition by broker\r\n   */\n  AcquireTokenByBroker: \"acquireTokenByBroker\",\n  /**\r\n   * Time spent on the network for refresh token acquisition\r\n   */\n  RefreshTokenClientExecuteTokenRequest: \"refreshTokenClientExecuteTokenRequest\",\n  /**\r\n   * Time taken for acquiring refresh token , records RT size\r\n   */\n  RefreshTokenClientAcquireToken: \"refreshTokenClientAcquireToken\",\n  /**\r\n   * Time taken for acquiring cached refresh token\r\n   */\n  RefreshTokenClientAcquireTokenWithCachedRefreshToken: \"refreshTokenClientAcquireTokenWithCachedRefreshToken\",\n  /**\r\n   * acquireTokenByRefreshToken API in RefreshTokenClient (msal-common).\r\n   */\n  RefreshTokenClientAcquireTokenByRefreshToken: \"refreshTokenClientAcquireTokenByRefreshToken\",\n  /**\r\n   * Helper function to create token request body in RefreshTokenClient (msal-common).\r\n   */\n  RefreshTokenClientCreateTokenRequestBody: \"refreshTokenClientCreateTokenRequestBody\",\n  /**\r\n   * acquireTokenFromCache (msal-browser).\r\n   * Internal API for acquiring token from cache\r\n   */\n  AcquireTokenFromCache: \"acquireTokenFromCache\",\n  SilentFlowClientAcquireCachedToken: \"silentFlowClientAcquireCachedToken\",\n  SilentFlowClientGenerateResultFromCacheRecord: \"silentFlowClientGenerateResultFromCacheRecord\",\n  /**\r\n   * acquireTokenBySilentIframe (msal-browser).\r\n   * Internal API for acquiring token by silent Iframe\r\n   */\n  AcquireTokenBySilentIframe: \"acquireTokenBySilentIframe\",\n  /**\r\n   * Internal API for initializing base request in BaseInteractionClient (msal-browser)\r\n   */\n  InitializeBaseRequest: \"initializeBaseRequest\",\n  /**\r\n   * Internal API for initializing silent request in SilentCacheClient (msal-browser)\r\n   */\n  InitializeSilentRequest: \"initializeSilentRequest\",\n  InitializeClientApplication: \"initializeClientApplication\",\n  InitializeCache: \"initializeCache\",\n  /**\r\n   * Helper function in SilentIframeClient class (msal-browser).\r\n   */\n  SilentIframeClientTokenHelper: \"silentIframeClientTokenHelper\",\n  /**\r\n   * SilentHandler\r\n   */\n  SilentHandlerInitiateAuthRequest: \"silentHandlerInitiateAuthRequest\",\n  SilentHandlerMonitorIframeForHash: \"silentHandlerMonitorIframeForHash\",\n  SilentHandlerLoadFrame: \"silentHandlerLoadFrame\",\n  SilentHandlerLoadFrameSync: \"silentHandlerLoadFrameSync\",\n  /**\r\n   * Helper functions in StandardInteractionClient class (msal-browser)\r\n   */\n  StandardInteractionClientCreateAuthCodeClient: \"standardInteractionClientCreateAuthCodeClient\",\n  StandardInteractionClientGetClientConfiguration: \"standardInteractionClientGetClientConfiguration\",\n  StandardInteractionClientInitializeAuthorizationRequest: \"standardInteractionClientInitializeAuthorizationRequest\",\n  /**\r\n   * getAuthCodeUrl API (msal-browser and msal-node).\r\n   */\n  GetAuthCodeUrl: \"getAuthCodeUrl\",\n  GetStandardParams: \"getStandardParams\",\n  /**\r\n   * Functions from InteractionHandler (msal-browser)\r\n   */\n  HandleCodeResponseFromServer: \"handleCodeResponseFromServer\",\n  HandleCodeResponse: \"handleCodeResponse\",\n  HandleResponseEar: \"handleResponseEar\",\n  HandleResponsePlatformBroker: \"handleResponsePlatformBroker\",\n  HandleResponseCode: \"handleResponseCode\",\n  UpdateTokenEndpointAuthority: \"updateTokenEndpointAuthority\",\n  /**\r\n   * APIs in Authorization Code Client (msal-common)\r\n   */\n  AuthClientAcquireToken: \"authClientAcquireToken\",\n  AuthClientExecuteTokenRequest: \"authClientExecuteTokenRequest\",\n  AuthClientCreateTokenRequestBody: \"authClientCreateTokenRequestBody\",\n  /**\r\n   * Generate functions in PopTokenGenerator (msal-common)\r\n   */\n  PopTokenGenerateCnf: \"popTokenGenerateCnf\",\n  PopTokenGenerateKid: \"popTokenGenerateKid\",\n  /**\r\n   * handleServerTokenResponse API in ResponseHandler (msal-common)\r\n   */\n  HandleServerTokenResponse: \"handleServerTokenResponse\",\n  DeserializeResponse: \"deserializeResponse\",\n  /**\r\n   * Authority functions\r\n   */\n  AuthorityFactoryCreateDiscoveredInstance: \"authorityFactoryCreateDiscoveredInstance\",\n  AuthorityResolveEndpointsAsync: \"authorityResolveEndpointsAsync\",\n  AuthorityResolveEndpointsFromLocalSources: \"authorityResolveEndpointsFromLocalSources\",\n  AuthorityGetCloudDiscoveryMetadataFromNetwork: \"authorityGetCloudDiscoveryMetadataFromNetwork\",\n  AuthorityUpdateCloudDiscoveryMetadata: \"authorityUpdateCloudDiscoveryMetadata\",\n  AuthorityGetEndpointMetadataFromNetwork: \"authorityGetEndpointMetadataFromNetwork\",\n  AuthorityUpdateEndpointMetadata: \"authorityUpdateEndpointMetadata\",\n  AuthorityUpdateMetadataWithRegionalInformation: \"authorityUpdateMetadataWithRegionalInformation\",\n  /**\r\n   * Region Discovery functions\r\n   */\n  RegionDiscoveryDetectRegion: \"regionDiscoveryDetectRegion\",\n  RegionDiscoveryGetRegionFromIMDS: \"regionDiscoveryGetRegionFromIMDS\",\n  RegionDiscoveryGetCurrentVersion: \"regionDiscoveryGetCurrentVersion\",\n  AcquireTokenByCodeAsync: \"acquireTokenByCodeAsync\",\n  GetEndpointMetadataFromNetwork: \"getEndpointMetadataFromNetwork\",\n  GetCloudDiscoveryMetadataFromNetworkMeasurement: \"getCloudDiscoveryMetadataFromNetworkMeasurement\",\n  HandleRedirectPromiseMeasurement: \"handleRedirectPromise\",\n  HandleNativeRedirectPromiseMeasurement: \"handleNativeRedirectPromise\",\n  UpdateCloudDiscoveryMetadataMeasurement: \"updateCloudDiscoveryMetadataMeasurement\",\n  UsernamePasswordClientAcquireToken: \"usernamePasswordClientAcquireToken\",\n  NativeMessageHandlerHandshake: \"nativeMessageHandlerHandshake\",\n  NativeGenerateAuthResult: \"nativeGenerateAuthResult\",\n  RemoveHiddenIframe: \"removeHiddenIframe\",\n  /**\r\n   * Cache operations\r\n   */\n  ClearTokensAndKeysWithClaims: \"clearTokensAndKeysWithClaims\",\n  CacheManagerGetRefreshToken: \"cacheManagerGetRefreshToken\",\n  ImportExistingCache: \"importExistingCache\",\n  SetUserData: \"setUserData\",\n  LocalStorageUpdated: \"localStorageUpdated\",\n  /**\r\n   * Crypto Operations\r\n   */\n  GeneratePkceCodes: \"generatePkceCodes\",\n  GenerateCodeVerifier: \"generateCodeVerifier\",\n  GenerateCodeChallengeFromVerifier: \"generateCodeChallengeFromVerifier\",\n  Sha256Digest: \"sha256Digest\",\n  GetRandomValues: \"getRandomValues\",\n  GenerateHKDF: \"generateHKDF\",\n  GenerateBaseKey: \"generateBaseKey\",\n  Base64Decode: \"base64Decode\",\n  UrlEncodeArr: \"urlEncodeArr\",\n  Encrypt: \"encrypt\",\n  Decrypt: \"decrypt\",\n  GenerateEarKey: \"generateEarKey\",\n  DecryptEarResponse: \"decryptEarResponse\"\n};\nconst PerformanceEventAbbreviations = new Map([[PerformanceEvents.AcquireTokenByCode, \"ATByCode\"], [PerformanceEvents.AcquireTokenByRefreshToken, \"ATByRT\"], [PerformanceEvents.AcquireTokenSilent, \"ATS\"], [PerformanceEvents.AcquireTokenSilentAsync, \"ATSAsync\"], [PerformanceEvents.AcquireTokenPopup, \"ATPopup\"], [PerformanceEvents.AcquireTokenRedirect, \"ATRedirect\"], [PerformanceEvents.CryptoOptsGetPublicKeyThumbprint, \"CryptoGetPKThumb\"], [PerformanceEvents.CryptoOptsSignJwt, \"CryptoSignJwt\"], [PerformanceEvents.SilentCacheClientAcquireToken, \"SltCacheClientAT\"], [PerformanceEvents.SilentIframeClientAcquireToken, \"SltIframeClientAT\"], [PerformanceEvents.SilentRefreshClientAcquireToken, \"SltRClientAT\"], [PerformanceEvents.SsoSilent, \"SsoSlt\"], [PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, \"StdIntClientGetDiscAuth\"], [PerformanceEvents.FetchAccountIdWithNativeBroker, \"FetchAccIdWithNtvBroker\"], [PerformanceEvents.NativeInteractionClientAcquireToken, \"NtvIntClientAT\"], [PerformanceEvents.BaseClientCreateTokenRequestHeaders, \"BaseClientCreateTReqHead\"], [PerformanceEvents.NetworkClientSendPostRequestAsync, \"NetClientSendPost\"], [PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint, \"RTClientExecPost\"], [PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint, \"AuthCodeClientExecPost\"], [PerformanceEvents.BrokerHandhshake, \"BrokerHandshake\"], [PerformanceEvents.AcquireTokenByRefreshTokenInBroker, \"ATByRTInBroker\"], [PerformanceEvents.AcquireTokenByBroker, \"ATByBroker\"], [PerformanceEvents.RefreshTokenClientExecuteTokenRequest, \"RTClientExecTReq\"], [PerformanceEvents.RefreshTokenClientAcquireToken, \"RTClientAT\"], [PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, \"RTClientATWithCachedRT\"], [PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, \"RTClientATByRT\"], [PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, \"RTClientCreateTReqBody\"], [PerformanceEvents.AcquireTokenFromCache, \"ATFromCache\"], [PerformanceEvents.SilentFlowClientAcquireCachedToken, \"SltFlowClientATCached\"], [PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord, \"SltFlowClientGenResFromCache\"], [PerformanceEvents.AcquireTokenBySilentIframe, \"ATBySltIframe\"], [PerformanceEvents.InitializeBaseRequest, \"InitBaseReq\"], [PerformanceEvents.InitializeSilentRequest, \"InitSltReq\"], [PerformanceEvents.InitializeClientApplication, \"InitClientApplication\"], [PerformanceEvents.InitializeCache, \"InitCache\"], [PerformanceEvents.ImportExistingCache, \"importCache\"], [PerformanceEvents.SetUserData, \"setUserData\"], [PerformanceEvents.LocalStorageUpdated, \"localStorageUpdated\"], [PerformanceEvents.SilentIframeClientTokenHelper, \"SIClientTHelper\"], [PerformanceEvents.SilentHandlerInitiateAuthRequest, \"SHandlerInitAuthReq\"], [PerformanceEvents.SilentHandlerMonitorIframeForHash, \"SltHandlerMonitorIframeForHash\"], [PerformanceEvents.SilentHandlerLoadFrame, \"SHandlerLoadFrame\"], [PerformanceEvents.SilentHandlerLoadFrameSync, \"SHandlerLoadFrameSync\"], [PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, \"StdIntClientCreateAuthCodeClient\"], [PerformanceEvents.StandardInteractionClientGetClientConfiguration, \"StdIntClientGetClientConf\"], [PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, \"StdIntClientInitAuthReq\"], [PerformanceEvents.GetAuthCodeUrl, \"GetAuthCodeUrl\"], [PerformanceEvents.HandleCodeResponseFromServer, \"HandleCodeResFromServer\"], [PerformanceEvents.HandleCodeResponse, \"HandleCodeResp\"], [PerformanceEvents.HandleResponseEar, \"HandleRespEar\"], [PerformanceEvents.HandleResponseCode, \"HandleRespCode\"], [PerformanceEvents.HandleResponsePlatformBroker, \"HandleRespPlatBroker\"], [PerformanceEvents.UpdateTokenEndpointAuthority, \"UpdTEndpointAuth\"], [PerformanceEvents.AuthClientAcquireToken, \"AuthClientAT\"], [PerformanceEvents.AuthClientExecuteTokenRequest, \"AuthClientExecTReq\"], [PerformanceEvents.AuthClientCreateTokenRequestBody, \"AuthClientCreateTReqBody\"], [PerformanceEvents.PopTokenGenerateCnf, \"PopTGenCnf\"], [PerformanceEvents.PopTokenGenerateKid, \"PopTGenKid\"], [PerformanceEvents.HandleServerTokenResponse, \"HandleServerTRes\"], [PerformanceEvents.DeserializeResponse, \"DeserializeRes\"], [PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, \"AuthFactCreateDiscInst\"], [PerformanceEvents.AuthorityResolveEndpointsAsync, \"AuthResolveEndpointsAsync\"], [PerformanceEvents.AuthorityResolveEndpointsFromLocalSources, \"AuthResolveEndpointsFromLocal\"], [PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, \"AuthGetCDMetaFromNet\"], [PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, \"AuthUpdCDMeta\"], [PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, \"AuthUpdCDMetaFromNet\"], [PerformanceEvents.AuthorityUpdateEndpointMetadata, \"AuthUpdEndpointMeta\"], [PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, \"AuthUpdMetaWithRegInfo\"], [PerformanceEvents.RegionDiscoveryDetectRegion, \"RegDiscDetectReg\"], [PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, \"RegDiscGetRegFromIMDS\"], [PerformanceEvents.RegionDiscoveryGetCurrentVersion, \"RegDiscGetCurrentVer\"], [PerformanceEvents.AcquireTokenByCodeAsync, \"ATByCodeAsync\"], [PerformanceEvents.GetEndpointMetadataFromNetwork, \"GetEndpointMetaFromNet\"], [PerformanceEvents.GetCloudDiscoveryMetadataFromNetworkMeasurement, \"GetCDMetaFromNet\"], [PerformanceEvents.HandleRedirectPromiseMeasurement, \"HandleRedirectPromise\"], [PerformanceEvents.HandleNativeRedirectPromiseMeasurement, \"HandleNtvRedirectPromise\"], [PerformanceEvents.UpdateCloudDiscoveryMetadataMeasurement, \"UpdateCDMeta\"], [PerformanceEvents.UsernamePasswordClientAcquireToken, \"UserPassClientAT\"], [PerformanceEvents.NativeMessageHandlerHandshake, \"NtvMsgHandlerHandshake\"], [PerformanceEvents.NativeGenerateAuthResult, \"NtvGenAuthRes\"], [PerformanceEvents.RemoveHiddenIframe, \"RemoveHiddenIframe\"], [PerformanceEvents.ClearTokensAndKeysWithClaims, \"ClearTAndKeysWithClaims\"], [PerformanceEvents.CacheManagerGetRefreshToken, \"CacheManagerGetRT\"], [PerformanceEvents.GeneratePkceCodes, \"GenPkceCodes\"], [PerformanceEvents.GenerateCodeVerifier, \"GenCodeVerifier\"], [PerformanceEvents.GenerateCodeChallengeFromVerifier, \"GenCodeChallengeFromVerifier\"], [PerformanceEvents.Sha256Digest, \"Sha256Digest\"], [PerformanceEvents.GetRandomValues, \"GetRandomValues\"], [PerformanceEvents.GenerateHKDF, \"genHKDF\"], [PerformanceEvents.GenerateBaseKey, \"genBaseKey\"], [PerformanceEvents.Base64Decode, \"b64Decode\"], [PerformanceEvents.UrlEncodeArr, \"urlEncArr\"], [PerformanceEvents.Encrypt, \"encrypt\"], [PerformanceEvents.Decrypt, \"decrypt\"], [PerformanceEvents.GenerateEarKey, \"genEarKey\"], [PerformanceEvents.DecryptEarResponse, \"decryptEarResp\"]]);\n/**\r\n * State of the performance event.\r\n *\r\n * @export\r\n * @enum {number}\r\n */\nconst PerformanceEventStatus = {\n  NotStarted: 0,\n  InProgress: 1,\n  Completed: 2\n};\nconst IntFields = new Set([\"accessTokenSize\", \"durationMs\", \"idTokenSize\", \"matsSilentStatus\", \"matsHttpStatus\", \"refreshTokenSize\", \"queuedTimeMs\", \"startTimeMs\", \"status\", \"multiMatchedAT\", \"multiMatchedID\", \"multiMatchedRT\", \"unencryptedCacheCount\", \"encryptedCacheExpiredCount\"]);\nexport { IntFields, PerformanceEventAbbreviations, PerformanceEventStatus, PerformanceEvents };","map":{"version":3,"names":["PerformanceEvents","AcquireTokenByCode","AcquireTokenByRefreshToken","AcquireTokenSilent","AcquireTokenSilentAsync","AcquireTokenPopup","AcquireTokenPreRedirect","AcquireTokenRedirect","CryptoOptsGetPublicKeyThumbprint","CryptoOptsSignJwt","SilentCacheClientAcquireToken","SilentIframeClientAcquireToken","AwaitConcurrentIframe","SilentRefreshClientAcquireToken","SsoSilent","StandardInteractionClientGetDiscoveredAuthority","FetchAccountIdWithNativeBroker","NativeInteractionClientAcquireToken","BaseClientCreateTokenRequestHeaders","NetworkClientSendPostRequestAsync","RefreshTokenClientExecutePostToTokenEndpoint","AuthorizationCodeClientExecutePostToTokenEndpoint","BrokerHandhshake","AcquireTokenByRefreshTokenInBroker","AcquireTokenByBroker","RefreshTokenClientExecuteTokenRequest","RefreshTokenClientAcquireToken","RefreshTokenClientAcquireTokenWithCachedRefreshToken","RefreshTokenClientAcquireTokenByRefreshToken","RefreshTokenClientCreateTokenRequestBody","AcquireTokenFromCache","SilentFlowClientAcquireCachedToken","SilentFlowClientGenerateResultFromCacheRecord","AcquireTokenBySilentIframe","InitializeBaseRequest","InitializeSilentRequest","InitializeClientApplication","InitializeCache","SilentIframeClientTokenHelper","SilentHandlerInitiateAuthRequest","SilentHandlerMonitorIframeForHash","SilentHandlerLoadFrame","SilentHandlerLoadFrameSync","StandardInteractionClientCreateAuthCodeClient","StandardInteractionClientGetClientConfiguration","StandardInteractionClientInitializeAuthorizationRequest","GetAuthCodeUrl","GetStandardParams","HandleCodeResponseFromServer","HandleCodeResponse","HandleResponseEar","HandleResponsePlatformBroker","HandleResponseCode","UpdateTokenEndpointAuthority","AuthClientAcquireToken","AuthClientExecuteTokenRequest","AuthClientCreateTokenRequestBody","PopTokenGenerateCnf","PopTokenGenerateKid","HandleServerTokenResponse","DeserializeResponse","AuthorityFactoryCreateDiscoveredInstance","AuthorityResolveEndpointsAsync","AuthorityResolveEndpointsFromLocalSources","AuthorityGetCloudDiscoveryMetadataFromNetwork","AuthorityUpdateCloudDiscoveryMetadata","AuthorityGetEndpointMetadataFromNetwork","AuthorityUpdateEndpointMetadata","AuthorityUpdateMetadataWithRegionalInformation","RegionDiscoveryDetectRegion","RegionDiscoveryGetRegionFromIMDS","RegionDiscoveryGetCurrentVersion","AcquireTokenByCodeAsync","GetEndpointMetadataFromNetwork","GetCloudDiscoveryMetadataFromNetworkMeasurement","HandleRedirectPromiseMeasurement","HandleNativeRedirectPromiseMeasurement","UpdateCloudDiscoveryMetadataMeasurement","UsernamePasswordClientAcquireToken","NativeMessageHandlerHandshake","NativeGenerateAuthResult","RemoveHiddenIframe","ClearTokensAndKeysWithClaims","CacheManagerGetRefreshToken","ImportExistingCache","SetUserData","LocalStorageUpdated","GeneratePkceCodes","GenerateCodeVerifier","GenerateCodeChallengeFromVerifier","Sha256Digest","GetRandomValues","GenerateHKDF","GenerateBaseKey","Base64Decode","UrlEncodeArr","Encrypt","Decrypt","GenerateEarKey","DecryptEarResponse","PerformanceEventAbbreviations","Map","PerformanceEventStatus","NotStarted","InProgress","Completed","IntFields","Set"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-common/src/telemetry/performance/PerformanceEvent.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Enumeration of operations that are instrumented by have their performance measured by the PerformanceClient.\n *\n * @export\n * @enum {number}\n */\nexport const PerformanceEvents = {\n    /**\n     * acquireTokenByCode API (msal-browser and msal-node).\n     * Used to acquire tokens by trading an authorization code against the token endpoint.\n     */\n    AcquireTokenByCode: \"acquireTokenByCode\",\n\n    /**\n     * acquireTokenByRefreshToken API (msal-browser and msal-node).\n     * Used to renew an access token using a refresh token against the token endpoint.\n     */\n    AcquireTokenByRefreshToken: \"acquireTokenByRefreshToken\",\n\n    /**\n     * acquireTokenSilent API (msal-browser and msal-node).\n     * Used to silently acquire a new access token (from the cache or the network).\n     */\n    AcquireTokenSilent: \"acquireTokenSilent\",\n\n    /**\n     * acquireTokenSilentAsync (msal-browser).\n     * Internal API for acquireTokenSilent.\n     */\n    AcquireTokenSilentAsync: \"acquireTokenSilentAsync\",\n\n    /**\n     * acquireTokenPopup (msal-browser).\n     * Used to acquire a new access token interactively through pop ups\n     */\n    AcquireTokenPopup: \"acquireTokenPopup\",\n\n    /**\n     * acquireTokenPreRedirect (msal-browser).\n     * First part of the redirect flow.\n     * Used to acquire a new access token interactively through redirects.\n     */\n    AcquireTokenPreRedirect: \"acquireTokenPreRedirect\",\n\n    /**\n     * acquireTokenRedirect (msal-browser).\n     * Second part of the redirect flow.\n     * Used to acquire a new access token interactively through redirects.\n     */\n    AcquireTokenRedirect: \"acquireTokenRedirect\",\n\n    /**\n     * getPublicKeyThumbprint API in CryptoOpts class (msal-browser).\n     * Used to generate a public/private keypair and generate a public key thumbprint for pop requests.\n     */\n    CryptoOptsGetPublicKeyThumbprint: \"cryptoOptsGetPublicKeyThumbprint\",\n\n    /**\n     * signJwt API in CryptoOpts class (msal-browser).\n     * Used to signed a pop token.\n     */\n    CryptoOptsSignJwt: \"cryptoOptsSignJwt\",\n\n    /**\n     * acquireToken API in the SilentCacheClient class (msal-browser).\n     * Used to read access tokens from the cache.\n     */\n    SilentCacheClientAcquireToken: \"silentCacheClientAcquireToken\",\n\n    /**\n     * acquireToken API in the SilentIframeClient class (msal-browser).\n     * Used to acquire a new set of tokens from the authorize endpoint in a hidden iframe.\n     */\n    SilentIframeClientAcquireToken: \"silentIframeClientAcquireToken\",\n    AwaitConcurrentIframe: \"awaitConcurrentIframe\", // Time spent waiting for a concurrent iframe to complete\n\n    /**\n     * acquireToken API in SilentRereshClient (msal-browser).\n     * Used to acquire a new set of tokens from the token endpoint using a refresh token.\n     */\n    SilentRefreshClientAcquireToken: \"silentRefreshClientAcquireToken\",\n\n    /**\n     * ssoSilent API (msal-browser).\n     * Used to silently acquire an authorization code and set of tokens using a hidden iframe.\n     */\n    SsoSilent: \"ssoSilent\",\n\n    /**\n     * getDiscoveredAuthority API in StandardInteractionClient class (msal-browser).\n     * Used to load authority metadata for a request.\n     */\n    StandardInteractionClientGetDiscoveredAuthority:\n        \"standardInteractionClientGetDiscoveredAuthority\",\n\n    /**\n     * acquireToken APIs in msal-browser.\n     * Used to make an /authorize endpoint call with native brokering enabled.\n     */\n    FetchAccountIdWithNativeBroker: \"fetchAccountIdWithNativeBroker\",\n\n    /**\n     * acquireToken API in NativeInteractionClient class (msal-browser).\n     * Used to acquire a token from Native component when native brokering is enabled.\n     */\n    NativeInteractionClientAcquireToken: \"nativeInteractionClientAcquireToken\",\n    /**\n     * Time spent creating default headers for requests to token endpoint\n     */\n    BaseClientCreateTokenRequestHeaders: \"baseClientCreateTokenRequestHeaders\",\n    /**\n     * Time spent sending/waiting for the response of a request to the token endpoint\n     */\n    NetworkClientSendPostRequestAsync: \"networkClientSendPostRequestAsync\",\n    RefreshTokenClientExecutePostToTokenEndpoint:\n        \"refreshTokenClientExecutePostToTokenEndpoint\",\n    AuthorizationCodeClientExecutePostToTokenEndpoint:\n        \"authorizationCodeClientExecutePostToTokenEndpoint\",\n    /**\n     * Used to measure the time taken for completing embedded-broker handshake (PW-Broker).\n     */\n    BrokerHandhshake: \"brokerHandshake\",\n    /**\n     * acquireTokenByRefreshToken API in BrokerClientApplication (PW-Broker) .\n     */\n    AcquireTokenByRefreshTokenInBroker: \"acquireTokenByRefreshTokenInBroker\",\n    /**\n     * Time taken for token acquisition by broker\n     */\n    AcquireTokenByBroker: \"acquireTokenByBroker\",\n\n    /**\n     * Time spent on the network for refresh token acquisition\n     */\n    RefreshTokenClientExecuteTokenRequest:\n        \"refreshTokenClientExecuteTokenRequest\",\n\n    /**\n     * Time taken for acquiring refresh token , records RT size\n     */\n    RefreshTokenClientAcquireToken: \"refreshTokenClientAcquireToken\",\n\n    /**\n     * Time taken for acquiring cached refresh token\n     */\n    RefreshTokenClientAcquireTokenWithCachedRefreshToken:\n        \"refreshTokenClientAcquireTokenWithCachedRefreshToken\",\n\n    /**\n     * acquireTokenByRefreshToken API in RefreshTokenClient (msal-common).\n     */\n    RefreshTokenClientAcquireTokenByRefreshToken:\n        \"refreshTokenClientAcquireTokenByRefreshToken\",\n\n    /**\n     * Helper function to create token request body in RefreshTokenClient (msal-common).\n     */\n    RefreshTokenClientCreateTokenRequestBody:\n        \"refreshTokenClientCreateTokenRequestBody\",\n\n    /**\n     * acquireTokenFromCache (msal-browser).\n     * Internal API for acquiring token from cache\n     */\n    AcquireTokenFromCache: \"acquireTokenFromCache\",\n    SilentFlowClientAcquireCachedToken: \"silentFlowClientAcquireCachedToken\",\n    SilentFlowClientGenerateResultFromCacheRecord:\n        \"silentFlowClientGenerateResultFromCacheRecord\",\n\n    /**\n     * acquireTokenBySilentIframe (msal-browser).\n     * Internal API for acquiring token by silent Iframe\n     */\n    AcquireTokenBySilentIframe: \"acquireTokenBySilentIframe\",\n\n    /**\n     * Internal API for initializing base request in BaseInteractionClient (msal-browser)\n     */\n    InitializeBaseRequest: \"initializeBaseRequest\",\n\n    /**\n     * Internal API for initializing silent request in SilentCacheClient (msal-browser)\n     */\n    InitializeSilentRequest: \"initializeSilentRequest\",\n\n    InitializeClientApplication: \"initializeClientApplication\",\n\n    InitializeCache: \"initializeCache\",\n\n    /**\n     * Helper function in SilentIframeClient class (msal-browser).\n     */\n    SilentIframeClientTokenHelper: \"silentIframeClientTokenHelper\",\n\n    /**\n     * SilentHandler\n     */\n    SilentHandlerInitiateAuthRequest: \"silentHandlerInitiateAuthRequest\",\n    SilentHandlerMonitorIframeForHash: \"silentHandlerMonitorIframeForHash\",\n    SilentHandlerLoadFrame: \"silentHandlerLoadFrame\",\n    SilentHandlerLoadFrameSync: \"silentHandlerLoadFrameSync\",\n\n    /**\n     * Helper functions in StandardInteractionClient class (msal-browser)\n     */\n    StandardInteractionClientCreateAuthCodeClient:\n        \"standardInteractionClientCreateAuthCodeClient\",\n    StandardInteractionClientGetClientConfiguration:\n        \"standardInteractionClientGetClientConfiguration\",\n    StandardInteractionClientInitializeAuthorizationRequest:\n        \"standardInteractionClientInitializeAuthorizationRequest\",\n\n    /**\n     * getAuthCodeUrl API (msal-browser and msal-node).\n     */\n    GetAuthCodeUrl: \"getAuthCodeUrl\",\n    GetStandardParams: \"getStandardParams\",\n\n    /**\n     * Functions from InteractionHandler (msal-browser)\n     */\n    HandleCodeResponseFromServer: \"handleCodeResponseFromServer\",\n    HandleCodeResponse: \"handleCodeResponse\",\n    HandleResponseEar: \"handleResponseEar\",\n    HandleResponsePlatformBroker: \"handleResponsePlatformBroker\",\n    HandleResponseCode: \"handleResponseCode\",\n    UpdateTokenEndpointAuthority: \"updateTokenEndpointAuthority\",\n\n    /**\n     * APIs in Authorization Code Client (msal-common)\n     */\n    AuthClientAcquireToken: \"authClientAcquireToken\",\n    AuthClientExecuteTokenRequest: \"authClientExecuteTokenRequest\",\n    AuthClientCreateTokenRequestBody: \"authClientCreateTokenRequestBody\",\n\n    /**\n     * Generate functions in PopTokenGenerator (msal-common)\n     */\n    PopTokenGenerateCnf: \"popTokenGenerateCnf\",\n    PopTokenGenerateKid: \"popTokenGenerateKid\",\n\n    /**\n     * handleServerTokenResponse API in ResponseHandler (msal-common)\n     */\n    HandleServerTokenResponse: \"handleServerTokenResponse\",\n    DeserializeResponse: \"deserializeResponse\",\n\n    /**\n     * Authority functions\n     */\n    AuthorityFactoryCreateDiscoveredInstance:\n        \"authorityFactoryCreateDiscoveredInstance\",\n    AuthorityResolveEndpointsAsync: \"authorityResolveEndpointsAsync\",\n    AuthorityResolveEndpointsFromLocalSources:\n        \"authorityResolveEndpointsFromLocalSources\",\n    AuthorityGetCloudDiscoveryMetadataFromNetwork:\n        \"authorityGetCloudDiscoveryMetadataFromNetwork\",\n    AuthorityUpdateCloudDiscoveryMetadata:\n        \"authorityUpdateCloudDiscoveryMetadata\",\n    AuthorityGetEndpointMetadataFromNetwork:\n        \"authorityGetEndpointMetadataFromNetwork\",\n    AuthorityUpdateEndpointMetadata: \"authorityUpdateEndpointMetadata\",\n    AuthorityUpdateMetadataWithRegionalInformation:\n        \"authorityUpdateMetadataWithRegionalInformation\",\n\n    /**\n     * Region Discovery functions\n     */\n    RegionDiscoveryDetectRegion: \"regionDiscoveryDetectRegion\",\n    RegionDiscoveryGetRegionFromIMDS: \"regionDiscoveryGetRegionFromIMDS\",\n    RegionDiscoveryGetCurrentVersion: \"regionDiscoveryGetCurrentVersion\",\n\n    AcquireTokenByCodeAsync: \"acquireTokenByCodeAsync\",\n\n    GetEndpointMetadataFromNetwork: \"getEndpointMetadataFromNetwork\",\n    GetCloudDiscoveryMetadataFromNetworkMeasurement:\n        \"getCloudDiscoveryMetadataFromNetworkMeasurement\",\n\n    HandleRedirectPromiseMeasurement: \"handleRedirectPromise\",\n    HandleNativeRedirectPromiseMeasurement: \"handleNativeRedirectPromise\",\n\n    UpdateCloudDiscoveryMetadataMeasurement:\n        \"updateCloudDiscoveryMetadataMeasurement\",\n\n    UsernamePasswordClientAcquireToken: \"usernamePasswordClientAcquireToken\",\n\n    NativeMessageHandlerHandshake: \"nativeMessageHandlerHandshake\",\n\n    NativeGenerateAuthResult: \"nativeGenerateAuthResult\",\n\n    RemoveHiddenIframe: \"removeHiddenIframe\",\n\n    /**\n     * Cache operations\n     */\n    ClearTokensAndKeysWithClaims: \"clearTokensAndKeysWithClaims\",\n    CacheManagerGetRefreshToken: \"cacheManagerGetRefreshToken\",\n    ImportExistingCache: \"importExistingCache\",\n    SetUserData: \"setUserData\",\n    LocalStorageUpdated: \"localStorageUpdated\",\n\n    /**\n     * Crypto Operations\n     */\n    GeneratePkceCodes: \"generatePkceCodes\",\n    GenerateCodeVerifier: \"generateCodeVerifier\",\n    GenerateCodeChallengeFromVerifier: \"generateCodeChallengeFromVerifier\",\n    Sha256Digest: \"sha256Digest\",\n    GetRandomValues: \"getRandomValues\",\n    GenerateHKDF: \"generateHKDF\",\n    GenerateBaseKey: \"generateBaseKey\",\n    Base64Decode: \"base64Decode\",\n    UrlEncodeArr: \"urlEncodeArr\",\n    Encrypt: \"encrypt\",\n    Decrypt: \"decrypt\",\n    GenerateEarKey: \"generateEarKey\",\n    DecryptEarResponse: \"decryptEarResponse\",\n} as const;\nexport type PerformanceEvents =\n    (typeof PerformanceEvents)[keyof typeof PerformanceEvents];\n\nexport const PerformanceEventAbbreviations: ReadonlyMap<string, string> =\n    new Map([\n        [PerformanceEvents.AcquireTokenByCode, \"ATByCode\"],\n        [PerformanceEvents.AcquireTokenByRefreshToken, \"ATByRT\"],\n        [PerformanceEvents.AcquireTokenSilent, \"ATS\"],\n        [PerformanceEvents.AcquireTokenSilentAsync, \"ATSAsync\"],\n        [PerformanceEvents.AcquireTokenPopup, \"ATPopup\"],\n        [PerformanceEvents.AcquireTokenRedirect, \"ATRedirect\"],\n        [\n            PerformanceEvents.CryptoOptsGetPublicKeyThumbprint,\n            \"CryptoGetPKThumb\",\n        ],\n        [PerformanceEvents.CryptoOptsSignJwt, \"CryptoSignJwt\"],\n        [PerformanceEvents.SilentCacheClientAcquireToken, \"SltCacheClientAT\"],\n        [PerformanceEvents.SilentIframeClientAcquireToken, \"SltIframeClientAT\"],\n        [PerformanceEvents.SilentRefreshClientAcquireToken, \"SltRClientAT\"],\n        [PerformanceEvents.SsoSilent, \"SsoSlt\"],\n        [\n            PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority,\n            \"StdIntClientGetDiscAuth\",\n        ],\n        [\n            PerformanceEvents.FetchAccountIdWithNativeBroker,\n            \"FetchAccIdWithNtvBroker\",\n        ],\n        [\n            PerformanceEvents.NativeInteractionClientAcquireToken,\n            \"NtvIntClientAT\",\n        ],\n        [\n            PerformanceEvents.BaseClientCreateTokenRequestHeaders,\n            \"BaseClientCreateTReqHead\",\n        ],\n        [\n            PerformanceEvents.NetworkClientSendPostRequestAsync,\n            \"NetClientSendPost\",\n        ],\n        [\n            PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint,\n            \"RTClientExecPost\",\n        ],\n        [\n            PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint,\n            \"AuthCodeClientExecPost\",\n        ],\n        [PerformanceEvents.BrokerHandhshake, \"BrokerHandshake\"],\n        [\n            PerformanceEvents.AcquireTokenByRefreshTokenInBroker,\n            \"ATByRTInBroker\",\n        ],\n        [PerformanceEvents.AcquireTokenByBroker, \"ATByBroker\"],\n        [\n            PerformanceEvents.RefreshTokenClientExecuteTokenRequest,\n            \"RTClientExecTReq\",\n        ],\n        [PerformanceEvents.RefreshTokenClientAcquireToken, \"RTClientAT\"],\n        [\n            PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,\n            \"RTClientATWithCachedRT\",\n        ],\n        [\n            PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken,\n            \"RTClientATByRT\",\n        ],\n        [\n            PerformanceEvents.RefreshTokenClientCreateTokenRequestBody,\n            \"RTClientCreateTReqBody\",\n        ],\n        [PerformanceEvents.AcquireTokenFromCache, \"ATFromCache\"],\n        [\n            PerformanceEvents.SilentFlowClientAcquireCachedToken,\n            \"SltFlowClientATCached\",\n        ],\n        [\n            PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord,\n            \"SltFlowClientGenResFromCache\",\n        ],\n        [PerformanceEvents.AcquireTokenBySilentIframe, \"ATBySltIframe\"],\n        [PerformanceEvents.InitializeBaseRequest, \"InitBaseReq\"],\n        [PerformanceEvents.InitializeSilentRequest, \"InitSltReq\"],\n        [\n            PerformanceEvents.InitializeClientApplication,\n            \"InitClientApplication\",\n        ],\n        [PerformanceEvents.InitializeCache, \"InitCache\"],\n        [PerformanceEvents.ImportExistingCache, \"importCache\"],\n        [PerformanceEvents.SetUserData, \"setUserData\"],\n        [PerformanceEvents.LocalStorageUpdated, \"localStorageUpdated\"],\n        [PerformanceEvents.SilentIframeClientTokenHelper, \"SIClientTHelper\"],\n        [\n            PerformanceEvents.SilentHandlerInitiateAuthRequest,\n            \"SHandlerInitAuthReq\",\n        ],\n        [\n            PerformanceEvents.SilentHandlerMonitorIframeForHash,\n            \"SltHandlerMonitorIframeForHash\",\n        ],\n        [PerformanceEvents.SilentHandlerLoadFrame, \"SHandlerLoadFrame\"],\n        [PerformanceEvents.SilentHandlerLoadFrameSync, \"SHandlerLoadFrameSync\"],\n\n        [\n            PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n            \"StdIntClientCreateAuthCodeClient\",\n        ],\n        [\n            PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n            \"StdIntClientGetClientConf\",\n        ],\n        [\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\n            \"StdIntClientInitAuthReq\",\n        ],\n\n        [PerformanceEvents.GetAuthCodeUrl, \"GetAuthCodeUrl\"],\n\n        [\n            PerformanceEvents.HandleCodeResponseFromServer,\n            \"HandleCodeResFromServer\",\n        ],\n        [PerformanceEvents.HandleCodeResponse, \"HandleCodeResp\"],\n        [PerformanceEvents.HandleResponseEar, \"HandleRespEar\"],\n        [PerformanceEvents.HandleResponseCode, \"HandleRespCode\"],\n        [\n            PerformanceEvents.HandleResponsePlatformBroker,\n            \"HandleRespPlatBroker\",\n        ],\n        [PerformanceEvents.UpdateTokenEndpointAuthority, \"UpdTEndpointAuth\"],\n\n        [PerformanceEvents.AuthClientAcquireToken, \"AuthClientAT\"],\n        [PerformanceEvents.AuthClientExecuteTokenRequest, \"AuthClientExecTReq\"],\n        [\n            PerformanceEvents.AuthClientCreateTokenRequestBody,\n            \"AuthClientCreateTReqBody\",\n        ],\n        [PerformanceEvents.PopTokenGenerateCnf, \"PopTGenCnf\"],\n        [PerformanceEvents.PopTokenGenerateKid, \"PopTGenKid\"],\n        [PerformanceEvents.HandleServerTokenResponse, \"HandleServerTRes\"],\n        [PerformanceEvents.DeserializeResponse, \"DeserializeRes\"],\n        [\n            PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance,\n            \"AuthFactCreateDiscInst\",\n        ],\n        [\n            PerformanceEvents.AuthorityResolveEndpointsAsync,\n            \"AuthResolveEndpointsAsync\",\n        ],\n        [\n            PerformanceEvents.AuthorityResolveEndpointsFromLocalSources,\n            \"AuthResolveEndpointsFromLocal\",\n        ],\n        [\n            PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork,\n            \"AuthGetCDMetaFromNet\",\n        ],\n        [\n            PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata,\n            \"AuthUpdCDMeta\",\n        ],\n        [\n            PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork,\n            \"AuthUpdCDMetaFromNet\",\n        ],\n        [\n            PerformanceEvents.AuthorityUpdateEndpointMetadata,\n            \"AuthUpdEndpointMeta\",\n        ],\n        [\n            PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation,\n            \"AuthUpdMetaWithRegInfo\",\n        ],\n        [PerformanceEvents.RegionDiscoveryDetectRegion, \"RegDiscDetectReg\"],\n        [\n            PerformanceEvents.RegionDiscoveryGetRegionFromIMDS,\n            \"RegDiscGetRegFromIMDS\",\n        ],\n        [\n            PerformanceEvents.RegionDiscoveryGetCurrentVersion,\n            \"RegDiscGetCurrentVer\",\n        ],\n        [PerformanceEvents.AcquireTokenByCodeAsync, \"ATByCodeAsync\"],\n        [\n            PerformanceEvents.GetEndpointMetadataFromNetwork,\n            \"GetEndpointMetaFromNet\",\n        ],\n        [\n            PerformanceEvents.GetCloudDiscoveryMetadataFromNetworkMeasurement,\n            \"GetCDMetaFromNet\",\n        ],\n        [\n            PerformanceEvents.HandleRedirectPromiseMeasurement,\n            \"HandleRedirectPromise\",\n        ],\n        [\n            PerformanceEvents.HandleNativeRedirectPromiseMeasurement,\n            \"HandleNtvRedirectPromise\",\n        ],\n        [\n            PerformanceEvents.UpdateCloudDiscoveryMetadataMeasurement,\n            \"UpdateCDMeta\",\n        ],\n        [\n            PerformanceEvents.UsernamePasswordClientAcquireToken,\n            \"UserPassClientAT\",\n        ],\n        [\n            PerformanceEvents.NativeMessageHandlerHandshake,\n            \"NtvMsgHandlerHandshake\",\n        ],\n        [PerformanceEvents.NativeGenerateAuthResult, \"NtvGenAuthRes\"],\n        [PerformanceEvents.RemoveHiddenIframe, \"RemoveHiddenIframe\"],\n        [\n            PerformanceEvents.ClearTokensAndKeysWithClaims,\n            \"ClearTAndKeysWithClaims\",\n        ],\n        [PerformanceEvents.CacheManagerGetRefreshToken, \"CacheManagerGetRT\"],\n        [PerformanceEvents.GeneratePkceCodes, \"GenPkceCodes\"],\n        [PerformanceEvents.GenerateCodeVerifier, \"GenCodeVerifier\"],\n        [\n            PerformanceEvents.GenerateCodeChallengeFromVerifier,\n            \"GenCodeChallengeFromVerifier\",\n        ],\n        [PerformanceEvents.Sha256Digest, \"Sha256Digest\"],\n        [PerformanceEvents.GetRandomValues, \"GetRandomValues\"],\n        [PerformanceEvents.GenerateHKDF, \"genHKDF\"],\n        [PerformanceEvents.GenerateBaseKey, \"genBaseKey\"],\n        [PerformanceEvents.Base64Decode, \"b64Decode\"],\n        [PerformanceEvents.UrlEncodeArr, \"urlEncArr\"],\n        [PerformanceEvents.Encrypt, \"encrypt\"],\n        [PerformanceEvents.Decrypt, \"decrypt\"],\n        [PerformanceEvents.GenerateEarKey, \"genEarKey\"],\n        [PerformanceEvents.DecryptEarResponse, \"decryptEarResp\"],\n    ]);\n\n/**\n * State of the performance event.\n *\n * @export\n * @enum {number}\n */\nexport const PerformanceEventStatus = {\n    NotStarted: 0,\n    InProgress: 1,\n    Completed: 2,\n} as const;\nexport type PerformanceEventStatus =\n    (typeof PerformanceEventStatus)[keyof typeof PerformanceEventStatus];\n\nexport type SubMeasurement = {\n    name: string;\n    startTimeMs: number;\n};\n\n/**\n * Performance measurement taken by the library, including metadata about the request and application.\n *\n * @export\n * @typedef {PerformanceEvent}\n */\nexport type PerformanceEvent = {\n    /**\n     * Unique id for the event\n     *\n     * @type {string}\n     */\n    eventId: string;\n\n    /**\n     * State of the perforance measure.\n     *\n     * @type {PerformanceEventStatus}\n     */\n    status: PerformanceEventStatus;\n\n    /**\n     * Login authority used for the request\n     *\n     * @type {string}\n     */\n    authority: string;\n\n    /**\n     * Client id for the application\n     *\n     * @type {string}\n     */\n    clientId: string;\n\n    /**\n     * Correlation ID used for the request\n     *\n     * @type {string}\n     */\n    correlationId: string;\n\n    /**\n     * End-to-end duration in milliseconds.\n     * @date 3/22/2022 - 3:40:05 PM\n     *\n     * @type {number}\n     */\n    durationMs?: number;\n\n    /**\n     * Visibility of the page when the event completed.\n     * Read from: https://developer.mozilla.org/docs/Web/API/Page_Visibility_API\n     *\n     * @type {?(string | null)}\n     */\n    endPageVisibility?: string | null;\n\n    /**\n     * Whether the result was retrieved from the cache.\n     *\n     * @type {(boolean | null)}\n     */\n    fromCache?: boolean | null;\n\n    /**\n     * Event name (usually in the form of classNameFunctionName)\n     *\n     * @type {string}\n     */\n    name: string;\n\n    /**\n     * Visibility of the page when the event completed.\n     * Read from: https://developer.mozilla.org/docs/Web/API/Page_Visibility_API\n     *\n     * @type {?(string | null)}\n     */\n    startPageVisibility?: string | null;\n\n    /**\n     * Unix millisecond timestamp when the event was initiated.\n     *\n     * @type {number}\n     */\n    startTimeMs: number;\n\n    /**\n     * Whether or the operation completed successfully.\n     *\n     * @type {(boolean | null)}\n     */\n    success?: boolean | null;\n\n    /**\n     * Add specific error code in case of failure\n     *\n     * @type {string}\n     */\n    errorCode?: string;\n\n    /**\n     * Add specific sub error code in case of failure\n     *\n     * @type {string}\n     */\n    subErrorCode?: string;\n\n    /**\n     * Server error number\n     */\n    serverErrorNo?: string;\n\n    /**\n     * Name of the library used for the operation.\n     *\n     * @type {string}\n     */\n    libraryName: string;\n\n    /**\n     * Version of the library used for the operation.\n     *\n     * @type {string}\n     */\n    libraryVersion: string;\n\n    /**\n     * Version of the library used last. Used to track upgrades and downgrades\n     */\n    previousLibraryVersion?: string;\n\n    /**\n     * Whether the response is from a native component (e.g., WAM)\n     *\n     * @type {?boolean}\n     */\n    isNativeBroker?: boolean;\n\n    /**\n     * Request ID returned from the response\n     *\n     * @type {?string}\n     */\n    requestId?: string;\n\n    /**\n     * Cache lookup policy\n     *\n     * @type {?number}\n     */\n    cacheLookupPolicy?: number | undefined;\n\n    /**\n     * Cache Outcome\n     * @type {?number}\n     */\n    cacheOutcome?: number;\n\n    /**\n     * Amount of time spent in the JS queue in milliseconds.\n     *\n     * @type {?number}\n     */\n    queuedTimeMs?: number;\n\n    /**\n     * Sub-measurements for internal use. To be deleted before flushing.\n     */\n    incompleteSubMeasurements?: Map<string, SubMeasurement>;\n\n    visibilityChangeCount?: number;\n    incompleteSubsCount?: number;\n\n    /**\n     * CorrelationId of the in progress iframe request that was awaited\n     */\n    awaitIframeCorrelationId?: string;\n    /**\n     * Amount of times queued in the JS event queue.\n     *\n     * @type {?number}\n     */\n    queuedCount?: number;\n    /**\n     * Amount of manually completed queue events.\n     *\n     * @type {?number}\n     */\n    queuedManuallyCompletedCount?: number;\n\n    /**\n     * Size of the id token\n     *\n     * @type {number}\n     */\n    idTokenSize?: number;\n\n    /**\n     *\n     * Size of the access token\n     *\n     * @type {number}\n     */\n\n    accessTokenSize?: number;\n\n    /**\n     *\n     * Size of the refresh token\n     *\n     * @type {number}\n     */\n\n    refreshTokenSize?: number | undefined;\n\n    /**\n     * Application name as specified by the app.\n     *\n     * @type {?string}\n     */\n    appName?: string;\n\n    /**\n     * Application version as specified by the app.\n     *\n     * @type {?string}\n     */\n    appVersion?: string;\n\n    /**\n     * The following are fields that may be emitted in native broker scenarios\n     */\n    extensionId?: string;\n    extensionVersion?: string;\n    matsBrokerVersion?: string;\n    matsAccountJoinOnStart?: string;\n    matsAccountJoinOnEnd?: string;\n    matsDeviceJoin?: string;\n    matsPromptBehavior?: string;\n    matsApiErrorCode?: number;\n    matsUiVisible?: boolean;\n    matsSilentCode?: number;\n    matsSilentBiSubCode?: number;\n    matsSilentMessage?: string;\n    matsSilentStatus?: number;\n    matsHttpStatus?: number;\n    matsHttpEventCount?: number;\n\n    /**\n     * Http POST metadata\n     */\n    httpVerToken?: string;\n    httpStatus?: number;\n    contentTypeHeader?: string;\n    contentLengthHeader?: string;\n\n    /**\n     * Platform broker fields\n     */\n    allowPlatformBroker?: boolean;\n    extensionInstalled?: boolean;\n    extensionHandshakeTimeoutMs?: number;\n    extensionHandshakeTimedOut?: boolean;\n\n    /**\n     * Nested App Auth Fields\n     */\n    nestedAppAuthRequest?: boolean;\n\n    /**\n     * Multiple matched access/id/refresh tokens in the cache\n     */\n    multiMatchedAT?: number;\n    multiMatchedID?: number;\n    multiMatchedRT?: number;\n\n    errorName?: string;\n    errorStack?: string[];\n\n    // Event context as JSON string\n    context?: string;\n\n    // Number of tokens in the cache to be reported when cache quota is exceeded\n    cacheRtCount?: number;\n    cacheIdCount?: number;\n    cacheAtCount?: number;\n\n    // Scenario id to track custom user prompts\n    scenarioId?: string;\n\n    accountType?: \"AAD\" | \"MSA\" | \"B2C\";\n\n    /**\n     * Server error that triggers a request retry\n     *\n     * @type {string}\n     */\n    retryError?: string;\n\n    embeddedClientId?: string;\n    embeddedRedirectUri?: string;\n\n    isAsyncPopup?: boolean;\n\n    rtExpiresOnMs?: number;\n\n    sidFromClaims?: boolean;\n    sidFromRequest?: boolean;\n    loginHintFromRequest?: boolean;\n    loginHintFromUpn?: boolean;\n    loginHintFromClaim?: boolean;\n    domainHintFromRequest?: boolean;\n\n    prompt?: string;\n\n    usePreGeneratedPkce?: boolean;\n\n    // Number of MSAL JS instances in the frame\n    msalInstanceCount?: number;\n    // Number of MSAL JS instances using the same client id in the frame\n    sameClientIdInstanceCount?: number;\n};\n\nexport type PerformanceEventContext = {\n    dur?: number;\n    err?: string;\n    subErr?: string;\n    fail?: number;\n};\n\nexport type PerformanceEventStackedContext = PerformanceEventContext & {\n    name?: string;\n    childErr?: string;\n};\n\nexport const IntFields: ReadonlySet<string> = new Set([\n    \"accessTokenSize\",\n    \"durationMs\",\n    \"idTokenSize\",\n    \"matsSilentStatus\",\n    \"matsHttpStatus\",\n    \"refreshTokenSize\",\n    \"queuedTimeMs\",\n    \"startTimeMs\",\n    \"status\",\n    \"multiMatchedAT\",\n    \"multiMatchedID\",\n    \"multiMatchedRT\",\n    \"unencryptedCacheCount\",\n    \"encryptedCacheExpiredCount\",\n]);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}