{"ast":null,"code":"/*! @azure/msal-common v15.7.0 2025-05-30 */\n'use strict';\n\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { tokenParsingError, nullOrEmptyToken, maxAgeTranspired } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Extract token by decoding the rawToken\r\n *\r\n * @param encodedToken\r\n */\nfunction extractTokenClaims(encodedToken, base64Decode) {\n  const jswPayload = getJWSPayload(encodedToken);\n  // token will be decoded to get the username\n  try {\n    // base64Decode() should throw an error if there is an issue\n    const base64Decoded = base64Decode(jswPayload);\n    return JSON.parse(base64Decoded);\n  } catch (err) {\n    throw createClientAuthError(tokenParsingError);\n  }\n}\n/**\r\n * decode a JWT\r\n *\r\n * @param authToken\r\n */\nfunction getJWSPayload(authToken) {\n  if (!authToken) {\n    throw createClientAuthError(nullOrEmptyToken);\n  }\n  const tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n  const matches = tokenPartsRegex.exec(authToken);\n  if (!matches || matches.length < 4) {\n    throw createClientAuthError(tokenParsingError);\n  }\n  /**\r\n   * const crackedToken = {\r\n   *  header: matches[1],\r\n   *  JWSPayload: matches[2],\r\n   *  JWSSig: matches[3],\r\n   * };\r\n   */\n  return matches[2];\n}\n/**\r\n * Determine if the token's max_age has transpired\r\n */\nfunction checkMaxAge(authTime, maxAge) {\n  /*\r\n   * per https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\r\n   * To force an immediate re-authentication: If an app requires that a user re-authenticate prior to access,\r\n   * provide a value of 0 for the max_age parameter and the AS will force a fresh login.\r\n   */\n  const fiveMinuteSkew = 300000; // five minutes in milliseconds\n  if (maxAge === 0 || Date.now() - fiveMinuteSkew > authTime + maxAge) {\n    throw createClientAuthError(maxAgeTranspired);\n  }\n}\nexport { checkMaxAge, extractTokenClaims, getJWSPayload };","map":{"version":3,"names":["extractTokenClaims","encodedToken","base64Decode","jswPayload","getJWSPayload","base64Decoded","JSON","parse","err","createClientAuthError","tokenParsingError","authToken","nullOrEmptyToken","tokenPartsRegex","matches","exec","length","checkMaxAge","authTime","maxAge","fiveMinuteSkew","Date","now","maxAgeTranspired"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-common/src/account/AuthToken.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { TokenClaims } from \"./TokenClaims.js\";\nimport {\n    createClientAuthError,\n    ClientAuthErrorCodes,\n} from \"../error/ClientAuthError.js\";\n\n/**\n * Extract token by decoding the rawToken\n *\n * @param encodedToken\n */\nexport function extractTokenClaims(\n    encodedToken: string,\n    base64Decode: (input: string) => string\n): TokenClaims {\n    const jswPayload = getJWSPayload(encodedToken);\n\n    // token will be decoded to get the username\n    try {\n        // base64Decode() should throw an error if there is an issue\n        const base64Decoded = base64Decode(jswPayload);\n        return JSON.parse(base64Decoded) as TokenClaims;\n    } catch (err) {\n        throw createClientAuthError(ClientAuthErrorCodes.tokenParsingError);\n    }\n}\n\n/**\n * decode a JWT\n *\n * @param authToken\n */\nexport function getJWSPayload(authToken: string): string {\n    if (!authToken) {\n        throw createClientAuthError(ClientAuthErrorCodes.nullOrEmptyToken);\n    }\n    const tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n    const matches = tokenPartsRegex.exec(authToken);\n    if (!matches || matches.length < 4) {\n        throw createClientAuthError(ClientAuthErrorCodes.tokenParsingError);\n    }\n    /**\n     * const crackedToken = {\n     *  header: matches[1],\n     *  JWSPayload: matches[2],\n     *  JWSSig: matches[3],\n     * };\n     */\n\n    return matches[2];\n}\n\n/**\n * Determine if the token's max_age has transpired\n */\nexport function checkMaxAge(authTime: number, maxAge: number): void {\n    /*\n     * per https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\n     * To force an immediate re-authentication: If an app requires that a user re-authenticate prior to access,\n     * provide a value of 0 for the max_age parameter and the AS will force a fresh login.\n     */\n    const fiveMinuteSkew = 300000; // five minutes in milliseconds\n    if (maxAge === 0 || Date.now() - fiveMinuteSkew > authTime + maxAge) {\n        throw createClientAuthError(ClientAuthErrorCodes.maxAgeTranspired);\n    }\n}\n"],"mappings":";;;;;;AAAA;;;AAGG;AAQH;;;;AAIG;AACa,SAAAA,kBAAkBA,CAC9BC,YAAoB,EACpBC,YAAuC;EAEvC,MAAMC,UAAU,GAAGC,aAAa,CAACH,YAAY,CAAC;;EAG9C,IAAI;;IAEA,MAAMI,aAAa,GAAGH,YAAY,CAACC,UAAU,CAAC;IAC9C,OAAOG,IAAI,CAACC,KAAK,CAACF,aAAa,CAAgB;EAClD,EAAC,OAAOG,GAAG,EAAE;IACV,MAAMC,qBAAqB,CAACC,iBAAsC,CAAC;EACtE;AACL;AAEA;;;;AAIG;AACG,SAAUN,aAAaA,CAACO,SAAiB;EAC3C,IAAI,CAACA,SAAS,EAAE;IACZ,MAAMF,qBAAqB,CAACG,gBAAqC,CAAC;EACrE;EACD,MAAMC,eAAe,GAAG,sCAAsC;EAC9D,MAAMC,OAAO,GAAGD,eAAe,CAACE,IAAI,CAACJ,SAAS,CAAC;EAC/C,IAAI,CAACG,OAAO,IAAIA,OAAO,CAACE,MAAM,GAAG,CAAC,EAAE;IAChC,MAAMP,qBAAqB,CAACC,iBAAsC,CAAC;EACtE;EACD;;;;;;AAMG;EAEH,OAAOI,OAAO,CAAC,CAAC,CAAC;AACrB;AAEA;;AAEG;AACa,SAAAG,WAAWA,CAACC,QAAgB,EAAEC,MAAc;EACxD;;;;AAIG;EACH,MAAMC,cAAc,GAAG,MAAM,CAAC;EAC9B,IAAID,MAAM,KAAK,CAAC,IAAIE,IAAI,CAACC,GAAG,EAAE,GAAGF,cAAc,GAAGF,QAAQ,GAAGC,MAAM,EAAE;IACjE,MAAMV,qBAAqB,CAACc,gBAAqC,CAAC;EACrE;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}