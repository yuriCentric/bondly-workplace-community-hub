{"ast":null,"code":"/*! @azure/msal-common v15.7.0 2025-05-30 */\n'use strict';\n\nimport { extractTokenClaims } from '../../account/AuthToken.mjs';\nimport { createClientAuthError } from '../../error/ClientAuthError.mjs';\nimport { Separators, CredentialType, AuthenticationScheme, SERVER_TELEM_CONSTANTS, ThrottlingConstants, APP_METADATA, AUTHORITY_METADATA_CONSTANTS } from '../../utils/Constants.mjs';\nimport { nowSeconds } from '../../utils/TimeUtils.mjs';\nimport { tokenClaimsCnfRequiredForSignedJwt } from '../../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Cache Key: <home_account_id>-<environment>-<credential_type>-<client_id or familyId>-<realm>-<scopes>-<claims hash>-<scheme>\r\n * IdToken Example: uid.utid-login.microsoftonline.com-idtoken-app_client_id-contoso.com\r\n * AccessToken Example: uid.utid-login.microsoftonline.com-accesstoken-app_client_id-contoso.com-scope1 scope2--pop\r\n * RefreshToken Example: uid.utid-login.microsoftonline.com-refreshtoken-1-contoso.com\r\n * @param credentialEntity\r\n * @returns\r\n */\nfunction generateCredentialKey(credentialEntity) {\n  const credentialKey = [generateAccountId(credentialEntity), generateCredentialId(credentialEntity), generateTarget(credentialEntity), generateClaimsHash(credentialEntity), generateScheme(credentialEntity)];\n  return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/**\r\n * Create IdTokenEntity\r\n * @param homeAccountId\r\n * @param authenticationResult\r\n * @param clientId\r\n * @param authority\r\n */\nfunction createIdTokenEntity(homeAccountId, environment, idToken, clientId, tenantId) {\n  const idTokenEntity = {\n    credentialType: CredentialType.ID_TOKEN,\n    homeAccountId: homeAccountId,\n    environment: environment,\n    clientId: clientId,\n    secret: idToken,\n    realm: tenantId\n  };\n  return idTokenEntity;\n}\n/**\r\n * Create AccessTokenEntity\r\n * @param homeAccountId\r\n * @param environment\r\n * @param accessToken\r\n * @param clientId\r\n * @param tenantId\r\n * @param scopes\r\n * @param expiresOn\r\n * @param extExpiresOn\r\n */\nfunction createAccessTokenEntity(homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, base64Decode, refreshOn, tokenType, userAssertionHash, keyId, requestedClaims, requestedClaimsHash) {\n  const atEntity = {\n    homeAccountId: homeAccountId,\n    credentialType: CredentialType.ACCESS_TOKEN,\n    secret: accessToken,\n    cachedAt: nowSeconds().toString(),\n    expiresOn: expiresOn.toString(),\n    extendedExpiresOn: extExpiresOn.toString(),\n    environment: environment,\n    clientId: clientId,\n    realm: tenantId,\n    target: scopes,\n    tokenType: tokenType || AuthenticationScheme.BEARER\n  };\n  if (userAssertionHash) {\n    atEntity.userAssertionHash = userAssertionHash;\n  }\n  if (refreshOn) {\n    atEntity.refreshOn = refreshOn.toString();\n  }\n  if (requestedClaims) {\n    atEntity.requestedClaims = requestedClaims;\n    atEntity.requestedClaimsHash = requestedClaimsHash;\n  }\n  /*\r\n   * Create Access Token With Auth Scheme instead of regular access token\r\n   * Cast to lower to handle \"bearer\" from ADFS\r\n   */\n  if (atEntity.tokenType?.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase()) {\n    atEntity.credentialType = CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n    switch (atEntity.tokenType) {\n      case AuthenticationScheme.POP:\n        // Make sure keyId is present and add it to credential\n        const tokenClaims = extractTokenClaims(accessToken, base64Decode);\n        if (!tokenClaims?.cnf?.kid) {\n          throw createClientAuthError(tokenClaimsCnfRequiredForSignedJwt);\n        }\n        atEntity.keyId = tokenClaims.cnf.kid;\n        break;\n      case AuthenticationScheme.SSH:\n        atEntity.keyId = keyId;\n    }\n  }\n  return atEntity;\n}\n/**\r\n * Create RefreshTokenEntity\r\n * @param homeAccountId\r\n * @param authenticationResult\r\n * @param clientId\r\n * @param authority\r\n */\nfunction createRefreshTokenEntity(homeAccountId, environment, refreshToken, clientId, familyId, userAssertionHash, expiresOn) {\n  const rtEntity = {\n    credentialType: CredentialType.REFRESH_TOKEN,\n    homeAccountId: homeAccountId,\n    environment: environment,\n    clientId: clientId,\n    secret: refreshToken\n  };\n  if (userAssertionHash) {\n    rtEntity.userAssertionHash = userAssertionHash;\n  }\n  if (familyId) {\n    rtEntity.familyId = familyId;\n  }\n  if (expiresOn) {\n    rtEntity.expiresOn = expiresOn.toString();\n  }\n  return rtEntity;\n}\nfunction isCredentialEntity(entity) {\n  return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"credentialType\") && entity.hasOwnProperty(\"clientId\") && entity.hasOwnProperty(\"secret\");\n}\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\nfunction isAccessTokenEntity(entity) {\n  if (!entity) {\n    return false;\n  }\n  return isCredentialEntity(entity) && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"target\") && (entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN || entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);\n}\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\nfunction isIdTokenEntity(entity) {\n  if (!entity) {\n    return false;\n  }\n  return isCredentialEntity(entity) && entity.hasOwnProperty(\"realm\") && entity[\"credentialType\"] === CredentialType.ID_TOKEN;\n}\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\nfunction isRefreshTokenEntity(entity) {\n  if (!entity) {\n    return false;\n  }\n  return isCredentialEntity(entity) && entity[\"credentialType\"] === CredentialType.REFRESH_TOKEN;\n}\n/**\r\n * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n */\nfunction generateAccountId(credentialEntity) {\n  const accountId = [credentialEntity.homeAccountId, credentialEntity.environment];\n  return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/**\r\n * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\r\n */\nfunction generateCredentialId(credentialEntity) {\n  const clientOrFamilyId = credentialEntity.credentialType === CredentialType.REFRESH_TOKEN ? credentialEntity.familyId || credentialEntity.clientId : credentialEntity.clientId;\n  const credentialId = [credentialEntity.credentialType, clientOrFamilyId, credentialEntity.realm || \"\"];\n  return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/**\r\n * Generate target key component as per schema: <target>\r\n */\nfunction generateTarget(credentialEntity) {\n  return (credentialEntity.target || \"\").toLowerCase();\n}\n/**\r\n * Generate requested claims key component as per schema: <requestedClaims>\r\n */\nfunction generateClaimsHash(credentialEntity) {\n  return (credentialEntity.requestedClaimsHash || \"\").toLowerCase();\n}\n/**\r\n * Generate scheme key componenet as per schema: <scheme>\r\n */\nfunction generateScheme(credentialEntity) {\n  /*\r\n   * PoP Tokens and SSH certs include scheme in cache key\r\n   * Cast to lowercase to handle \"bearer\" from ADFS\r\n   */\n  return credentialEntity.tokenType && credentialEntity.tokenType.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase() ? credentialEntity.tokenType.toLowerCase() : \"\";\n}\n/**\r\n * validates if a given cache entry is \"Telemetry\", parses <key,value>\r\n * @param key\r\n * @param entity\r\n */\nfunction isServerTelemetryEntity(key, entity) {\n  const validateKey = key.indexOf(SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;\n  let validateEntity = true;\n  if (entity) {\n    validateEntity = entity.hasOwnProperty(\"failedRequests\") && entity.hasOwnProperty(\"errors\") && entity.hasOwnProperty(\"cacheHits\");\n  }\n  return validateKey && validateEntity;\n}\n/**\r\n * validates if a given cache entry is \"Throttling\", parses <key,value>\r\n * @param key\r\n * @param entity\r\n */\nfunction isThrottlingEntity(key, entity) {\n  let validateKey = false;\n  if (key) {\n    validateKey = key.indexOf(ThrottlingConstants.THROTTLING_PREFIX) === 0;\n  }\n  let validateEntity = true;\n  if (entity) {\n    validateEntity = entity.hasOwnProperty(\"throttleTime\");\n  }\n  return validateKey && validateEntity;\n}\n/**\r\n * Generate AppMetadata Cache Key as per the schema: appmetadata-<environment>-<client_id>\r\n */\nfunction generateAppMetadataKey({\n  environment,\n  clientId\n}) {\n  const appMetaDataKeyArray = [APP_METADATA, environment, clientId];\n  return appMetaDataKeyArray.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/*\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\nfunction isAppMetadataEntity(key, entity) {\n  if (!entity) {\n    return false;\n  }\n  return key.indexOf(APP_METADATA) === 0 && entity.hasOwnProperty(\"clientId\") && entity.hasOwnProperty(\"environment\");\n}\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\nfunction isAuthorityMetadataEntity(key, entity) {\n  if (!entity) {\n    return false;\n  }\n  return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 && entity.hasOwnProperty(\"aliases\") && entity.hasOwnProperty(\"preferred_cache\") && entity.hasOwnProperty(\"preferred_network\") && entity.hasOwnProperty(\"canonical_authority\") && entity.hasOwnProperty(\"authorization_endpoint\") && entity.hasOwnProperty(\"token_endpoint\") && entity.hasOwnProperty(\"issuer\") && entity.hasOwnProperty(\"aliasesFromNetwork\") && entity.hasOwnProperty(\"endpointsFromNetwork\") && entity.hasOwnProperty(\"expiresAt\") && entity.hasOwnProperty(\"jwks_uri\");\n}\n/**\r\n * Reset the exiresAt value\r\n */\nfunction generateAuthorityMetadataExpiresAt() {\n  return nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\n}\nfunction updateAuthorityEndpointMetadata(authorityMetadata, updatedValues, fromNetwork) {\n  authorityMetadata.authorization_endpoint = updatedValues.authorization_endpoint;\n  authorityMetadata.token_endpoint = updatedValues.token_endpoint;\n  authorityMetadata.end_session_endpoint = updatedValues.end_session_endpoint;\n  authorityMetadata.issuer = updatedValues.issuer;\n  authorityMetadata.endpointsFromNetwork = fromNetwork;\n  authorityMetadata.jwks_uri = updatedValues.jwks_uri;\n}\nfunction updateCloudDiscoveryMetadata(authorityMetadata, updatedValues, fromNetwork) {\n  authorityMetadata.aliases = updatedValues.aliases;\n  authorityMetadata.preferred_cache = updatedValues.preferred_cache;\n  authorityMetadata.preferred_network = updatedValues.preferred_network;\n  authorityMetadata.aliasesFromNetwork = fromNetwork;\n}\n/**\r\n * Returns whether or not the data needs to be refreshed\r\n */\nfunction isAuthorityMetadataExpired(metadata) {\n  return metadata.expiresAt <= nowSeconds();\n}\nexport { createAccessTokenEntity, createIdTokenEntity, createRefreshTokenEntity, generateAppMetadataKey, generateAuthorityMetadataExpiresAt, generateCredentialKey, isAccessTokenEntity, isAppMetadataEntity, isAuthorityMetadataEntity, isAuthorityMetadataExpired, isCredentialEntity, isIdTokenEntity, isRefreshTokenEntity, isServerTelemetryEntity, isThrottlingEntity, updateAuthorityEndpointMetadata, updateCloudDiscoveryMetadata };","map":{"version":3,"names":["generateCredentialKey","credentialEntity","credentialKey","generateAccountId","generateCredentialId","generateTarget","generateClaimsHash","generateScheme","join","Separators","CACHE_KEY_SEPARATOR","toLowerCase","createIdTokenEntity","homeAccountId","environment","idToken","clientId","tenantId","idTokenEntity","credentialType","CredentialType","ID_TOKEN","secret","realm","createAccessTokenEntity","accessToken","scopes","expiresOn","extExpiresOn","base64Decode","refreshOn","tokenType","userAssertionHash","keyId","requestedClaims","requestedClaimsHash","atEntity","ACCESS_TOKEN","cachedAt","nowSeconds","toString","extendedExpiresOn","target","AuthenticationScheme","BEARER","ACCESS_TOKEN_WITH_AUTH_SCHEME","POP","tokenClaims","extractTokenClaims","cnf","kid","createClientAuthError","tokenClaimsCnfRequiredForSignedJwt","SSH","createRefreshTokenEntity","refreshToken","familyId","rtEntity","REFRESH_TOKEN","isCredentialEntity","entity","hasOwnProperty","isAccessTokenEntity","isIdTokenEntity","isRefreshTokenEntity","accountId","clientOrFamilyId","credentialId","isServerTelemetryEntity","key","validateKey","indexOf","SERVER_TELEM_CONSTANTS","CACHE_KEY","validateEntity","isThrottlingEntity","ThrottlingConstants","THROTTLING_PREFIX","generateAppMetadataKey","appMetaDataKeyArray","APP_METADATA","isAppMetadataEntity","isAuthorityMetadataEntity","AUTHORITY_METADATA_CONSTANTS","generateAuthorityMetadataExpiresAt","REFRESH_TIME_SECONDS","updateAuthorityEndpointMetadata","authorityMetadata","updatedValues","fromNetwork","authorization_endpoint","token_endpoint","end_session_endpoint","issuer","endpointsFromNetwork","jwks_uri","updateCloudDiscoveryMetadata","aliases","preferred_cache","preferred_network","aliasesFromNetwork","isAuthorityMetadataExpired","metadata","expiresAt"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-common/src/cache/utils/CacheHelpers.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { extractTokenClaims } from \"../../account/AuthToken.js\";\nimport { TokenClaims } from \"../../account/TokenClaims.js\";\nimport { CloudDiscoveryMetadata } from \"../../authority/CloudDiscoveryMetadata.js\";\nimport { OpenIdConfigResponse } from \"../../authority/OpenIdConfigResponse.js\";\nimport {\n    ClientAuthErrorCodes,\n    createClientAuthError,\n} from \"../../error/ClientAuthError.js\";\nimport {\n    APP_METADATA,\n    AUTHORITY_METADATA_CONSTANTS,\n    AuthenticationScheme,\n    CredentialType,\n    SERVER_TELEM_CONSTANTS,\n    Separators,\n    ThrottlingConstants,\n} from \"../../utils/Constants.js\";\nimport * as TimeUtils from \"../../utils/TimeUtils.js\";\nimport { AccessTokenEntity } from \"../entities/AccessTokenEntity.js\";\nimport { AppMetadataEntity } from \"../entities/AppMetadataEntity.js\";\nimport { AuthorityMetadataEntity } from \"../entities/AuthorityMetadataEntity.js\";\nimport { CredentialEntity } from \"../entities/CredentialEntity.js\";\nimport { IdTokenEntity } from \"../entities/IdTokenEntity.js\";\nimport { RefreshTokenEntity } from \"../entities/RefreshTokenEntity.js\";\n\n/**\n * Cache Key: <home_account_id>-<environment>-<credential_type>-<client_id or familyId>-<realm>-<scopes>-<claims hash>-<scheme>\n * IdToken Example: uid.utid-login.microsoftonline.com-idtoken-app_client_id-contoso.com\n * AccessToken Example: uid.utid-login.microsoftonline.com-accesstoken-app_client_id-contoso.com-scope1 scope2--pop\n * RefreshToken Example: uid.utid-login.microsoftonline.com-refreshtoken-1-contoso.com\n * @param credentialEntity\n * @returns\n */\nexport function generateCredentialKey(\n    credentialEntity: CredentialEntity\n): string {\n    const credentialKey = [\n        generateAccountId(credentialEntity),\n        generateCredentialId(credentialEntity),\n        generateTarget(credentialEntity),\n        generateClaimsHash(credentialEntity),\n        generateScheme(credentialEntity),\n    ];\n\n    return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n\n/**\n * Create IdTokenEntity\n * @param homeAccountId\n * @param authenticationResult\n * @param clientId\n * @param authority\n */\nexport function createIdTokenEntity(\n    homeAccountId: string,\n    environment: string,\n    idToken: string,\n    clientId: string,\n    tenantId: string\n): IdTokenEntity {\n    const idTokenEntity: IdTokenEntity = {\n        credentialType: CredentialType.ID_TOKEN,\n        homeAccountId: homeAccountId,\n        environment: environment,\n        clientId: clientId,\n        secret: idToken,\n        realm: tenantId,\n    };\n\n    return idTokenEntity;\n}\n\n/**\n * Create AccessTokenEntity\n * @param homeAccountId\n * @param environment\n * @param accessToken\n * @param clientId\n * @param tenantId\n * @param scopes\n * @param expiresOn\n * @param extExpiresOn\n */\nexport function createAccessTokenEntity(\n    homeAccountId: string,\n    environment: string,\n    accessToken: string,\n    clientId: string,\n    tenantId: string,\n    scopes: string,\n    expiresOn: number,\n    extExpiresOn: number,\n    base64Decode: (input: string) => string,\n    refreshOn?: number,\n    tokenType?: AuthenticationScheme,\n    userAssertionHash?: string,\n    keyId?: string,\n    requestedClaims?: string,\n    requestedClaimsHash?: string\n): AccessTokenEntity {\n    const atEntity: AccessTokenEntity = {\n        homeAccountId: homeAccountId,\n        credentialType: CredentialType.ACCESS_TOKEN,\n        secret: accessToken,\n        cachedAt: TimeUtils.nowSeconds().toString(),\n        expiresOn: expiresOn.toString(),\n        extendedExpiresOn: extExpiresOn.toString(),\n        environment: environment,\n        clientId: clientId,\n        realm: tenantId,\n        target: scopes,\n        tokenType: tokenType || AuthenticationScheme.BEARER,\n    };\n\n    if (userAssertionHash) {\n        atEntity.userAssertionHash = userAssertionHash;\n    }\n\n    if (refreshOn) {\n        atEntity.refreshOn = refreshOn.toString();\n    }\n\n    if (requestedClaims) {\n        atEntity.requestedClaims = requestedClaims;\n        atEntity.requestedClaimsHash = requestedClaimsHash;\n    }\n\n    /*\n     * Create Access Token With Auth Scheme instead of regular access token\n     * Cast to lower to handle \"bearer\" from ADFS\n     */\n    if (\n        atEntity.tokenType?.toLowerCase() !==\n        AuthenticationScheme.BEARER.toLowerCase()\n    ) {\n        atEntity.credentialType = CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n        switch (atEntity.tokenType) {\n            case AuthenticationScheme.POP:\n                // Make sure keyId is present and add it to credential\n                const tokenClaims: TokenClaims | null = extractTokenClaims(\n                    accessToken,\n                    base64Decode\n                );\n                if (!tokenClaims?.cnf?.kid) {\n                    throw createClientAuthError(\n                        ClientAuthErrorCodes.tokenClaimsCnfRequiredForSignedJwt\n                    );\n                }\n                atEntity.keyId = tokenClaims.cnf.kid;\n                break;\n            case AuthenticationScheme.SSH:\n                atEntity.keyId = keyId;\n        }\n    }\n\n    return atEntity;\n}\n\n/**\n * Create RefreshTokenEntity\n * @param homeAccountId\n * @param authenticationResult\n * @param clientId\n * @param authority\n */\nexport function createRefreshTokenEntity(\n    homeAccountId: string,\n    environment: string,\n    refreshToken: string,\n    clientId: string,\n    familyId?: string,\n    userAssertionHash?: string,\n    expiresOn?: number\n): RefreshTokenEntity {\n    const rtEntity: RefreshTokenEntity = {\n        credentialType: CredentialType.REFRESH_TOKEN,\n        homeAccountId: homeAccountId,\n        environment: environment,\n        clientId: clientId,\n        secret: refreshToken,\n    };\n\n    if (userAssertionHash) {\n        rtEntity.userAssertionHash = userAssertionHash;\n    }\n\n    if (familyId) {\n        rtEntity.familyId = familyId;\n    }\n\n    if (expiresOn) {\n        rtEntity.expiresOn = expiresOn.toString();\n    }\n\n    return rtEntity;\n}\n\nexport function isCredentialEntity(entity: object): boolean {\n    return (\n        entity.hasOwnProperty(\"homeAccountId\") &&\n        entity.hasOwnProperty(\"environment\") &&\n        entity.hasOwnProperty(\"credentialType\") &&\n        entity.hasOwnProperty(\"clientId\") &&\n        entity.hasOwnProperty(\"secret\")\n    );\n}\n\n/**\n * Validates an entity: checks for all expected params\n * @param entity\n */\nexport function isAccessTokenEntity(entity: object): boolean {\n    if (!entity) {\n        return false;\n    }\n\n    return (\n        isCredentialEntity(entity) &&\n        entity.hasOwnProperty(\"realm\") &&\n        entity.hasOwnProperty(\"target\") &&\n        (entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN ||\n            entity[\"credentialType\"] ===\n                CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME)\n    );\n}\n\n/**\n * Validates an entity: checks for all expected params\n * @param entity\n */\nexport function isIdTokenEntity(entity: object): boolean {\n    if (!entity) {\n        return false;\n    }\n\n    return (\n        isCredentialEntity(entity) &&\n        entity.hasOwnProperty(\"realm\") &&\n        entity[\"credentialType\"] === CredentialType.ID_TOKEN\n    );\n}\n\n/**\n * Validates an entity: checks for all expected params\n * @param entity\n */\nexport function isRefreshTokenEntity(entity: object): boolean {\n    if (!entity) {\n        return false;\n    }\n\n    return (\n        isCredentialEntity(entity) &&\n        entity[\"credentialType\"] === CredentialType.REFRESH_TOKEN\n    );\n}\n\n/**\n * Generate Account Id key component as per the schema: <home_account_id>-<environment>\n */\nfunction generateAccountId(credentialEntity: CredentialEntity): string {\n    const accountId: Array<string> = [\n        credentialEntity.homeAccountId,\n        credentialEntity.environment,\n    ];\n    return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n\n/**\n * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\n */\nfunction generateCredentialId(credentialEntity: CredentialEntity): string {\n    const clientOrFamilyId =\n        credentialEntity.credentialType === CredentialType.REFRESH_TOKEN\n            ? credentialEntity.familyId || credentialEntity.clientId\n            : credentialEntity.clientId;\n    const credentialId: Array<string> = [\n        credentialEntity.credentialType,\n        clientOrFamilyId,\n        credentialEntity.realm || \"\",\n    ];\n\n    return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n\n/**\n * Generate target key component as per schema: <target>\n */\nfunction generateTarget(credentialEntity: CredentialEntity): string {\n    return (credentialEntity.target || \"\").toLowerCase();\n}\n\n/**\n * Generate requested claims key component as per schema: <requestedClaims>\n */\nfunction generateClaimsHash(credentialEntity: CredentialEntity): string {\n    return (credentialEntity.requestedClaimsHash || \"\").toLowerCase();\n}\n\n/**\n * Generate scheme key componenet as per schema: <scheme>\n */\nfunction generateScheme(credentialEntity: CredentialEntity): string {\n    /*\n     * PoP Tokens and SSH certs include scheme in cache key\n     * Cast to lowercase to handle \"bearer\" from ADFS\n     */\n    return credentialEntity.tokenType &&\n        credentialEntity.tokenType.toLowerCase() !==\n            AuthenticationScheme.BEARER.toLowerCase()\n        ? credentialEntity.tokenType.toLowerCase()\n        : \"\";\n}\n\n/**\n * validates if a given cache entry is \"Telemetry\", parses <key,value>\n * @param key\n * @param entity\n */\nexport function isServerTelemetryEntity(key: string, entity?: object): boolean {\n    const validateKey: boolean =\n        key.indexOf(SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;\n    let validateEntity: boolean = true;\n\n    if (entity) {\n        validateEntity =\n            entity.hasOwnProperty(\"failedRequests\") &&\n            entity.hasOwnProperty(\"errors\") &&\n            entity.hasOwnProperty(\"cacheHits\");\n    }\n\n    return validateKey && validateEntity;\n}\n\n/**\n * validates if a given cache entry is \"Throttling\", parses <key,value>\n * @param key\n * @param entity\n */\nexport function isThrottlingEntity(key: string, entity?: object): boolean {\n    let validateKey: boolean = false;\n    if (key) {\n        validateKey = key.indexOf(ThrottlingConstants.THROTTLING_PREFIX) === 0;\n    }\n\n    let validateEntity: boolean = true;\n    if (entity) {\n        validateEntity = entity.hasOwnProperty(\"throttleTime\");\n    }\n\n    return validateKey && validateEntity;\n}\n\n/**\n * Generate AppMetadata Cache Key as per the schema: appmetadata-<environment>-<client_id>\n */\nexport function generateAppMetadataKey({\n    environment,\n    clientId,\n}: AppMetadataEntity): string {\n    const appMetaDataKeyArray: Array<string> = [\n        APP_METADATA,\n        environment,\n        clientId,\n    ];\n    return appMetaDataKeyArray\n        .join(Separators.CACHE_KEY_SEPARATOR)\n        .toLowerCase();\n}\n\n/*\n * Validates an entity: checks for all expected params\n * @param entity\n */\nexport function isAppMetadataEntity(key: string, entity: object): boolean {\n    if (!entity) {\n        return false;\n    }\n\n    return (\n        key.indexOf(APP_METADATA) === 0 &&\n        entity.hasOwnProperty(\"clientId\") &&\n        entity.hasOwnProperty(\"environment\")\n    );\n}\n\n/**\n * Validates an entity: checks for all expected params\n * @param entity\n */\nexport function isAuthorityMetadataEntity(\n    key: string,\n    entity: object\n): boolean {\n    if (!entity) {\n        return false;\n    }\n\n    return (\n        key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 &&\n        entity.hasOwnProperty(\"aliases\") &&\n        entity.hasOwnProperty(\"preferred_cache\") &&\n        entity.hasOwnProperty(\"preferred_network\") &&\n        entity.hasOwnProperty(\"canonical_authority\") &&\n        entity.hasOwnProperty(\"authorization_endpoint\") &&\n        entity.hasOwnProperty(\"token_endpoint\") &&\n        entity.hasOwnProperty(\"issuer\") &&\n        entity.hasOwnProperty(\"aliasesFromNetwork\") &&\n        entity.hasOwnProperty(\"endpointsFromNetwork\") &&\n        entity.hasOwnProperty(\"expiresAt\") &&\n        entity.hasOwnProperty(\"jwks_uri\")\n    );\n}\n\n/**\n * Reset the exiresAt value\n */\nexport function generateAuthorityMetadataExpiresAt(): number {\n    return (\n        TimeUtils.nowSeconds() +\n        AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS\n    );\n}\n\nexport function updateAuthorityEndpointMetadata(\n    authorityMetadata: AuthorityMetadataEntity,\n    updatedValues: OpenIdConfigResponse,\n    fromNetwork: boolean\n): void {\n    authorityMetadata.authorization_endpoint =\n        updatedValues.authorization_endpoint;\n    authorityMetadata.token_endpoint = updatedValues.token_endpoint;\n    authorityMetadata.end_session_endpoint = updatedValues.end_session_endpoint;\n    authorityMetadata.issuer = updatedValues.issuer;\n    authorityMetadata.endpointsFromNetwork = fromNetwork;\n    authorityMetadata.jwks_uri = updatedValues.jwks_uri;\n}\n\nexport function updateCloudDiscoveryMetadata(\n    authorityMetadata: AuthorityMetadataEntity,\n    updatedValues: CloudDiscoveryMetadata,\n    fromNetwork: boolean\n): void {\n    authorityMetadata.aliases = updatedValues.aliases;\n    authorityMetadata.preferred_cache = updatedValues.preferred_cache;\n    authorityMetadata.preferred_network = updatedValues.preferred_network;\n    authorityMetadata.aliasesFromNetwork = fromNetwork;\n}\n\n/**\n * Returns whether or not the data needs to be refreshed\n */\nexport function isAuthorityMetadataExpired(\n    metadata: AuthorityMetadataEntity\n): boolean {\n    return metadata.expiresAt <= TimeUtils.nowSeconds();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}