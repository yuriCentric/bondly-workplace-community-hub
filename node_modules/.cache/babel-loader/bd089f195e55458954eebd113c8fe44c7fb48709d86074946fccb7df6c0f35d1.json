{"ast":null,"code":"/*! @azure/msal-browser v4.13.1 2025-06-10 */\n'use strict';\n\nimport { StandardInteractionClient } from './StandardInteractionClient.mjs';\nimport { PerformanceEvents, invokeAsync, RefreshTokenClient } from '@azure/msal-common/browser';\nimport { ApiId } from '../utils/BrowserConstants.mjs';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { initializeBaseRequest } from '../request/RequestHelpers.mjs';\nimport { silentLogoutUnsupported } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass SilentRefreshClient extends StandardInteractionClient {\n  /**\r\n   * Exchanges the refresh token for new tokens\r\n   * @param request\r\n   */\n  async acquireToken(request) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, request.correlationId);\n    const baseRequest = await invokeAsync(initializeBaseRequest, PerformanceEvents.InitializeBaseRequest, this.logger, this.performanceClient, request.correlationId)(request, this.config, this.performanceClient, this.logger);\n    const silentRequest = {\n      ...request,\n      ...baseRequest\n    };\n    if (request.redirectUri) {\n      // Make sure any passed redirectUri is converted to an absolute URL - redirectUri is not a required parameter for refresh token redemption so only include if explicitly provided\n      silentRequest.redirectUri = this.getRedirectUri(request.redirectUri);\n    }\n    const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n    const refreshTokenClient = await this.createRefreshTokenClient({\n      serverTelemetryManager,\n      authorityUrl: silentRequest.authority,\n      azureCloudOptions: silentRequest.azureCloudOptions,\n      account: silentRequest.account\n    });\n    // Send request to renew token. Auth module will throw errors if token cannot be renewed.\n    return invokeAsync(refreshTokenClient.acquireTokenByRefreshToken.bind(refreshTokenClient), PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, this.logger, this.performanceClient, request.correlationId)(silentRequest).catch(e => {\n      e.setCorrelationId(this.correlationId);\n      serverTelemetryManager.cacheFailedRequest(e);\n      throw e;\n    });\n  }\n  /**\r\n   * Currently Unsupported\r\n   */\n  logout() {\n    // Synchronous so we must reject\n    return Promise.reject(createBrowserAuthError(silentLogoutUnsupported));\n  }\n  /**\r\n   * Creates a Refresh Client with the given authority, or the default authority.\r\n   * @param params {\r\n   *         serverTelemetryManager: ServerTelemetryManager;\r\n   *         authorityUrl?: string;\r\n   *         azureCloudOptions?: AzureCloudOptions;\r\n   *         extraQueryParams?: StringDict;\r\n   *         account?: AccountInfo;\r\n   *        }\r\n   */\n  async createRefreshTokenClient(params) {\n    // Create auth module.\n    const clientConfig = await invokeAsync(this.getClientConfiguration.bind(this), PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, this.correlationId)({\n      serverTelemetryManager: params.serverTelemetryManager,\n      requestAuthority: params.authorityUrl,\n      requestAzureCloudOptions: params.azureCloudOptions,\n      requestExtraQueryParameters: params.extraQueryParameters,\n      account: params.account\n    });\n    return new RefreshTokenClient(clientConfig, this.performanceClient);\n  }\n}\nexport { SilentRefreshClient };","map":{"version":3,"names":["SilentRefreshClient","StandardInteractionClient","acquireToken","request","performanceClient","addQueueMeasurement","PerformanceEvents","SilentRefreshClientAcquireToken","correlationId","baseRequest","invokeAsync","initializeBaseRequest","InitializeBaseRequest","logger","config","silentRequest","redirectUri","getRedirectUri","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenSilent_silentFlow","refreshTokenClient","createRefreshTokenClient","authorityUrl","authority","azureCloudOptions","account","acquireTokenByRefreshToken","bind","RefreshTokenClientAcquireTokenByRefreshToken","catch","e","setCorrelationId","cacheFailedRequest","logout","Promise","reject","createBrowserAuthError","silentLogoutUnsupported","params","clientConfig","getClientConfiguration","StandardInteractionClientGetClientConfiguration","requestAuthority","requestAzureCloudOptions","requestExtraQueryParameters","extraQueryParameters","RefreshTokenClient"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-browser/src/interaction_client/SilentRefreshClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StandardInteractionClient } from \"./StandardInteractionClient.js\";\nimport {\n    CommonSilentFlowRequest,\n    ServerTelemetryManager,\n    RefreshTokenClient,\n    AuthError,\n    AzureCloudOptions,\n    PerformanceEvents,\n    invokeAsync,\n    AccountInfo,\n    StringDict,\n} from \"@azure/msal-common/browser\";\nimport { ApiId } from \"../utils/BrowserConstants.js\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError.js\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult.js\";\nimport { initializeBaseRequest } from \"../request/RequestHelpers.js\";\n\nexport class SilentRefreshClient extends StandardInteractionClient {\n    /**\n     * Exchanges the refresh token for new tokens\n     * @param request\n     */\n    async acquireToken(\n        request: CommonSilentFlowRequest\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.SilentRefreshClientAcquireToken,\n            request.correlationId\n        );\n\n        const baseRequest = await invokeAsync(\n            initializeBaseRequest,\n            PerformanceEvents.InitializeBaseRequest,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(request, this.config, this.performanceClient, this.logger);\n        const silentRequest: CommonSilentFlowRequest = {\n            ...request,\n            ...baseRequest,\n        };\n\n        if (request.redirectUri) {\n            // Make sure any passed redirectUri is converted to an absolute URL - redirectUri is not a required parameter for refresh token redemption so only include if explicitly provided\n            silentRequest.redirectUri = this.getRedirectUri(\n                request.redirectUri\n            );\n        }\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            ApiId.acquireTokenSilent_silentFlow\n        );\n\n        const refreshTokenClient = await this.createRefreshTokenClient({\n            serverTelemetryManager,\n            authorityUrl: silentRequest.authority,\n            azureCloudOptions: silentRequest.azureCloudOptions,\n            account: silentRequest.account,\n        });\n        // Send request to renew token. Auth module will throw errors if token cannot be renewed.\n        return invokeAsync(\n            refreshTokenClient.acquireTokenByRefreshToken.bind(\n                refreshTokenClient\n            ),\n            PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(silentRequest).catch((e: AuthError) => {\n            (e as AuthError).setCorrelationId(this.correlationId);\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }) as Promise<AuthenticationResult>;\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(\n            createBrowserAuthError(\n                BrowserAuthErrorCodes.silentLogoutUnsupported\n            )\n        );\n    }\n\n    /**\n     * Creates a Refresh Client with the given authority, or the default authority.\n     * @param params {\n     *         serverTelemetryManager: ServerTelemetryManager;\n     *         authorityUrl?: string;\n     *         azureCloudOptions?: AzureCloudOptions;\n     *         extraQueryParams?: StringDict;\n     *         account?: AccountInfo;\n     *        }\n     */\n    protected async createRefreshTokenClient(params: {\n        serverTelemetryManager: ServerTelemetryManager;\n        authorityUrl?: string;\n        azureCloudOptions?: AzureCloudOptions;\n        extraQueryParameters?: StringDict;\n        account?: AccountInfo;\n    }): Promise<RefreshTokenClient> {\n        // Create auth module.\n        const clientConfig = await invokeAsync(\n            this.getClientConfiguration.bind(this),\n            PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )({\n            serverTelemetryManager: params.serverTelemetryManager,\n            requestAuthority: params.authorityUrl,\n            requestAzureCloudOptions: params.azureCloudOptions,\n            requestExtraQueryParameters: params.extraQueryParameters,\n            account: params.account,\n        });\n        return new RefreshTokenClient(clientConfig, this.performanceClient);\n    }\n}\n"],"mappings":";;;;;;;;;;AAAA;;;AAGG;AAsBG,MAAOA,mBAAoB,SAAQC,yBAAyB;EAC9D;;;AAGG;EACH,MAAMC,YAAYA,CACdC,OAAgC;IAEhC,IAAI,CAACC,iBAAiB,CAACC,mBAAmB,CACtCC,iBAAiB,CAACC,+BAA+B,EACjDJ,OAAO,CAACK,aAAa,CACxB;IAED,MAAMC,WAAW,GAAG,MAAMC,WAAW,CACjCC,qBAAqB,EACrBL,iBAAiB,CAACM,qBAAqB,EACvC,IAAI,CAACC,MAAM,EACX,IAAI,CAACT,iBAAiB,EACtBD,OAAO,CAACK,aAAa,CACxB,CAACL,OAAO,EAAE,IAAI,CAACW,MAAM,EAAE,IAAI,CAACV,iBAAiB,EAAE,IAAI,CAACS,MAAM,CAAC;IAC5D,MAAME,aAAa,GAA4B;MAC3C,GAAGZ,OAAO;MACV,GAAGM;KACN;IAED,IAAIN,OAAO,CAACa,WAAW,EAAE;;MAErBD,aAAa,CAACC,WAAW,GAAG,IAAI,CAACC,cAAc,CAC3Cd,OAAO,CAACa,WAAW,CACtB;IACJ;IAED,MAAME,sBAAsB,GAAG,IAAI,CAACC,gCAAgC,CAChEC,KAAK,CAACC,6BAA6B,CACtC;IAED,MAAMC,kBAAkB,GAAG,MAAM,IAAI,CAACC,wBAAwB,CAAC;MAC3DL,sBAAsB;MACtBM,YAAY,EAAET,aAAa,CAACU,SAAS;MACrCC,iBAAiB,EAAEX,aAAa,CAACW,iBAAiB;MAClDC,OAAO,EAAEZ,aAAa,CAACY;IAC1B,EAAC;;IAEF,OAAOjB,WAAW,CACdY,kBAAkB,CAACM,0BAA0B,CAACC,IAAI,CAC9CP,kBAAkB,CACrB,EACDhB,iBAAiB,CAACwB,4CAA4C,EAC9D,IAAI,CAACjB,MAAM,EACX,IAAI,CAACT,iBAAiB,EACtBD,OAAO,CAACK,aAAa,CACxB,CAACO,aAAa,CAAC,CAACgB,KAAK,CAAEC,CAAY,IAAI;MACnCA,CAAe,CAACC,gBAAgB,CAAC,IAAI,CAACzB,aAAa,CAAC;MACrDU,sBAAsB,CAACgB,kBAAkB,CAACF,CAAC,CAAC;MAC5C,MAAMA,CAAC;IACX,CAAC,CAAkC;;EAGvC;;AAEG;EACHG,MAAMA,CAAA;;IAEF,OAAOC,OAAO,CAACC,MAAM,CACjBC,sBAAsB,CAClBC,uBAA6C,CAChD,CACJ;;EAGL;;;;;;;;;AASG;EACO,MAAMhB,wBAAwBA,CAACiB,MAMxC;;IAEG,MAAMC,YAAY,GAAG,MAAM/B,WAAW,CAClC,IAAI,CAACgC,sBAAsB,CAACb,IAAI,CAAC,IAAI,CAAC,EACtCvB,iBAAiB,CAACqC,+CAA+C,EACjE,IAAI,CAAC9B,MAAM,EACX,IAAI,CAACT,iBAAiB,EACtB,IAAI,CAACI,aAAa,CACrB,CAAC;MACEU,sBAAsB,EAAEsB,MAAM,CAACtB,sBAAsB;MACrD0B,gBAAgB,EAAEJ,MAAM,CAAChB,YAAY;MACrCqB,wBAAwB,EAAEL,MAAM,CAACd,iBAAiB;MAClDoB,2BAA2B,EAAEN,MAAM,CAACO,oBAAoB;MACxDpB,OAAO,EAAEa,MAAM,CAACb;IACnB,EAAC;IACF,OAAO,IAAIqB,kBAAkB,CAACP,YAAY,EAAE,IAAI,CAACrC,iBAAiB,CAAC;;AAE1E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}