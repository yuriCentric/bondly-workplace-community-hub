{"ast":null,"code":"/*! @azure/msal-browser v4.13.1 2025-06-10 */\n'use strict';\n\nimport { createClientConfigurationError, ClientConfigurationErrorCodes, invokeAsync, PerformanceEvents, RequestParameterBuilder, OAuthResponseType, Constants, AuthorizeProtocol, ThrottlingUtils, ResponseHandler, TimeUtils, ProtocolMode, AuthenticationScheme, PopTokenGenerator, ProtocolUtils } from '@azure/msal-common/browser';\nimport { BrowserConstants } from '../utils/BrowserConstants.mjs';\nimport { version } from '../packageMetadata.mjs';\nimport { CryptoOps } from '../crypto/CryptoOps.mjs';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { InteractionHandler } from '../interaction_handler/InteractionHandler.mjs';\nimport { PlatformAuthInteractionClient } from '../interaction_client/PlatformAuthInteractionClient.mjs';\nimport { decryptEarResponse } from '../crypto/BrowserCrypto.mjs';\nimport { earJwkEmpty, earJweEmpty, nativeConnectionNotEstablished } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Returns map of parameters that are applicable to all calls to /authorize whether using PKCE or EAR\r\n * @param config\r\n * @param authority\r\n * @param request\r\n * @param logger\r\n * @param performanceClient\r\n * @returns\r\n */\nasync function getStandardParameters(config, authority, request, logger, performanceClient) {\n  const parameters = AuthorizeProtocol.getStandardAuthorizeRequestParameters({\n    ...config.auth,\n    authority: authority\n  }, request, logger, performanceClient);\n  RequestParameterBuilder.addLibraryInfo(parameters, {\n    sku: BrowserConstants.MSAL_SKU,\n    version: version,\n    os: \"\",\n    cpu: \"\"\n  });\n  if (config.auth.protocolMode !== ProtocolMode.OIDC) {\n    RequestParameterBuilder.addApplicationTelemetry(parameters, config.telemetry.application);\n  }\n  if (request.platformBroker) {\n    // signal ests that this is a WAM call\n    RequestParameterBuilder.addNativeBroker(parameters);\n    // pass the req_cnf for POP\n    if (request.authenticationScheme === AuthenticationScheme.POP) {\n      const cryptoOps = new CryptoOps(logger, performanceClient);\n      const popTokenGenerator = new PopTokenGenerator(cryptoOps);\n      // req_cnf is always sent as a string for SPAs\n      let reqCnfData;\n      if (!request.popKid) {\n        const generatedReqCnfData = await invokeAsync(popTokenGenerator.generateCnf.bind(popTokenGenerator), PerformanceEvents.PopTokenGenerateCnf, logger, performanceClient, request.correlationId)(request, logger);\n        reqCnfData = generatedReqCnfData.reqCnfString;\n      } else {\n        reqCnfData = cryptoOps.encodeKid(request.popKid);\n      }\n      RequestParameterBuilder.addPopToken(parameters, reqCnfData);\n    }\n  }\n  RequestParameterBuilder.instrumentBrokerParams(parameters, request.correlationId, performanceClient);\n  return parameters;\n}\n/**\r\n * Gets the full /authorize URL with request parameters when using Auth Code + PKCE\r\n * @param config\r\n * @param authority\r\n * @param request\r\n * @param logger\r\n * @param performanceClient\r\n * @returns\r\n */\nasync function getAuthCodeRequestUrl(config, authority, request, logger, performanceClient) {\n  if (!request.codeChallenge) {\n    throw createClientConfigurationError(ClientConfigurationErrorCodes.pkceParamsMissing);\n  }\n  const parameters = await invokeAsync(getStandardParameters, PerformanceEvents.GetStandardParams, logger, performanceClient, request.correlationId)(config, authority, request, logger, performanceClient);\n  RequestParameterBuilder.addResponseType(parameters, OAuthResponseType.CODE);\n  RequestParameterBuilder.addCodeChallengeParams(parameters, request.codeChallenge, Constants.S256_CODE_CHALLENGE_METHOD);\n  RequestParameterBuilder.addExtraQueryParameters(parameters, request.extraQueryParameters || {});\n  return AuthorizeProtocol.getAuthorizeUrl(authority, parameters, config.auth.encodeExtraQueryParams, request.extraQueryParameters);\n}\n/**\r\n * Gets the form that will be posted to /authorize with request parameters when using EAR\r\n */\nasync function getEARForm(frame, config, authority, request, logger, performanceClient) {\n  if (!request.earJwk) {\n    throw createBrowserAuthError(earJwkEmpty);\n  }\n  const parameters = await getStandardParameters(config, authority, request, logger, performanceClient);\n  RequestParameterBuilder.addResponseType(parameters, OAuthResponseType.IDTOKEN_TOKEN_REFRESHTOKEN);\n  RequestParameterBuilder.addEARParameters(parameters, request.earJwk);\n  const queryParams = new Map();\n  RequestParameterBuilder.addExtraQueryParameters(queryParams, request.extraQueryParameters || {});\n  const url = AuthorizeProtocol.getAuthorizeUrl(authority, queryParams, config.auth.encodeExtraQueryParams, request.extraQueryParameters);\n  return createForm(frame, url, parameters);\n}\n/**\r\n * Creates form element in the provided document with auth parameters in the post body\r\n * @param frame\r\n * @param authorizeUrl\r\n * @param parameters\r\n * @returns\r\n */\nfunction createForm(frame, authorizeUrl, parameters) {\n  const form = frame.createElement(\"form\");\n  form.method = \"post\";\n  form.action = authorizeUrl;\n  parameters.forEach((value, key) => {\n    const param = frame.createElement(\"input\");\n    param.hidden = true;\n    param.name = key;\n    param.value = value;\n    form.appendChild(param);\n  });\n  frame.body.appendChild(form);\n  return form;\n}\n/**\r\n * Response handler when server returns accountId on the /authorize request\r\n * @param request\r\n * @param accountId\r\n * @param apiId\r\n * @param config\r\n * @param browserStorage\r\n * @param nativeStorage\r\n * @param eventHandler\r\n * @param logger\r\n * @param performanceClient\r\n * @param nativeMessageHandler\r\n * @returns\r\n */\nasync function handleResponsePlatformBroker(request, accountId, apiId, config, browserStorage, nativeStorage, eventHandler, logger, performanceClient, platformAuthProvider) {\n  logger.verbose(\"Account id found, calling WAM for token\");\n  if (!platformAuthProvider) {\n    throw createBrowserAuthError(nativeConnectionNotEstablished);\n  }\n  const browserCrypto = new CryptoOps(logger, performanceClient);\n  const nativeInteractionClient = new PlatformAuthInteractionClient(config, browserStorage, browserCrypto, logger, eventHandler, config.system.navigationClient, apiId, performanceClient, platformAuthProvider, accountId, nativeStorage, request.correlationId);\n  const {\n    userRequestState\n  } = ProtocolUtils.parseRequestState(browserCrypto, request.state);\n  return invokeAsync(nativeInteractionClient.acquireToken.bind(nativeInteractionClient), PerformanceEvents.NativeInteractionClientAcquireToken, logger, performanceClient, request.correlationId)({\n    ...request,\n    state: userRequestState,\n    prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\n  });\n}\n/**\r\n * Response handler when server returns code on the /authorize request\r\n * @param request\r\n * @param response\r\n * @param codeVerifier\r\n * @param authClient\r\n * @param browserStorage\r\n * @param logger\r\n * @param performanceClient\r\n * @returns\r\n */\nasync function handleResponseCode(request, response, codeVerifier, apiId, config, authClient, browserStorage, nativeStorage, eventHandler, logger, performanceClient, platformAuthProvider) {\n  // Remove throttle if it exists\n  ThrottlingUtils.removeThrottle(browserStorage, config.auth.clientId, request);\n  if (response.accountId) {\n    return invokeAsync(handleResponsePlatformBroker, PerformanceEvents.HandleResponsePlatformBroker, logger, performanceClient, request.correlationId)(request, response.accountId, apiId, config, browserStorage, nativeStorage, eventHandler, logger, performanceClient, platformAuthProvider);\n  }\n  const authCodeRequest = {\n    ...request,\n    code: response.code || \"\",\n    codeVerifier: codeVerifier\n  };\n  // Create popup interaction handler.\n  const interactionHandler = new InteractionHandler(authClient, browserStorage, authCodeRequest, logger, performanceClient);\n  // Handle response from hash string.\n  const result = await invokeAsync(interactionHandler.handleCodeResponse.bind(interactionHandler), PerformanceEvents.HandleCodeResponse, logger, performanceClient, request.correlationId)(response, request);\n  return result;\n}\n/**\r\n * Response handler when server returns ear_jwe on the /authorize request\r\n * @param request\r\n * @param response\r\n * @param apiId\r\n * @param config\r\n * @param authority\r\n * @param browserStorage\r\n * @param nativeStorage\r\n * @param eventHandler\r\n * @param logger\r\n * @param performanceClient\r\n * @param nativeMessageHandler\r\n * @returns\r\n */\nasync function handleResponseEAR(request, response, apiId, config, authority, browserStorage, nativeStorage, eventHandler, logger, performanceClient, platformAuthProvider) {\n  // Remove throttle if it exists\n  ThrottlingUtils.removeThrottle(browserStorage, config.auth.clientId, request);\n  // Validate state & check response for errors\n  AuthorizeProtocol.validateAuthorizationResponse(response, request.state);\n  if (!response.ear_jwe) {\n    throw createBrowserAuthError(earJweEmpty);\n  }\n  if (!request.earJwk) {\n    throw createBrowserAuthError(earJwkEmpty);\n  }\n  const decryptedData = JSON.parse(await invokeAsync(decryptEarResponse, PerformanceEvents.DecryptEarResponse, logger, performanceClient, request.correlationId)(request.earJwk, response.ear_jwe));\n  if (decryptedData.accountId) {\n    return invokeAsync(handleResponsePlatformBroker, PerformanceEvents.HandleResponsePlatformBroker, logger, performanceClient, request.correlationId)(request, decryptedData.accountId, apiId, config, browserStorage, nativeStorage, eventHandler, logger, performanceClient, platformAuthProvider);\n  }\n  const responseHandler = new ResponseHandler(config.auth.clientId, browserStorage, new CryptoOps(logger, performanceClient), logger, null, null, performanceClient);\n  // Validate response. This function throws a server error if an error is returned by the server.\n  responseHandler.validateTokenResponse(decryptedData);\n  // Temporary until response handler is refactored to be more flow agnostic.\n  const additionalData = {\n    code: \"\",\n    state: request.state,\n    nonce: request.nonce,\n    client_info: decryptedData.client_info,\n    cloud_graph_host_name: decryptedData.cloud_graph_host_name,\n    cloud_instance_host_name: decryptedData.cloud_instance_host_name,\n    cloud_instance_name: decryptedData.cloud_instance_name,\n    msgraph_host: decryptedData.msgraph_host\n  };\n  return await invokeAsync(responseHandler.handleServerTokenResponse.bind(responseHandler), PerformanceEvents.HandleServerTokenResponse, logger, performanceClient, request.correlationId)(decryptedData, authority, TimeUtils.nowSeconds(), request, additionalData, undefined, undefined, undefined, undefined);\n}\nexport { getAuthCodeRequestUrl, getEARForm, handleResponseCode, handleResponseEAR, handleResponsePlatformBroker };","map":{"version":3,"names":["getStandardParameters","config","authority","request","logger","performanceClient","parameters","AuthorizeProtocol","getStandardAuthorizeRequestParameters","auth","RequestParameterBuilder","addLibraryInfo","sku","BrowserConstants","MSAL_SKU","version","os","cpu","protocolMode","ProtocolMode","OIDC","addApplicationTelemetry","telemetry","application","platformBroker","addNativeBroker","authenticationScheme","AuthenticationScheme","POP","cryptoOps","CryptoOps","popTokenGenerator","PopTokenGenerator","reqCnfData","popKid","generatedReqCnfData","invokeAsync","generateCnf","bind","PerformanceEvents","PopTokenGenerateCnf","correlationId","reqCnfString","encodeKid","addPopToken","instrumentBrokerParams","getAuthCodeRequestUrl","codeChallenge","createClientConfigurationError","ClientConfigurationErrorCodes","pkceParamsMissing","GetStandardParams","addResponseType","OAuthResponseType","CODE","addCodeChallengeParams","Constants","S256_CODE_CHALLENGE_METHOD","addExtraQueryParameters","extraQueryParameters","getAuthorizeUrl","encodeExtraQueryParams","getEARForm","frame","earJwk","createBrowserAuthError","earJwkEmpty","IDTOKEN_TOKEN_REFRESHTOKEN","addEARParameters","queryParams","Map","url","createForm","authorizeUrl","form","createElement","method","action","forEach","value","key","param","hidden","name","appendChild","body","handleResponsePlatformBroker","accountId","apiId","browserStorage","nativeStorage","eventHandler","platformAuthProvider","verbose","nativeConnectionNotEstablished","browserCrypto","nativeInteractionClient","PlatformAuthInteractionClient","system","navigationClient","userRequestState","ProtocolUtils","parseRequestState","state","acquireToken","NativeInteractionClientAcquireToken","prompt","undefined","handleResponseCode","response","codeVerifier","authClient","ThrottlingUtils","removeThrottle","clientId","HandleResponsePlatformBroker","authCodeRequest","code","interactionHandler","InteractionHandler","result","handleCodeResponse","HandleCodeResponse","handleResponseEAR","validateAuthorizationResponse","ear_jwe","earJweEmpty","decryptedData","JSON","parse","decryptEarResponse","DecryptEarResponse","responseHandler","ResponseHandler","validateTokenResponse","additionalData","nonce","client_info","cloud_graph_host_name","cloud_instance_host_name","cloud_instance_name","msgraph_host","handleServerTokenResponse","HandleServerTokenResponse","TimeUtils","nowSeconds"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-browser/src/protocol/Authorize.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AuthenticationScheme,\n    Authority,\n    AuthorizeProtocol,\n    ClientConfigurationErrorCodes,\n    CommonAuthorizationUrlRequest,\n    createClientConfigurationError,\n    invokeAsync,\n    IPerformanceClient,\n    Logger,\n    PerformanceEvents,\n    PopTokenGenerator,\n    ProtocolMode,\n    RequestParameterBuilder,\n    OAuthResponseType,\n    Constants,\n    CommonAuthorizationCodeRequest,\n    AuthorizationCodeClient,\n    ProtocolUtils,\n    ThrottlingUtils,\n    AuthorizeResponse,\n    ResponseHandler,\n    TimeUtils,\n    AuthorizationCodePayload,\n    ServerAuthorizationTokenResponse,\n} from \"@azure/msal-common/browser\";\nimport { BrowserConfiguration } from \"../config/Configuration.js\";\nimport { ApiId, BrowserConstants } from \"../utils/BrowserConstants.js\";\nimport { version } from \"../packageMetadata.js\";\nimport { CryptoOps } from \"../crypto/CryptoOps.js\";\nimport {\n    BrowserAuthErrorCodes,\n    createBrowserAuthError,\n} from \"../error/BrowserAuthError.js\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult.js\";\nimport { InteractionHandler } from \"../interaction_handler/InteractionHandler.js\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager.js\";\nimport { PlatformAuthInteractionClient } from \"../interaction_client/PlatformAuthInteractionClient.js\";\nimport { EventHandler } from \"../event/EventHandler.js\";\nimport { decryptEarResponse } from \"../crypto/BrowserCrypto.js\";\nimport { IPlatformAuthHandler } from \"../broker/nativeBroker/IPlatformAuthHandler.js\";\n\n/**\n * Returns map of parameters that are applicable to all calls to /authorize whether using PKCE or EAR\n * @param config\n * @param authority\n * @param request\n * @param logger\n * @param performanceClient\n * @returns\n */\nasync function getStandardParameters(\n    config: BrowserConfiguration,\n    authority: Authority,\n    request: CommonAuthorizationUrlRequest,\n    logger: Logger,\n    performanceClient: IPerformanceClient\n): Promise<Map<string, string>> {\n    const parameters = AuthorizeProtocol.getStandardAuthorizeRequestParameters(\n        { ...config.auth, authority: authority },\n        request,\n        logger,\n        performanceClient\n    );\n    RequestParameterBuilder.addLibraryInfo(parameters, {\n        sku: BrowserConstants.MSAL_SKU,\n        version: version,\n        os: \"\",\n        cpu: \"\",\n    });\n    if (config.auth.protocolMode !== ProtocolMode.OIDC) {\n        RequestParameterBuilder.addApplicationTelemetry(\n            parameters,\n            config.telemetry.application\n        );\n    }\n\n    if (request.platformBroker) {\n        // signal ests that this is a WAM call\n        RequestParameterBuilder.addNativeBroker(parameters);\n\n        // pass the req_cnf for POP\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n            const cryptoOps = new CryptoOps(logger, performanceClient);\n            const popTokenGenerator = new PopTokenGenerator(cryptoOps);\n\n            // req_cnf is always sent as a string for SPAs\n            let reqCnfData;\n            if (!request.popKid) {\n                const generatedReqCnfData = await invokeAsync(\n                    popTokenGenerator.generateCnf.bind(popTokenGenerator),\n                    PerformanceEvents.PopTokenGenerateCnf,\n                    logger,\n                    performanceClient,\n                    request.correlationId\n                )(request, logger);\n                reqCnfData = generatedReqCnfData.reqCnfString;\n            } else {\n                reqCnfData = cryptoOps.encodeKid(request.popKid);\n            }\n            RequestParameterBuilder.addPopToken(parameters, reqCnfData);\n        }\n    }\n\n    RequestParameterBuilder.instrumentBrokerParams(\n        parameters,\n        request.correlationId,\n        performanceClient\n    );\n\n    return parameters;\n}\n\n/**\n * Gets the full /authorize URL with request parameters when using Auth Code + PKCE\n * @param config\n * @param authority\n * @param request\n * @param logger\n * @param performanceClient\n * @returns\n */\nexport async function getAuthCodeRequestUrl(\n    config: BrowserConfiguration,\n    authority: Authority,\n    request: CommonAuthorizationUrlRequest,\n    logger: Logger,\n    performanceClient: IPerformanceClient\n): Promise<string> {\n    if (!request.codeChallenge) {\n        throw createClientConfigurationError(\n            ClientConfigurationErrorCodes.pkceParamsMissing\n        );\n    }\n\n    const parameters = await invokeAsync(\n        getStandardParameters,\n        PerformanceEvents.GetStandardParams,\n        logger,\n        performanceClient,\n        request.correlationId\n    )(config, authority, request, logger, performanceClient);\n    RequestParameterBuilder.addResponseType(parameters, OAuthResponseType.CODE);\n\n    RequestParameterBuilder.addCodeChallengeParams(\n        parameters,\n        request.codeChallenge,\n        Constants.S256_CODE_CHALLENGE_METHOD\n    );\n\n    RequestParameterBuilder.addExtraQueryParameters(\n        parameters,\n        request.extraQueryParameters || {}\n    );\n\n    return AuthorizeProtocol.getAuthorizeUrl(\n        authority,\n        parameters,\n        config.auth.encodeExtraQueryParams,\n        request.extraQueryParameters\n    );\n}\n\n/**\n * Gets the form that will be posted to /authorize with request parameters when using EAR\n */\nexport async function getEARForm(\n    frame: Document,\n    config: BrowserConfiguration,\n    authority: Authority,\n    request: CommonAuthorizationUrlRequest,\n    logger: Logger,\n    performanceClient: IPerformanceClient\n): Promise<HTMLFormElement> {\n    if (!request.earJwk) {\n        throw createBrowserAuthError(BrowserAuthErrorCodes.earJwkEmpty);\n    }\n\n    const parameters = await getStandardParameters(\n        config,\n        authority,\n        request,\n        logger,\n        performanceClient\n    );\n\n    RequestParameterBuilder.addResponseType(\n        parameters,\n        OAuthResponseType.IDTOKEN_TOKEN_REFRESHTOKEN\n    );\n    RequestParameterBuilder.addEARParameters(parameters, request.earJwk);\n\n    const queryParams = new Map<string, string>();\n    RequestParameterBuilder.addExtraQueryParameters(\n        queryParams,\n        request.extraQueryParameters || {}\n    );\n    const url = AuthorizeProtocol.getAuthorizeUrl(\n        authority,\n        queryParams,\n        config.auth.encodeExtraQueryParams,\n        request.extraQueryParameters\n    );\n\n    return createForm(frame, url, parameters);\n}\n\n/**\n * Creates form element in the provided document with auth parameters in the post body\n * @param frame\n * @param authorizeUrl\n * @param parameters\n * @returns\n */\nfunction createForm(\n    frame: Document,\n    authorizeUrl: string,\n    parameters: Map<string, string>\n): HTMLFormElement {\n    const form = frame.createElement(\"form\");\n    form.method = \"post\";\n    form.action = authorizeUrl;\n\n    parameters.forEach((value: string, key: string) => {\n        const param = frame.createElement(\"input\");\n        param.hidden = true;\n        param.name = key;\n        param.value = value;\n\n        form.appendChild(param);\n    });\n\n    frame.body.appendChild(form);\n    return form;\n}\n\n/**\n * Response handler when server returns accountId on the /authorize request\n * @param request\n * @param accountId\n * @param apiId\n * @param config\n * @param browserStorage\n * @param nativeStorage\n * @param eventHandler\n * @param logger\n * @param performanceClient\n * @param nativeMessageHandler\n * @returns\n */\nexport async function handleResponsePlatformBroker(\n    request: CommonAuthorizationUrlRequest,\n    accountId: string,\n    apiId: ApiId,\n    config: BrowserConfiguration,\n    browserStorage: BrowserCacheManager,\n    nativeStorage: BrowserCacheManager,\n    eventHandler: EventHandler,\n    logger: Logger,\n    performanceClient: IPerformanceClient,\n    platformAuthProvider?: IPlatformAuthHandler\n): Promise<AuthenticationResult> {\n    logger.verbose(\"Account id found, calling WAM for token\");\n\n    if (!platformAuthProvider) {\n        throw createBrowserAuthError(\n            BrowserAuthErrorCodes.nativeConnectionNotEstablished\n        );\n    }\n    const browserCrypto = new CryptoOps(logger, performanceClient);\n    const nativeInteractionClient = new PlatformAuthInteractionClient(\n        config,\n        browserStorage,\n        browserCrypto,\n        logger,\n        eventHandler,\n        config.system.navigationClient,\n        apiId,\n        performanceClient,\n        platformAuthProvider,\n        accountId,\n        nativeStorage,\n        request.correlationId\n    );\n    const { userRequestState } = ProtocolUtils.parseRequestState(\n        browserCrypto,\n        request.state\n    );\n    return invokeAsync(\n        nativeInteractionClient.acquireToken.bind(nativeInteractionClient),\n        PerformanceEvents.NativeInteractionClientAcquireToken,\n        logger,\n        performanceClient,\n        request.correlationId\n    )({\n        ...request,\n        state: userRequestState,\n        prompt: undefined, // Server should handle the prompt, ideally native broker can do this part silently\n    });\n}\n\n/**\n * Response handler when server returns code on the /authorize request\n * @param request\n * @param response\n * @param codeVerifier\n * @param authClient\n * @param browserStorage\n * @param logger\n * @param performanceClient\n * @returns\n */\nexport async function handleResponseCode(\n    request: CommonAuthorizationUrlRequest,\n    response: AuthorizeResponse,\n    codeVerifier: string,\n    apiId: ApiId,\n    config: BrowserConfiguration,\n    authClient: AuthorizationCodeClient,\n    browserStorage: BrowserCacheManager,\n    nativeStorage: BrowserCacheManager,\n    eventHandler: EventHandler,\n    logger: Logger,\n    performanceClient: IPerformanceClient,\n    platformAuthProvider?: IPlatformAuthHandler\n): Promise<AuthenticationResult> {\n    // Remove throttle if it exists\n    ThrottlingUtils.removeThrottle(\n        browserStorage,\n        config.auth.clientId,\n        request\n    );\n    if (response.accountId) {\n        return invokeAsync(\n            handleResponsePlatformBroker,\n            PerformanceEvents.HandleResponsePlatformBroker,\n            logger,\n            performanceClient,\n            request.correlationId\n        )(\n            request,\n            response.accountId,\n            apiId,\n            config,\n            browserStorage,\n            nativeStorage,\n            eventHandler,\n            logger,\n            performanceClient,\n            platformAuthProvider\n        );\n    }\n    const authCodeRequest: CommonAuthorizationCodeRequest = {\n        ...request,\n        code: response.code || \"\",\n        codeVerifier: codeVerifier,\n    };\n    // Create popup interaction handler.\n    const interactionHandler = new InteractionHandler(\n        authClient,\n        browserStorage,\n        authCodeRequest,\n        logger,\n        performanceClient\n    );\n    // Handle response from hash string.\n    const result = await invokeAsync(\n        interactionHandler.handleCodeResponse.bind(interactionHandler),\n        PerformanceEvents.HandleCodeResponse,\n        logger,\n        performanceClient,\n        request.correlationId\n    )(response, request);\n\n    return result;\n}\n\n/**\n * Response handler when server returns ear_jwe on the /authorize request\n * @param request\n * @param response\n * @param apiId\n * @param config\n * @param authority\n * @param browserStorage\n * @param nativeStorage\n * @param eventHandler\n * @param logger\n * @param performanceClient\n * @param nativeMessageHandler\n * @returns\n */\nexport async function handleResponseEAR(\n    request: CommonAuthorizationUrlRequest,\n    response: AuthorizeResponse,\n    apiId: ApiId,\n    config: BrowserConfiguration,\n    authority: Authority,\n    browserStorage: BrowserCacheManager,\n    nativeStorage: BrowserCacheManager,\n    eventHandler: EventHandler,\n    logger: Logger,\n    performanceClient: IPerformanceClient,\n    platformAuthProvider?: IPlatformAuthHandler\n): Promise<AuthenticationResult> {\n    // Remove throttle if it exists\n    ThrottlingUtils.removeThrottle(\n        browserStorage,\n        config.auth.clientId,\n        request\n    );\n\n    // Validate state & check response for errors\n    AuthorizeProtocol.validateAuthorizationResponse(response, request.state);\n\n    if (!response.ear_jwe) {\n        throw createBrowserAuthError(BrowserAuthErrorCodes.earJweEmpty);\n    }\n\n    if (!request.earJwk) {\n        throw createBrowserAuthError(BrowserAuthErrorCodes.earJwkEmpty);\n    }\n\n    const decryptedData = JSON.parse(\n        await invokeAsync(\n            decryptEarResponse,\n            PerformanceEvents.DecryptEarResponse,\n            logger,\n            performanceClient,\n            request.correlationId\n        )(request.earJwk, response.ear_jwe)\n    ) as AuthorizeResponse & ServerAuthorizationTokenResponse;\n\n    if (decryptedData.accountId) {\n        return invokeAsync(\n            handleResponsePlatformBroker,\n            PerformanceEvents.HandleResponsePlatformBroker,\n            logger,\n            performanceClient,\n            request.correlationId\n        )(\n            request,\n            decryptedData.accountId,\n            apiId,\n            config,\n            browserStorage,\n            nativeStorage,\n            eventHandler,\n            logger,\n            performanceClient,\n            platformAuthProvider\n        );\n    }\n\n    const responseHandler = new ResponseHandler(\n        config.auth.clientId,\n        browserStorage,\n        new CryptoOps(logger, performanceClient),\n        logger,\n        null,\n        null,\n        performanceClient\n    );\n\n    // Validate response. This function throws a server error if an error is returned by the server.\n    responseHandler.validateTokenResponse(decryptedData);\n\n    // Temporary until response handler is refactored to be more flow agnostic.\n    const additionalData: AuthorizationCodePayload = {\n        code: \"\",\n        state: request.state,\n        nonce: request.nonce,\n        client_info: decryptedData.client_info,\n        cloud_graph_host_name: decryptedData.cloud_graph_host_name,\n        cloud_instance_host_name: decryptedData.cloud_instance_host_name,\n        cloud_instance_name: decryptedData.cloud_instance_name,\n        msgraph_host: decryptedData.msgraph_host,\n    };\n\n    return (await invokeAsync(\n        responseHandler.handleServerTokenResponse.bind(responseHandler),\n        PerformanceEvents.HandleServerTokenResponse,\n        logger,\n        performanceClient,\n        request.correlationId\n    )(\n        decryptedData,\n        authority,\n        TimeUtils.nowSeconds(),\n        request,\n        additionalData,\n        undefined,\n        undefined,\n        undefined,\n        undefined\n    )) as AuthenticationResult;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}