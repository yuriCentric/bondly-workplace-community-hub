{"ast":null,"code":"/*! @azure/msal-common v15.7.0 2025-05-30 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * @hidden\r\n */\nclass StringUtils {\n  /**\r\n   * Check if stringified object is empty\r\n   * @param strObj\r\n   */\n  static isEmptyObj(strObj) {\n    if (strObj) {\n      try {\n        const obj = JSON.parse(strObj);\n        return Object.keys(obj).length === 0;\n      } catch (e) {}\n    }\n    return true;\n  }\n  static startsWith(str, search) {\n    return str.indexOf(search) === 0;\n  }\n  static endsWith(str, search) {\n    return str.length >= search.length && str.lastIndexOf(search) === str.length - search.length;\n  }\n  /**\r\n   * Parses string into an object.\r\n   *\r\n   * @param query\r\n   */\n  static queryStringToObject(query) {\n    const obj = {};\n    const params = query.split(\"&\");\n    const decode = s => decodeURIComponent(s.replace(/\\+/g, \" \"));\n    params.forEach(pair => {\n      if (pair.trim()) {\n        const [key, value] = pair.split(/=(.+)/g, 2); // Split on the first occurence of the '=' character\n        if (key && value) {\n          obj[decode(key)] = decode(value);\n        }\n      }\n    });\n    return obj;\n  }\n  /**\r\n   * Trims entries in an array.\r\n   *\r\n   * @param arr\r\n   */\n  static trimArrayEntries(arr) {\n    return arr.map(entry => entry.trim());\n  }\n  /**\r\n   * Removes empty strings from array\r\n   * @param arr\r\n   */\n  static removeEmptyStringsFromArray(arr) {\n    return arr.filter(entry => {\n      return !!entry;\n    });\n  }\n  /**\r\n   * Attempts to parse a string into JSON\r\n   * @param str\r\n   */\n  static jsonParseHelper(str) {\n    try {\n      return JSON.parse(str);\n    } catch (e) {\n      return null;\n    }\n  }\n  /**\r\n   * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n   * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n   * @param input String to match against\r\n   */\n  static matchPattern(pattern, input) {\n    /**\r\n     * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n     * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n     */\n    // eslint-disable-next-line security/detect-non-literal-regexp\n    const regex = new RegExp(pattern.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\?\"));\n    return regex.test(input);\n  }\n}\nexport { StringUtils };","map":{"version":3,"names":["StringUtils","isEmptyObj","strObj","obj","JSON","parse","Object","keys","length","e","startsWith","str","search","indexOf","endsWith","lastIndexOf","queryStringToObject","query","params","split","decode","s","decodeURIComponent","replace","forEach","pair","trim","key","value","trimArrayEntries","arr","map","entry","removeEmptyStringsFromArray","filter","jsonParseHelper","matchPattern","pattern","input","regex","RegExp","test"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-common/src/utils/StringUtils.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * @hidden\n */\nexport class StringUtils {\n    /**\n     * Check if stringified object is empty\n     * @param strObj\n     */\n    static isEmptyObj(strObj?: string): boolean {\n        if (strObj) {\n            try {\n                const obj = JSON.parse(strObj);\n                return Object.keys(obj).length === 0;\n            } catch (e) {}\n        }\n        return true;\n    }\n\n    static startsWith(str: string, search: string): boolean {\n        return str.indexOf(search) === 0;\n    }\n\n    static endsWith(str: string, search: string): boolean {\n        return (\n            str.length >= search.length &&\n            str.lastIndexOf(search) === str.length - search.length\n        );\n    }\n\n    /**\n     * Parses string into an object.\n     *\n     * @param query\n     */\n    static queryStringToObject<T>(query: string): T {\n        const obj: {} = {};\n        const params = query.split(\"&\");\n        const decode = (s: string) => decodeURIComponent(s.replace(/\\+/g, \" \"));\n        params.forEach((pair) => {\n            if (pair.trim()) {\n                const [key, value] = pair.split(/=(.+)/g, 2); // Split on the first occurence of the '=' character\n                if (key && value) {\n                    obj[decode(key)] = decode(value);\n                }\n            }\n        });\n        return obj as T;\n    }\n\n    /**\n     * Trims entries in an array.\n     *\n     * @param arr\n     */\n    static trimArrayEntries(arr: Array<string>): Array<string> {\n        return arr.map((entry) => entry.trim());\n    }\n\n    /**\n     * Removes empty strings from array\n     * @param arr\n     */\n    static removeEmptyStringsFromArray(arr: Array<string>): Array<string> {\n        return arr.filter((entry) => {\n            return !!entry;\n        });\n    }\n\n    /**\n     * Attempts to parse a string into JSON\n     * @param str\n     */\n    static jsonParseHelper<T>(str: string): T | null {\n        try {\n            return JSON.parse(str) as T;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    /**\n     * Tests if a given string matches a given pattern, with support for wildcards and queries.\n     * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\n     * @param input String to match against\n     */\n    static matchPattern(pattern: string, input: string): boolean {\n        /**\n         * Wildcard support: https://stackoverflow.com/a/3117248/4888559\n         * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\n         */\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        const regex: RegExp = new RegExp(\n            pattern\n                .replace(/\\\\/g, \"\\\\\\\\\")\n                .replace(/\\*/g, \"[^ ]*\")\n                .replace(/\\?/g, \"\\\\?\")\n        );\n\n        return regex.test(input);\n    }\n}\n"],"mappings":";;;AAAA;;;AAGG;AAEH;;AAEG;MACUA,WAAW;EACpB;;;AAGG;EACH,OAAOC,UAAUA,CAACC,MAAe;IAC7B,IAAIA,MAAM,EAAE;MACR,IAAI;QACA,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC;QAC9B,OAAOI,MAAM,CAACC,IAAI,CAACJ,GAAG,CAAC,CAACK,MAAM,KAAK,CAAC;MACvC,EAAC,OAAOC,CAAC,EAAE;IACf;IACD,OAAO,IAAI;;EAGf,OAAOC,UAAUA,CAACC,GAAW,EAAEC,MAAc;IACzC,OAAOD,GAAG,CAACE,OAAO,CAACD,MAAM,CAAC,KAAK,CAAC;;EAGpC,OAAOE,QAAQA,CAACH,GAAW,EAAEC,MAAc;IACvC,OACID,GAAG,CAACH,MAAM,IAAII,MAAM,CAACJ,MAAM,IAC3BG,GAAG,CAACI,WAAW,CAACH,MAAM,CAAC,KAAKD,GAAG,CAACH,MAAM,GAAGI,MAAM,CAACJ,MAAM;;EAI9D;;;;AAIG;EACH,OAAOQ,mBAAmBA,CAAIC,KAAa;IACvC,MAAMd,GAAG,GAAO,EAAE;IAClB,MAAMe,MAAM,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC;IAC/B,MAAMC,MAAM,GAAIC,CAAS,IAAKC,kBAAkB,CAACD,CAAC,CAACE,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IACvEL,MAAM,CAACM,OAAO,CAAEC,IAAI,IAAI;MACpB,IAAIA,IAAI,CAACC,IAAI,EAAE,EAAE;QACb,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAGH,IAAI,CAACN,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QAC7C,IAAIQ,GAAG,IAAIC,KAAK,EAAE;UACdzB,GAAG,CAACiB,MAAM,CAACO,GAAG,CAAC,CAAC,GAAGP,MAAM,CAACQ,KAAK,CAAC;QACnC;MACJ;IACL,CAAC,CAAC;IACF,OAAOzB,GAAQ;;EAGnB;;;;AAIG;EACH,OAAO0B,gBAAgBA,CAACC,GAAkB;IACtC,OAAOA,GAAG,CAACC,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACN,IAAI,EAAE,CAAC;;EAG3C;;;AAGG;EACH,OAAOO,2BAA2BA,CAACH,GAAkB;IACjD,OAAOA,GAAG,CAACI,MAAM,CAAEF,KAAK,IAAI;MACxB,OAAO,CAAC,CAACA,KAAK;IAClB,CAAC,CAAC;;EAGN;;;AAGG;EACH,OAAOG,eAAeA,CAAIxB,GAAW;IACjC,IAAI;MACA,OAAOP,IAAI,CAACC,KAAK,CAACM,GAAG,CAAM;IAC9B,EAAC,OAAOF,CAAC,EAAE;MACR,OAAO,IAAI;IACd;;EAGL;;;;AAIG;EACH,OAAO2B,YAAYA,CAACC,OAAe,EAAEC,KAAa;IAC9C;;;AAGG;;IAEH,MAAMC,KAAK,GAAW,IAAIC,MAAM,CAC5BH,OAAO,CACFd,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CACtBA,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CACvBA,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAC7B;IAED,OAAOgB,KAAK,CAACE,IAAI,CAACH,KAAK,CAAC;;AAE/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}