{"ast":null,"code":"/*! @azure/msal-browser v4.13.1 2025-06-10 */\n'use strict';\n\nimport { OIDC_DEFAULT_SCOPES } from '@azure/msal-common/browser';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Constants\r\n */\nconst BrowserConstants = {\n  /**\r\n   * Interaction in progress cache value\r\n   */\n  INTERACTION_IN_PROGRESS_VALUE: \"interaction_in_progress\",\n  /**\r\n   * Invalid grant error code\r\n   */\n  INVALID_GRANT_ERROR: \"invalid_grant\",\n  /**\r\n   * Default popup window width\r\n   */\n  POPUP_WIDTH: 483,\n  /**\r\n   * Default popup window height\r\n   */\n  POPUP_HEIGHT: 600,\n  /**\r\n   * Name of the popup window starts with\r\n   */\n  POPUP_NAME_PREFIX: \"msal\",\n  /**\r\n   * Default popup monitor poll interval in milliseconds\r\n   */\n  DEFAULT_POLL_INTERVAL_MS: 30,\n  /**\r\n   * Msal-browser SKU\r\n   */\n  MSAL_SKU: \"msal.js.browser\"\n};\nconst PlatformAuthConstants = {\n  CHANNEL_ID: \"53ee284d-920a-4b59-9d30-a60315b26836\",\n  PREFERRED_EXTENSION_ID: \"ppnbnpeolgkicgegkbkbjmhlideopiji\",\n  MATS_TELEMETRY: \"MATS\",\n  MICROSOFT_ENTRA_BROKERID: \"MicrosoftEntra\",\n  DOM_API_NAME: \"DOM API\",\n  PLATFORM_DOM_APIS: \"get-token-and-sign-out\",\n  PLATFORM_DOM_PROVIDER: \"PlatformAuthDOMHandler\",\n  PLATFORM_EXTENSION_PROVIDER: \"PlatformAuthExtensionHandler\"\n};\nconst NativeExtensionMethod = {\n  HandshakeRequest: \"Handshake\",\n  HandshakeResponse: \"HandshakeResponse\",\n  GetToken: \"GetToken\",\n  Response: \"Response\"\n};\nconst BrowserCacheLocation = {\n  LocalStorage: \"localStorage\",\n  SessionStorage: \"sessionStorage\",\n  MemoryStorage: \"memoryStorage\"\n};\n/**\r\n * HTTP Request types supported by MSAL.\r\n */\nconst HTTP_REQUEST_TYPE = {\n  GET: \"GET\",\n  POST: \"POST\"\n};\nconst INTERACTION_TYPE = {\n  SIGNIN: \"signin\",\n  SIGNOUT: \"signout\"\n};\n/**\r\n * Temporary cache keys for MSAL, deleted after any request.\r\n */\nconst TemporaryCacheKeys = {\n  ORIGIN_URI: \"request.origin\",\n  URL_HASH: \"urlHash\",\n  REQUEST_PARAMS: \"request.params\",\n  VERIFIER: \"code.verifier\",\n  INTERACTION_STATUS_KEY: \"interaction.status\",\n  NATIVE_REQUEST: \"request.native\"\n};\nconst StaticCacheKeys = {\n  ACCOUNT_KEYS: \"msal.account.keys\",\n  TOKEN_KEYS: \"msal.token.keys\",\n  VERSION: \"msal.version\"\n};\n/**\r\n * Cache keys stored in-memory\r\n */\nconst InMemoryCacheKeys = {\n  WRAPPER_SKU: \"wrapper.sku\",\n  WRAPPER_VER: \"wrapper.version\"\n};\n/**\r\n * API Codes for Telemetry purposes.\r\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\r\n * 0-99 Silent Flow\r\n * 800-899 Auth Code Flow\r\n */\nconst ApiId = {\n  acquireTokenRedirect: 861,\n  acquireTokenPopup: 862,\n  ssoSilent: 863,\n  acquireTokenSilent_authCode: 864,\n  handleRedirectPromise: 865,\n  acquireTokenByCode: 866,\n  acquireTokenSilent_silentFlow: 61,\n  logout: 961,\n  logoutPopup: 962\n};\n/*\r\n * Interaction type of the API - used for state and telemetry\r\n */\nvar InteractionType;\n(function (InteractionType) {\n  InteractionType[\"Redirect\"] = \"redirect\";\n  InteractionType[\"Popup\"] = \"popup\";\n  InteractionType[\"Silent\"] = \"silent\";\n  InteractionType[\"None\"] = \"none\";\n})(InteractionType || (InteractionType = {}));\n/**\r\n * Types of interaction currently in progress.\r\n * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.\r\n */\nconst InteractionStatus = {\n  /**\r\n   * Initial status before interaction occurs\r\n   */\n  Startup: \"startup\",\n  /**\r\n   * Status set when all login calls occuring\r\n   */\n  Login: \"login\",\n  /**\r\n   * Status set when logout call occuring\r\n   */\n  Logout: \"logout\",\n  /**\r\n   * Status set for acquireToken calls\r\n   */\n  AcquireToken: \"acquireToken\",\n  /**\r\n   * Status set for ssoSilent calls\r\n   */\n  SsoSilent: \"ssoSilent\",\n  /**\r\n   * Status set when handleRedirect in progress\r\n   */\n  HandleRedirect: \"handleRedirect\",\n  /**\r\n   * Status set when interaction is complete\r\n   */\n  None: \"none\"\n};\nconst DEFAULT_REQUEST = {\n  scopes: OIDC_DEFAULT_SCOPES\n};\n/**\r\n * JWK Key Format string (Type MUST be defined for window crypto APIs)\r\n */\nconst KEY_FORMAT_JWK = \"jwk\";\n// Supported wrapper SKUs\nconst WrapperSKU = {\n  React: \"@azure/msal-react\",\n  Angular: \"@azure/msal-angular\"\n};\n// DatabaseStorage Constants\nconst DB_NAME = \"msal.db\";\nconst DB_VERSION = 1;\nconst DB_TABLE_NAME = `${DB_NAME}.keys`;\nconst CacheLookupPolicy = {\n  /*\r\n   * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired\r\n   * or cannot be found the refresh token will be used to acquire a new one. Finally, if the refresh token\r\n   * is expired acquireTokenSilent will attempt to acquire new access and refresh tokens.\r\n   */\n  Default: 0,\n  /*\r\n   * acquireTokenSilent will only look for access tokens in the cache. It will not attempt to renew access or\r\n   * refresh tokens.\r\n   */\n  AccessToken: 1,\n  /*\r\n   * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired or\r\n   * cannot be found, the refresh token will be used to acquire a new one. If the refresh token is expired, it\r\n   * will not be renewed and acquireTokenSilent will fail.\r\n   */\n  AccessTokenAndRefreshToken: 2,\n  /*\r\n   * acquireTokenSilent will not attempt to retrieve access tokens from the cache and will instead attempt to\r\n   * exchange the cached refresh token for a new access token. If the refresh token is expired, it will not be\r\n   * renewed and acquireTokenSilent will fail.\r\n   */\n  RefreshToken: 3,\n  /*\r\n   * acquireTokenSilent will not look in the cache for the access token. It will go directly to network with the\r\n   * cached refresh token. If the refresh token is expired an attempt will be made to renew it. This is equivalent to\r\n   * setting \"forceRefresh: true\".\r\n   */\n  RefreshTokenAndNetwork: 4,\n  /*\r\n   * acquireTokenSilent will attempt to renew both access and refresh tokens. It will not look in the cache. This will\r\n   * always fail if 3rd party cookies are blocked by the browser.\r\n   */\n  Skip: 5\n};\nconst iFrameRenewalPolicies = [CacheLookupPolicy.Default, CacheLookupPolicy.Skip, CacheLookupPolicy.RefreshTokenAndNetwork];\nconst LOG_LEVEL_CACHE_KEY = \"msal.browser.log.level\";\nconst LOG_PII_CACHE_KEY = \"msal.browser.log.pii\";\nconst BROWSER_PERF_ENABLED_KEY = \"msal.browser.performance.enabled\";\nconst PLATFORM_AUTH_DOM_SUPPORT = \"msal.browser.platform.auth.dom\";\nexport { ApiId, BROWSER_PERF_ENABLED_KEY, BrowserCacheLocation, BrowserConstants, CacheLookupPolicy, DB_NAME, DB_TABLE_NAME, DB_VERSION, DEFAULT_REQUEST, HTTP_REQUEST_TYPE, INTERACTION_TYPE, InMemoryCacheKeys, InteractionStatus, InteractionType, KEY_FORMAT_JWK, LOG_LEVEL_CACHE_KEY, LOG_PII_CACHE_KEY, NativeExtensionMethod, PLATFORM_AUTH_DOM_SUPPORT, PlatformAuthConstants, StaticCacheKeys, TemporaryCacheKeys, WrapperSKU, iFrameRenewalPolicies };","map":{"version":3,"names":["BrowserConstants","INTERACTION_IN_PROGRESS_VALUE","INVALID_GRANT_ERROR","POPUP_WIDTH","POPUP_HEIGHT","POPUP_NAME_PREFIX","DEFAULT_POLL_INTERVAL_MS","MSAL_SKU","PlatformAuthConstants","CHANNEL_ID","PREFERRED_EXTENSION_ID","MATS_TELEMETRY","MICROSOFT_ENTRA_BROKERID","DOM_API_NAME","PLATFORM_DOM_APIS","PLATFORM_DOM_PROVIDER","PLATFORM_EXTENSION_PROVIDER","NativeExtensionMethod","HandshakeRequest","HandshakeResponse","GetToken","Response","BrowserCacheLocation","LocalStorage","SessionStorage","MemoryStorage","HTTP_REQUEST_TYPE","GET","POST","INTERACTION_TYPE","SIGNIN","SIGNOUT","TemporaryCacheKeys","ORIGIN_URI","URL_HASH","REQUEST_PARAMS","VERIFIER","INTERACTION_STATUS_KEY","NATIVE_REQUEST","StaticCacheKeys","ACCOUNT_KEYS","TOKEN_KEYS","VERSION","InMemoryCacheKeys","WRAPPER_SKU","WRAPPER_VER","ApiId","acquireTokenRedirect","acquireTokenPopup","ssoSilent","acquireTokenSilent_authCode","handleRedirectPromise","acquireTokenByCode","acquireTokenSilent_silentFlow","logout","logoutPopup","InteractionType","InteractionStatus","Startup","Login","Logout","AcquireToken","SsoSilent","HandleRedirect","None","DEFAULT_REQUEST","scopes","OIDC_DEFAULT_SCOPES","KEY_FORMAT_JWK","WrapperSKU","React","Angular","DB_NAME","DB_VERSION","DB_TABLE_NAME","CacheLookupPolicy","Default","AccessToken","AccessTokenAndRefreshToken","RefreshToken","RefreshTokenAndNetwork","Skip","iFrameRenewalPolicies","LOG_LEVEL_CACHE_KEY","LOG_PII_CACHE_KEY","BROWSER_PERF_ENABLED_KEY","PLATFORM_AUTH_DOM_SUPPORT"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-browser/src/utils/BrowserConstants.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { OIDC_DEFAULT_SCOPES } from \"@azure/msal-common/browser\";\nimport { PopupRequest } from \"../request/PopupRequest.js\";\nimport { RedirectRequest } from \"../request/RedirectRequest.js\";\n\n/**\n * Constants\n */\nexport const BrowserConstants = {\n    /**\n     * Interaction in progress cache value\n     */\n    INTERACTION_IN_PROGRESS_VALUE: \"interaction_in_progress\",\n    /**\n     * Invalid grant error code\n     */\n    INVALID_GRANT_ERROR: \"invalid_grant\",\n    /**\n     * Default popup window width\n     */\n    POPUP_WIDTH: 483,\n    /**\n     * Default popup window height\n     */\n    POPUP_HEIGHT: 600,\n    /**\n     * Name of the popup window starts with\n     */\n    POPUP_NAME_PREFIX: \"msal\",\n    /**\n     * Default popup monitor poll interval in milliseconds\n     */\n    DEFAULT_POLL_INTERVAL_MS: 30,\n    /**\n     * Msal-browser SKU\n     */\n    MSAL_SKU: \"msal.js.browser\",\n};\n\nexport const PlatformAuthConstants = {\n    CHANNEL_ID: \"53ee284d-920a-4b59-9d30-a60315b26836\",\n    PREFERRED_EXTENSION_ID: \"ppnbnpeolgkicgegkbkbjmhlideopiji\",\n    MATS_TELEMETRY: \"MATS\",\n    MICROSOFT_ENTRA_BROKERID: \"MicrosoftEntra\",\n    DOM_API_NAME: \"DOM API\",\n    PLATFORM_DOM_APIS: \"get-token-and-sign-out\",\n    PLATFORM_DOM_PROVIDER: \"PlatformAuthDOMHandler\",\n    PLATFORM_EXTENSION_PROVIDER: \"PlatformAuthExtensionHandler\",\n};\n\nexport const NativeExtensionMethod = {\n    HandshakeRequest: \"Handshake\",\n    HandshakeResponse: \"HandshakeResponse\",\n    GetToken: \"GetToken\",\n    Response: \"Response\",\n} as const;\nexport type NativeExtensionMethod =\n    (typeof NativeExtensionMethod)[keyof typeof NativeExtensionMethod];\n\nexport const BrowserCacheLocation = {\n    LocalStorage: \"localStorage\",\n    SessionStorage: \"sessionStorage\",\n    MemoryStorage: \"memoryStorage\",\n} as const;\nexport type BrowserCacheLocation =\n    (typeof BrowserCacheLocation)[keyof typeof BrowserCacheLocation];\n\n/**\n * HTTP Request types supported by MSAL.\n */\nexport const HTTP_REQUEST_TYPE = {\n    GET: \"GET\",\n    POST: \"POST\",\n} as const;\nexport type HTTP_REQUEST_TYPE =\n    (typeof HTTP_REQUEST_TYPE)[keyof typeof HTTP_REQUEST_TYPE];\n\nexport const INTERACTION_TYPE = {\n    SIGNIN: \"signin\",\n    SIGNOUT: \"signout\",\n} as const;\nexport type INTERACTION_TYPE =\n    (typeof INTERACTION_TYPE)[keyof typeof INTERACTION_TYPE];\n\n/**\n * Temporary cache keys for MSAL, deleted after any request.\n */\nexport const TemporaryCacheKeys = {\n    ORIGIN_URI: \"request.origin\",\n    URL_HASH: \"urlHash\",\n    REQUEST_PARAMS: \"request.params\",\n    VERIFIER: \"code.verifier\",\n    INTERACTION_STATUS_KEY: \"interaction.status\",\n    NATIVE_REQUEST: \"request.native\",\n} as const;\nexport type TemporaryCacheKeys =\n    (typeof TemporaryCacheKeys)[keyof typeof TemporaryCacheKeys];\n\nexport const StaticCacheKeys = {\n    ACCOUNT_KEYS: \"msal.account.keys\",\n    TOKEN_KEYS: \"msal.token.keys\",\n    VERSION: \"msal.version\",\n} as const;\nexport type StaticCacheKeys =\n    (typeof StaticCacheKeys)[keyof typeof StaticCacheKeys];\n\n/**\n * Cache keys stored in-memory\n */\nexport const InMemoryCacheKeys = {\n    WRAPPER_SKU: \"wrapper.sku\",\n    WRAPPER_VER: \"wrapper.version\",\n} as const;\nexport type InMemoryCacheKeys =\n    (typeof InMemoryCacheKeys)[keyof typeof InMemoryCacheKeys];\n\n/**\n * API Codes for Telemetry purposes.\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\n * 0-99 Silent Flow\n * 800-899 Auth Code Flow\n */\nexport const ApiId = {\n    acquireTokenRedirect: 861,\n    acquireTokenPopup: 862,\n    ssoSilent: 863,\n    acquireTokenSilent_authCode: 864,\n    handleRedirectPromise: 865,\n    acquireTokenByCode: 866,\n    acquireTokenSilent_silentFlow: 61,\n    logout: 961,\n    logoutPopup: 962,\n} as const;\nexport type ApiId = (typeof ApiId)[keyof typeof ApiId];\n\n/*\n * Interaction type of the API - used for state and telemetry\n */\nexport enum InteractionType {\n    Redirect = \"redirect\",\n    Popup = \"popup\",\n    Silent = \"silent\",\n    None = \"none\",\n}\n\n/**\n * Types of interaction currently in progress.\n * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.\n */\nexport const InteractionStatus = {\n    /**\n     * Initial status before interaction occurs\n     */\n    Startup: \"startup\",\n    /**\n     * Status set when all login calls occuring\n     */\n    Login: \"login\",\n    /**\n     * Status set when logout call occuring\n     */\n    Logout: \"logout\",\n    /**\n     * Status set for acquireToken calls\n     */\n    AcquireToken: \"acquireToken\",\n    /**\n     * Status set for ssoSilent calls\n     */\n    SsoSilent: \"ssoSilent\",\n    /**\n     * Status set when handleRedirect in progress\n     */\n    HandleRedirect: \"handleRedirect\",\n    /**\n     * Status set when interaction is complete\n     */\n    None: \"none\",\n} as const;\nexport type InteractionStatus =\n    (typeof InteractionStatus)[keyof typeof InteractionStatus];\n\nexport const DEFAULT_REQUEST: RedirectRequest | PopupRequest = {\n    scopes: OIDC_DEFAULT_SCOPES,\n};\n\n/**\n * JWK Key Format string (Type MUST be defined for window crypto APIs)\n */\nexport const KEY_FORMAT_JWK = \"jwk\";\n\n// Supported wrapper SKUs\nexport const WrapperSKU = {\n    React: \"@azure/msal-react\",\n    Angular: \"@azure/msal-angular\",\n} as const;\nexport type WrapperSKU = (typeof WrapperSKU)[keyof typeof WrapperSKU];\n\n// DatabaseStorage Constants\nexport const DB_NAME = \"msal.db\";\nexport const DB_VERSION = 1;\nexport const DB_TABLE_NAME = `${DB_NAME}.keys`;\n\nexport const CacheLookupPolicy = {\n    /*\n     * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired\n     * or cannot be found the refresh token will be used to acquire a new one. Finally, if the refresh token\n     * is expired acquireTokenSilent will attempt to acquire new access and refresh tokens.\n     */\n    Default: 0, // 0 is falsy, is equivalent to not passing in a CacheLookupPolicy\n    /*\n     * acquireTokenSilent will only look for access tokens in the cache. It will not attempt to renew access or\n     * refresh tokens.\n     */\n    AccessToken: 1,\n    /*\n     * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired or\n     * cannot be found, the refresh token will be used to acquire a new one. If the refresh token is expired, it\n     * will not be renewed and acquireTokenSilent will fail.\n     */\n    AccessTokenAndRefreshToken: 2,\n    /*\n     * acquireTokenSilent will not attempt to retrieve access tokens from the cache and will instead attempt to\n     * exchange the cached refresh token for a new access token. If the refresh token is expired, it will not be\n     * renewed and acquireTokenSilent will fail.\n     */\n    RefreshToken: 3,\n    /*\n     * acquireTokenSilent will not look in the cache for the access token. It will go directly to network with the\n     * cached refresh token. If the refresh token is expired an attempt will be made to renew it. This is equivalent to\n     * setting \"forceRefresh: true\".\n     */\n    RefreshTokenAndNetwork: 4,\n    /*\n     * acquireTokenSilent will attempt to renew both access and refresh tokens. It will not look in the cache. This will\n     * always fail if 3rd party cookies are blocked by the browser.\n     */\n    Skip: 5,\n} as const;\nexport type CacheLookupPolicy =\n    (typeof CacheLookupPolicy)[keyof typeof CacheLookupPolicy];\n\nexport const iFrameRenewalPolicies: CacheLookupPolicy[] = [\n    CacheLookupPolicy.Default,\n    CacheLookupPolicy.Skip,\n    CacheLookupPolicy.RefreshTokenAndNetwork,\n];\n\nexport const LOG_LEVEL_CACHE_KEY = \"msal.browser.log.level\";\nexport const LOG_PII_CACHE_KEY = \"msal.browser.log.pii\";\n\nexport const BROWSER_PERF_ENABLED_KEY = \"msal.browser.performance.enabled\";\n\nexport const PLATFORM_AUTH_DOM_SUPPORT = \"msal.browser.platform.auth.dom\";\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}