{"ast":null,"code":"/*! @azure/msal-browser v4.13.1 2025-06-10 */\n'use strict';\n\nimport { UrlString } from '@azure/msal-common/browser';\nexport { invoke, invokeAsync } from '@azure/msal-common/browser';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { BrowserConstants, BrowserCacheLocation } from './BrowserConstants.mjs';\nimport { createNewGuid } from '../crypto/BrowserCrypto.mjs';\nimport { createBrowserConfigurationAuthError } from '../error/BrowserConfigurationAuthError.mjs';\nimport { blockIframeReload, redirectInIframe, blockNestedPopups, nonBrowserEnvironment, uninitializedPublicClientApplication } from '../error/BrowserAuthErrorCodes.mjs';\nimport { inMemRedirectUnavailable } from '../error/BrowserConfigurationAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Clears hash from window url.\r\n */\nfunction clearHash(contentWindow) {\n  // Office.js sets history.replaceState to null\n  contentWindow.location.hash = \"\";\n  if (typeof contentWindow.history.replaceState === \"function\") {\n    // Full removes \"#\" from url\n    contentWindow.history.replaceState(null, \"\", `${contentWindow.location.origin}${contentWindow.location.pathname}${contentWindow.location.search}`);\n  }\n}\n/**\r\n * Replaces current hash with hash from provided url\r\n */\nfunction replaceHash(url) {\n  const urlParts = url.split(\"#\");\n  urlParts.shift(); // Remove part before the hash\n  window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : \"\";\n}\n/**\r\n * Returns boolean of whether the current window is in an iframe or not.\r\n */\nfunction isInIframe() {\n  return window.parent !== window;\n}\n/**\r\n * Returns boolean of whether or not the current window is a popup opened by msal\r\n */\nfunction isInPopup() {\n  return typeof window !== \"undefined\" && !!window.opener && window.opener !== window && typeof window.name === \"string\" && window.name.indexOf(`${BrowserConstants.POPUP_NAME_PREFIX}.`) === 0;\n}\n// #endregion\n/**\r\n * Returns current window URL as redirect uri\r\n */\nfunction getCurrentUri() {\n  return typeof window !== \"undefined\" && window.location ? window.location.href.split(\"?\")[0].split(\"#\")[0] : \"\";\n}\n/**\r\n * Gets the homepage url for the current window location.\r\n */\nfunction getHomepage() {\n  const currentUrl = new UrlString(window.location.href);\n  const urlComponents = currentUrl.getUrlComponents();\n  return `${urlComponents.Protocol}//${urlComponents.HostNameAndPort}/`;\n}\n/**\r\n * Throws error if we have completed an auth and are\r\n * attempting another auth request inside an iframe.\r\n */\nfunction blockReloadInHiddenIframes() {\n  const isResponseHash = UrlString.hashContainsKnownProperties(window.location.hash);\n  // return an error if called from the hidden iframe created by the msal js silent calls\n  if (isResponseHash && isInIframe()) {\n    throw createBrowserAuthError(blockIframeReload);\n  }\n}\n/**\r\n * Block redirect operations in iframes unless explicitly allowed\r\n * @param interactionType Interaction type for the request\r\n * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\r\n */\nfunction blockRedirectInIframe(allowRedirectInIframe) {\n  if (isInIframe() && !allowRedirectInIframe) {\n    // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\n    throw createBrowserAuthError(redirectInIframe);\n  }\n}\n/**\r\n * Block redirectUri loaded in popup from calling AcquireToken APIs\r\n */\nfunction blockAcquireTokenInPopups() {\n  // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\n  if (isInPopup()) {\n    throw createBrowserAuthError(blockNestedPopups);\n  }\n}\n/**\r\n * Throws error if token requests are made in non-browser environment\r\n * @param isBrowserEnvironment Flag indicating if environment is a browser.\r\n */\nfunction blockNonBrowserEnvironment() {\n  if (typeof window === \"undefined\") {\n    throw createBrowserAuthError(nonBrowserEnvironment);\n  }\n}\n/**\r\n * Throws error if initialize hasn't been called\r\n * @param initialized\r\n */\nfunction blockAPICallsBeforeInitialize(initialized) {\n  if (!initialized) {\n    throw createBrowserAuthError(uninitializedPublicClientApplication);\n  }\n}\n/**\r\n * Helper to validate app environment before making an auth request\r\n * @param initialized\r\n */\nfunction preflightCheck(initialized) {\n  // Block request if not in browser environment\n  blockNonBrowserEnvironment();\n  // Block auth requests inside a hidden iframe\n  blockReloadInHiddenIframes();\n  // Block redirectUri opened in a popup from calling MSAL APIs\n  blockAcquireTokenInPopups();\n  // Block token acquisition before initialize has been called\n  blockAPICallsBeforeInitialize(initialized);\n}\n/**\r\n * Helper to validate app enviornment before making redirect request\r\n * @param initialized\r\n * @param config\r\n */\nfunction redirectPreflightCheck(initialized, config) {\n  preflightCheck(initialized);\n  blockRedirectInIframe(config.system.allowRedirectInIframe);\n  // Block redirects if memory storage is enabled but storeAuthStateInCookie is not\n  if (config.cache.cacheLocation === BrowserCacheLocation.MemoryStorage && !config.cache.storeAuthStateInCookie) {\n    throw createBrowserConfigurationAuthError(inMemRedirectUnavailable);\n  }\n}\n/**\r\n * Adds a preconnect link element to the header which begins DNS resolution and SSL connection in anticipation of the /token request\r\n * @param loginDomain Authority domain, including https protocol e.g. https://login.microsoftonline.com\r\n * @returns\r\n */\nfunction preconnect(authority) {\n  const link = document.createElement(\"link\");\n  link.rel = \"preconnect\";\n  link.href = new URL(authority).origin;\n  link.crossOrigin = \"anonymous\";\n  document.head.appendChild(link);\n  // The browser will close connection if not used within a few seconds, remove element from the header after 10s\n  window.setTimeout(() => {\n    try {\n      document.head.removeChild(link);\n    } catch {}\n  }, 10000); // 10s Timeout\n}\n/**\r\n * Wrapper function that creates a UUID v7 from the current timestamp.\r\n * @returns {string}\r\n */\nfunction createGuid() {\n  return createNewGuid();\n}\nexport { blockAPICallsBeforeInitialize, blockAcquireTokenInPopups, blockNonBrowserEnvironment, blockRedirectInIframe, blockReloadInHiddenIframes, clearHash, createGuid, getCurrentUri, getHomepage, isInIframe, isInPopup, preconnect, preflightCheck, redirectPreflightCheck, replaceHash };","map":{"version":3,"names":["clearHash","contentWindow","location","hash","history","replaceState","origin","pathname","search","replaceHash","url","urlParts","split","shift","window","length","join","isInIframe","parent","isInPopup","opener","name","indexOf","BrowserConstants","POPUP_NAME_PREFIX","getCurrentUri","href","getHomepage","currentUrl","UrlString","urlComponents","getUrlComponents","Protocol","HostNameAndPort","blockReloadInHiddenIframes","isResponseHash","hashContainsKnownProperties","createBrowserAuthError","blockIframeReload","blockRedirectInIframe","allowRedirectInIframe","redirectInIframe","blockAcquireTokenInPopups","blockNestedPopups","blockNonBrowserEnvironment","nonBrowserEnvironment","blockAPICallsBeforeInitialize","initialized","uninitializedPublicClientApplication","preflightCheck","redirectPreflightCheck","config","system","cache","cacheLocation","BrowserCacheLocation","MemoryStorage","storeAuthStateInCookie","createBrowserConfigurationAuthError","inMemRedirectUnavailable","preconnect","authority","link","document","createElement","rel","URL","crossOrigin","head","appendChild","setTimeout","removeChild","createGuid","createNewGuid"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-browser/src/utils/BrowserUtils.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { UrlString, invoke, invokeAsync } from \"@azure/msal-common/browser\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError.js\";\nimport { BrowserConstants, BrowserCacheLocation } from \"./BrowserConstants.js\";\nimport * as BrowserCrypto from \"../crypto/BrowserCrypto.js\";\nimport {\n    BrowserConfigurationAuthErrorCodes,\n    createBrowserConfigurationAuthError,\n} from \"../error/BrowserConfigurationAuthError.js\";\nimport type { BrowserConfiguration } from \"../config/Configuration.js\";\n\n/**\n * Clears hash from window url.\n */\nexport function clearHash(contentWindow: Window): void {\n    // Office.js sets history.replaceState to null\n    contentWindow.location.hash = \"\";\n    if (typeof contentWindow.history.replaceState === \"function\") {\n        // Full removes \"#\" from url\n        contentWindow.history.replaceState(\n            null,\n            \"\",\n            `${contentWindow.location.origin}${contentWindow.location.pathname}${contentWindow.location.search}`\n        );\n    }\n}\n\n/**\n * Replaces current hash with hash from provided url\n */\nexport function replaceHash(url: string): void {\n    const urlParts = url.split(\"#\");\n    urlParts.shift(); // Remove part before the hash\n    window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : \"\";\n}\n\n/**\n * Returns boolean of whether the current window is in an iframe or not.\n */\nexport function isInIframe(): boolean {\n    return window.parent !== window;\n}\n\n/**\n * Returns boolean of whether or not the current window is a popup opened by msal\n */\nexport function isInPopup(): boolean {\n    return (\n        typeof window !== \"undefined\" &&\n        !!window.opener &&\n        window.opener !== window &&\n        typeof window.name === \"string\" &&\n        window.name.indexOf(`${BrowserConstants.POPUP_NAME_PREFIX}.`) === 0\n    );\n}\n\n// #endregion\n\n/**\n * Returns current window URL as redirect uri\n */\nexport function getCurrentUri(): string {\n    return typeof window !== \"undefined\" && window.location\n        ? window.location.href.split(\"?\")[0].split(\"#\")[0]\n        : \"\";\n}\n\n/**\n * Gets the homepage url for the current window location.\n */\nexport function getHomepage(): string {\n    const currentUrl = new UrlString(window.location.href);\n    const urlComponents = currentUrl.getUrlComponents();\n    return `${urlComponents.Protocol}//${urlComponents.HostNameAndPort}/`;\n}\n\n/**\n * Throws error if we have completed an auth and are\n * attempting another auth request inside an iframe.\n */\nexport function blockReloadInHiddenIframes(): void {\n    const isResponseHash = UrlString.hashContainsKnownProperties(\n        window.location.hash\n    );\n    // return an error if called from the hidden iframe created by the msal js silent calls\n    if (isResponseHash && isInIframe()) {\n        throw createBrowserAuthError(BrowserAuthErrorCodes.blockIframeReload);\n    }\n}\n\n/**\n * Block redirect operations in iframes unless explicitly allowed\n * @param interactionType Interaction type for the request\n * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\n */\nexport function blockRedirectInIframe(allowRedirectInIframe: boolean): void {\n    if (isInIframe() && !allowRedirectInIframe) {\n        // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\n        throw createBrowserAuthError(BrowserAuthErrorCodes.redirectInIframe);\n    }\n}\n\n/**\n * Block redirectUri loaded in popup from calling AcquireToken APIs\n */\nexport function blockAcquireTokenInPopups(): void {\n    // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\n    if (isInPopup()) {\n        throw createBrowserAuthError(BrowserAuthErrorCodes.blockNestedPopups);\n    }\n}\n\n/**\n * Throws error if token requests are made in non-browser environment\n * @param isBrowserEnvironment Flag indicating if environment is a browser.\n */\nexport function blockNonBrowserEnvironment(): void {\n    if (typeof window === \"undefined\") {\n        throw createBrowserAuthError(\n            BrowserAuthErrorCodes.nonBrowserEnvironment\n        );\n    }\n}\n\n/**\n * Throws error if initialize hasn't been called\n * @param initialized\n */\nexport function blockAPICallsBeforeInitialize(initialized: boolean): void {\n    if (!initialized) {\n        throw createBrowserAuthError(\n            BrowserAuthErrorCodes.uninitializedPublicClientApplication\n        );\n    }\n}\n\n/**\n * Helper to validate app environment before making an auth request\n * @param initialized\n */\nexport function preflightCheck(initialized: boolean): void {\n    // Block request if not in browser environment\n    blockNonBrowserEnvironment();\n\n    // Block auth requests inside a hidden iframe\n    blockReloadInHiddenIframes();\n\n    // Block redirectUri opened in a popup from calling MSAL APIs\n    blockAcquireTokenInPopups();\n\n    // Block token acquisition before initialize has been called\n    blockAPICallsBeforeInitialize(initialized);\n}\n\n/**\n * Helper to validate app enviornment before making redirect request\n * @param initialized\n * @param config\n */\nexport function redirectPreflightCheck(\n    initialized: boolean,\n    config: BrowserConfiguration\n): void {\n    preflightCheck(initialized);\n    blockRedirectInIframe(config.system.allowRedirectInIframe);\n    // Block redirects if memory storage is enabled but storeAuthStateInCookie is not\n    if (\n        config.cache.cacheLocation === BrowserCacheLocation.MemoryStorage &&\n        !config.cache.storeAuthStateInCookie\n    ) {\n        throw createBrowserConfigurationAuthError(\n            BrowserConfigurationAuthErrorCodes.inMemRedirectUnavailable\n        );\n    }\n}\n\n/**\n * Adds a preconnect link element to the header which begins DNS resolution and SSL connection in anticipation of the /token request\n * @param loginDomain Authority domain, including https protocol e.g. https://login.microsoftonline.com\n * @returns\n */\nexport function preconnect(authority: string): void {\n    const link = document.createElement(\"link\");\n    link.rel = \"preconnect\";\n    link.href = new URL(authority).origin;\n    link.crossOrigin = \"anonymous\";\n    document.head.appendChild(link);\n\n    // The browser will close connection if not used within a few seconds, remove element from the header after 10s\n    window.setTimeout(() => {\n        try {\n            document.head.removeChild(link);\n        } catch {}\n    }, 10000); // 10s Timeout\n}\n\n/**\n * Wrapper function that creates a UUID v7 from the current timestamp.\n * @returns {string}\n */\nexport function createGuid(): string {\n    return BrowserCrypto.createNewGuid();\n}\n\nexport { invoke };\nexport { invokeAsync };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}