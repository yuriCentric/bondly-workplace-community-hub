{"ast":null,"code":"/*! @azure/msal-browser v4.13.1 2025-06-10 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\r\n * @param accountFilter - (Optional) filter to narrow down the accounts returned\r\n * @returns Array of AccountInfo objects in cache\r\n */\nfunction getAllAccounts(logger, browserStorage, isInBrowser, accountFilter) {\n  logger.verbose(\"getAllAccounts called\");\n  return isInBrowser ? browserStorage.getAllAccounts(accountFilter) : [];\n}\n/**\r\n * Returns the first account found in the cache that matches the account filter passed in.\r\n * @param accountFilter\r\n * @returns The first account found in the cache matching the provided filter or null if no account could be found.\r\n */\nfunction getAccount(accountFilter, logger, browserStorage) {\n  logger.trace(\"getAccount called\");\n  if (Object.keys(accountFilter).length === 0) {\n    logger.warning(\"getAccount: No accountFilter provided\");\n    return null;\n  }\n  const account = browserStorage.getAccountInfoFilteredBy(accountFilter);\n  if (account) {\n    logger.verbose(\"getAccount: Account matching provided filter found, returning\");\n    return account;\n  } else {\n    logger.verbose(\"getAccount: No matching account found, returning null\");\n    return null;\n  }\n}\n/**\r\n * Returns the signed in account matching username.\r\n * (the account object is created at the time of successful login)\r\n * or null when no matching account is found.\r\n * This API is provided for convenience but getAccountById should be used for best reliability\r\n * @param username\r\n * @returns The account object stored in MSAL\r\n */\nfunction getAccountByUsername(username, logger, browserStorage) {\n  logger.trace(\"getAccountByUsername called\");\n  if (!username) {\n    logger.warning(\"getAccountByUsername: No username provided\");\n    return null;\n  }\n  const account = browserStorage.getAccountInfoFilteredBy({\n    username\n  });\n  if (account) {\n    logger.verbose(\"getAccountByUsername: Account matching username found, returning\");\n    logger.verbosePii(`getAccountByUsername: Returning signed-in accounts matching username: ${username}`);\n    return account;\n  } else {\n    logger.verbose(\"getAccountByUsername: No matching account found, returning null\");\n    return null;\n  }\n}\n/**\r\n * Returns the signed in account matching homeAccountId.\r\n * (the account object is created at the time of successful login)\r\n * or null when no matching account is found\r\n * @param homeAccountId\r\n * @returns The account object stored in MSAL\r\n */\nfunction getAccountByHomeId(homeAccountId, logger, browserStorage) {\n  logger.trace(\"getAccountByHomeId called\");\n  if (!homeAccountId) {\n    logger.warning(\"getAccountByHomeId: No homeAccountId provided\");\n    return null;\n  }\n  const account = browserStorage.getAccountInfoFilteredBy({\n    homeAccountId\n  });\n  if (account) {\n    logger.verbose(\"getAccountByHomeId: Account matching homeAccountId found, returning\");\n    logger.verbosePii(`getAccountByHomeId: Returning signed-in accounts matching homeAccountId: ${homeAccountId}`);\n    return account;\n  } else {\n    logger.verbose(\"getAccountByHomeId: No matching account found, returning null\");\n    return null;\n  }\n}\n/**\r\n * Returns the signed in account matching localAccountId.\r\n * (the account object is created at the time of successful login)\r\n * or null when no matching account is found\r\n * @param localAccountId\r\n * @returns The account object stored in MSAL\r\n */\nfunction getAccountByLocalId(localAccountId, logger, browserStorage) {\n  logger.trace(\"getAccountByLocalId called\");\n  if (!localAccountId) {\n    logger.warning(\"getAccountByLocalId: No localAccountId provided\");\n    return null;\n  }\n  const account = browserStorage.getAccountInfoFilteredBy({\n    localAccountId\n  });\n  if (account) {\n    logger.verbose(\"getAccountByLocalId: Account matching localAccountId found, returning\");\n    logger.verbosePii(`getAccountByLocalId: Returning signed-in accounts matching localAccountId: ${localAccountId}`);\n    return account;\n  } else {\n    logger.verbose(\"getAccountByLocalId: No matching account found, returning null\");\n    return null;\n  }\n}\n/**\r\n * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.\r\n * @param account\r\n */\nfunction setActiveAccount(account, browserStorage) {\n  browserStorage.setActiveAccount(account);\n}\n/**\r\n * Gets the currently active account\r\n */\nfunction getActiveAccount(browserStorage) {\n  return browserStorage.getActiveAccount();\n}\nexport { getAccount, getAccountByHomeId, getAccountByLocalId, getAccountByUsername, getActiveAccount, getAllAccounts, setActiveAccount };","map":{"version":3,"names":["getAllAccounts","logger","browserStorage","isInBrowser","accountFilter","verbose","getAccount","trace","Object","keys","length","warning","account","getAccountInfoFilteredBy","getAccountByUsername","username","verbosePii","getAccountByHomeId","homeAccountId","getAccountByLocalId","localAccountId","setActiveAccount","getActiveAccount"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-browser/src/cache/AccountManager.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccountInfo, AccountFilter, Logger } from \"@azure/msal-common/browser\";\nimport { BrowserCacheManager } from \"./BrowserCacheManager.js\";\n\n/**\n * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\n * @param accountFilter - (Optional) filter to narrow down the accounts returned\n * @returns Array of AccountInfo objects in cache\n */\nexport function getAllAccounts(\n    logger: Logger,\n    browserStorage: BrowserCacheManager,\n    isInBrowser: boolean,\n    accountFilter?: AccountFilter\n): AccountInfo[] {\n    logger.verbose(\"getAllAccounts called\");\n    return isInBrowser ? browserStorage.getAllAccounts(accountFilter) : [];\n}\n\n/**\n * Returns the first account found in the cache that matches the account filter passed in.\n * @param accountFilter\n * @returns The first account found in the cache matching the provided filter or null if no account could be found.\n */\nexport function getAccount(\n    accountFilter: AccountFilter,\n    logger: Logger,\n    browserStorage: BrowserCacheManager\n): AccountInfo | null {\n    logger.trace(\"getAccount called\");\n    if (Object.keys(accountFilter).length === 0) {\n        logger.warning(\"getAccount: No accountFilter provided\");\n        return null;\n    }\n\n    const account: AccountInfo | null =\n        browserStorage.getAccountInfoFilteredBy(accountFilter);\n\n    if (account) {\n        logger.verbose(\n            \"getAccount: Account matching provided filter found, returning\"\n        );\n        return account;\n    } else {\n        logger.verbose(\"getAccount: No matching account found, returning null\");\n        return null;\n    }\n}\n\n/**\n * Returns the signed in account matching username.\n * (the account object is created at the time of successful login)\n * or null when no matching account is found.\n * This API is provided for convenience but getAccountById should be used for best reliability\n * @param username\n * @returns The account object stored in MSAL\n */\nexport function getAccountByUsername(\n    username: string,\n    logger: Logger,\n    browserStorage: BrowserCacheManager\n): AccountInfo | null {\n    logger.trace(\"getAccountByUsername called\");\n    if (!username) {\n        logger.warning(\"getAccountByUsername: No username provided\");\n        return null;\n    }\n\n    const account = browserStorage.getAccountInfoFilteredBy({\n        username,\n    });\n    if (account) {\n        logger.verbose(\n            \"getAccountByUsername: Account matching username found, returning\"\n        );\n        logger.verbosePii(\n            `getAccountByUsername: Returning signed-in accounts matching username: ${username}`\n        );\n        return account;\n    } else {\n        logger.verbose(\n            \"getAccountByUsername: No matching account found, returning null\"\n        );\n        return null;\n    }\n}\n\n/**\n * Returns the signed in account matching homeAccountId.\n * (the account object is created at the time of successful login)\n * or null when no matching account is found\n * @param homeAccountId\n * @returns The account object stored in MSAL\n */\nexport function getAccountByHomeId(\n    homeAccountId: string,\n    logger: Logger,\n    browserStorage: BrowserCacheManager\n): AccountInfo | null {\n    logger.trace(\"getAccountByHomeId called\");\n    if (!homeAccountId) {\n        logger.warning(\"getAccountByHomeId: No homeAccountId provided\");\n        return null;\n    }\n\n    const account = browserStorage.getAccountInfoFilteredBy({\n        homeAccountId,\n    });\n    if (account) {\n        logger.verbose(\n            \"getAccountByHomeId: Account matching homeAccountId found, returning\"\n        );\n        logger.verbosePii(\n            `getAccountByHomeId: Returning signed-in accounts matching homeAccountId: ${homeAccountId}`\n        );\n        return account;\n    } else {\n        logger.verbose(\n            \"getAccountByHomeId: No matching account found, returning null\"\n        );\n        return null;\n    }\n}\n\n/**\n * Returns the signed in account matching localAccountId.\n * (the account object is created at the time of successful login)\n * or null when no matching account is found\n * @param localAccountId\n * @returns The account object stored in MSAL\n */\nexport function getAccountByLocalId(\n    localAccountId: string,\n    logger: Logger,\n    browserStorage: BrowserCacheManager\n): AccountInfo | null {\n    logger.trace(\"getAccountByLocalId called\");\n    if (!localAccountId) {\n        logger.warning(\"getAccountByLocalId: No localAccountId provided\");\n        return null;\n    }\n\n    const account = browserStorage.getAccountInfoFilteredBy({\n        localAccountId,\n    });\n    if (account) {\n        logger.verbose(\n            \"getAccountByLocalId: Account matching localAccountId found, returning\"\n        );\n        logger.verbosePii(\n            `getAccountByLocalId: Returning signed-in accounts matching localAccountId: ${localAccountId}`\n        );\n        return account;\n    } else {\n        logger.verbose(\n            \"getAccountByLocalId: No matching account found, returning null\"\n        );\n        return null;\n    }\n}\n\n/**\n * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.\n * @param account\n */\nexport function setActiveAccount(\n    account: AccountInfo | null,\n    browserStorage: BrowserCacheManager\n): void {\n    browserStorage.setActiveAccount(account);\n}\n\n/**\n * Gets the currently active account\n */\nexport function getActiveAccount(\n    browserStorage: BrowserCacheManager\n): AccountInfo | null {\n    return browserStorage.getActiveAccount();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}