{"ast":null,"code":"/*! @azure/msal-common v15.7.0 2025-05-30 */\n'use strict';\n\nimport { Constants } from '../utils/Constants.mjs';\nimport { AuthError } from './AuthError.mjs';\nimport { noTokensFound, nativeAccountUnavailable, badToken, refreshTokenExpired, interactionRequired, consentRequired, loginRequired } from './InteractionRequiredAuthErrorCodes.mjs';\nimport * as InteractionRequiredAuthErrorCodes from './InteractionRequiredAuthErrorCodes.mjs';\nexport { InteractionRequiredAuthErrorCodes };\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required\r\n */\nconst InteractionRequiredServerErrorMessage = [interactionRequired, consentRequired, loginRequired, badToken];\nconst InteractionRequiredAuthSubErrorMessage = [\"message_only\", \"additional_action\", \"basic_action\", \"user_password_expired\", \"consent_required\", \"bad_token\"];\nconst InteractionRequiredAuthErrorMessages = {\n  [noTokensFound]: \"No refresh token found in the cache. Please sign-in.\",\n  [nativeAccountUnavailable]: \"The requested account is not available in the native broker. It may have been deleted or logged out. Please sign-in again using an interactive API.\",\n  [refreshTokenExpired]: \"Refresh token has expired.\",\n  [badToken]: \"Identity provider returned bad_token due to an expired or invalid refresh token. Please invoke an interactive API to resolve.\"\n};\n/**\r\n * Interaction required errors defined by the SDK\r\n * @deprecated Use InteractionRequiredAuthErrorCodes instead\r\n */\nconst InteractionRequiredAuthErrorMessage = {\n  noTokensFoundError: {\n    code: noTokensFound,\n    desc: InteractionRequiredAuthErrorMessages[noTokensFound]\n  },\n  native_account_unavailable: {\n    code: nativeAccountUnavailable,\n    desc: InteractionRequiredAuthErrorMessages[nativeAccountUnavailable]\n  },\n  bad_token: {\n    code: badToken,\n    desc: InteractionRequiredAuthErrorMessages[badToken]\n  }\n};\n/**\r\n * Error thrown when user interaction is required.\r\n */\nclass InteractionRequiredAuthError extends AuthError {\n  constructor(errorCode, errorMessage, subError, timestamp, traceId, correlationId, claims, errorNo) {\n    super(errorCode, errorMessage, subError);\n    Object.setPrototypeOf(this, InteractionRequiredAuthError.prototype);\n    this.timestamp = timestamp || Constants.EMPTY_STRING;\n    this.traceId = traceId || Constants.EMPTY_STRING;\n    this.correlationId = correlationId || Constants.EMPTY_STRING;\n    this.claims = claims || Constants.EMPTY_STRING;\n    this.name = \"InteractionRequiredAuthError\";\n    this.errorNo = errorNo;\n  }\n}\n/**\r\n * Helper function used to determine if an error thrown by the server requires interaction to resolve\r\n * @param errorCode\r\n * @param errorString\r\n * @param subError\r\n */\nfunction isInteractionRequiredError(errorCode, errorString, subError) {\n  const isInteractionRequiredErrorCode = !!errorCode && InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;\n  const isInteractionRequiredSubError = !!subError && InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;\n  const isInteractionRequiredErrorDesc = !!errorString && InteractionRequiredServerErrorMessage.some(irErrorCode => {\n    return errorString.indexOf(irErrorCode) > -1;\n  });\n  return isInteractionRequiredErrorCode || isInteractionRequiredErrorDesc || isInteractionRequiredSubError;\n}\n/**\r\n * Creates an InteractionRequiredAuthError\r\n */\nfunction createInteractionRequiredAuthError(errorCode) {\n  return new InteractionRequiredAuthError(errorCode, InteractionRequiredAuthErrorMessages[errorCode]);\n}\nexport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage, InteractionRequiredAuthSubErrorMessage, InteractionRequiredServerErrorMessage, createInteractionRequiredAuthError, isInteractionRequiredError };","map":{"version":3,"names":["InteractionRequiredServerErrorMessage","interactionRequired","consentRequired","loginRequired","badToken","InteractionRequiredAuthSubErrorMessage","InteractionRequiredAuthErrorMessages","noTokensFound","nativeAccountUnavailable","refreshTokenExpired","InteractionRequiredAuthErrorMessage","noTokensFoundError","code","desc","native_account_unavailable","bad_token","InteractionRequiredAuthError","AuthError","constructor","errorCode","errorMessage","subError","timestamp","traceId","correlationId","claims","errorNo","Object","setPrototypeOf","prototype","Constants","EMPTY_STRING","name","isInteractionRequiredError","errorString","isInteractionRequiredErrorCode","indexOf","isInteractionRequiredSubError","isInteractionRequiredErrorDesc","some","irErrorCode","createInteractionRequiredAuthError"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-common/src/error/InteractionRequiredAuthError.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Constants } from \"../utils/Constants.js\";\nimport { AuthError } from \"./AuthError.js\";\nimport * as InteractionRequiredAuthErrorCodes from \"./InteractionRequiredAuthErrorCodes.js\";\nexport { InteractionRequiredAuthErrorCodes };\n\n/**\n * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required\n */\nexport const InteractionRequiredServerErrorMessage = [\n    InteractionRequiredAuthErrorCodes.interactionRequired,\n    InteractionRequiredAuthErrorCodes.consentRequired,\n    InteractionRequiredAuthErrorCodes.loginRequired,\n    InteractionRequiredAuthErrorCodes.badToken,\n];\n\nexport const InteractionRequiredAuthSubErrorMessage = [\n    \"message_only\",\n    \"additional_action\",\n    \"basic_action\",\n    \"user_password_expired\",\n    \"consent_required\",\n    \"bad_token\",\n];\n\nconst InteractionRequiredAuthErrorMessages = {\n    [InteractionRequiredAuthErrorCodes.noTokensFound]:\n        \"No refresh token found in the cache. Please sign-in.\",\n    [InteractionRequiredAuthErrorCodes.nativeAccountUnavailable]:\n        \"The requested account is not available in the native broker. It may have been deleted or logged out. Please sign-in again using an interactive API.\",\n    [InteractionRequiredAuthErrorCodes.refreshTokenExpired]:\n        \"Refresh token has expired.\",\n    [InteractionRequiredAuthErrorCodes.badToken]:\n        \"Identity provider returned bad_token due to an expired or invalid refresh token. Please invoke an interactive API to resolve.\",\n};\n\n/**\n * Interaction required errors defined by the SDK\n * @deprecated Use InteractionRequiredAuthErrorCodes instead\n */\nexport const InteractionRequiredAuthErrorMessage = {\n    noTokensFoundError: {\n        code: InteractionRequiredAuthErrorCodes.noTokensFound,\n        desc: InteractionRequiredAuthErrorMessages[\n            InteractionRequiredAuthErrorCodes.noTokensFound\n        ],\n    },\n    native_account_unavailable: {\n        code: InteractionRequiredAuthErrorCodes.nativeAccountUnavailable,\n        desc: InteractionRequiredAuthErrorMessages[\n            InteractionRequiredAuthErrorCodes.nativeAccountUnavailable\n        ],\n    },\n    bad_token: {\n        code: InteractionRequiredAuthErrorCodes.badToken,\n        desc: InteractionRequiredAuthErrorMessages[\n            InteractionRequiredAuthErrorCodes.badToken\n        ],\n    },\n};\n\n/**\n * Error thrown when user interaction is required.\n */\nexport class InteractionRequiredAuthError extends AuthError {\n    /**\n     * The time the error occured at\n     */\n    timestamp: string;\n\n    /**\n     * TraceId associated with the error\n     */\n    traceId: string;\n\n    /**\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/docs/claims-challenge.md\n     *\n     * A string with extra claims needed for the token request to succeed\n     * web site: redirect the user to the authorization page and set the extra claims\n     * web api: include the claims in the WWW-Authenticate header that are sent back to the client so that it knows to request a token with the extra claims\n     * desktop application or browser context: include the claims when acquiring the token interactively\n     * app to app context (client_credentials): include the claims in the AcquireTokenByClientCredential request\n     */\n    claims: string;\n\n    /**\n     * Server error number;\n     */\n    readonly errorNo?: string;\n\n    constructor(\n        errorCode?: string,\n        errorMessage?: string,\n        subError?: string,\n        timestamp?: string,\n        traceId?: string,\n        correlationId?: string,\n        claims?: string,\n        errorNo?: string\n    ) {\n        super(errorCode, errorMessage, subError);\n        Object.setPrototypeOf(this, InteractionRequiredAuthError.prototype);\n\n        this.timestamp = timestamp || Constants.EMPTY_STRING;\n        this.traceId = traceId || Constants.EMPTY_STRING;\n        this.correlationId = correlationId || Constants.EMPTY_STRING;\n        this.claims = claims || Constants.EMPTY_STRING;\n        this.name = \"InteractionRequiredAuthError\";\n        this.errorNo = errorNo;\n    }\n}\n\n/**\n * Helper function used to determine if an error thrown by the server requires interaction to resolve\n * @param errorCode\n * @param errorString\n * @param subError\n */\nexport function isInteractionRequiredError(\n    errorCode?: string,\n    errorString?: string,\n    subError?: string\n): boolean {\n    const isInteractionRequiredErrorCode =\n        !!errorCode &&\n        InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;\n    const isInteractionRequiredSubError =\n        !!subError &&\n        InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;\n    const isInteractionRequiredErrorDesc =\n        !!errorString &&\n        InteractionRequiredServerErrorMessage.some((irErrorCode) => {\n            return errorString.indexOf(irErrorCode) > -1;\n        });\n\n    return (\n        isInteractionRequiredErrorCode ||\n        isInteractionRequiredErrorDesc ||\n        isInteractionRequiredSubError\n    );\n}\n\n/**\n * Creates an InteractionRequiredAuthError\n */\nexport function createInteractionRequiredAuthError(\n    errorCode: string\n): InteractionRequiredAuthError {\n    return new InteractionRequiredAuthError(\n        errorCode,\n        InteractionRequiredAuthErrorMessages[errorCode]\n    );\n}\n"],"mappings":";;;;;;;;;AAAA;;;AAGG;AAOH;;AAEG;AACU,MAAAA,qCAAqC,GAAG,CACjDC,mBAAqD,EACrDC,eAAiD,EACjDC,aAA+C,EAC/CC,QAA0C,C;AAGjC,MAAAC,sCAAsC,GAAG,CAClD,cAAc,EACd,mBAAmB,EACnB,cAAc,EACd,uBAAuB,EACvB,kBAAkB,EAClB,WAAW,C;AAGf,MAAMC,oCAAoC,GAAG;EACzC,CAACC,aAA+C,GAC5C,sDAAsD;EAC1D,CAACC,wBAA0D,GACvD,qJAAqJ;EACzJ,CAACC,mBAAqD,GAClD,4BAA4B;EAChC,CAACL,QAA0C,GACvC;CACP;AAED;;;AAGG;AACU,MAAAM,mCAAmC,GAAG;EAC/CC,kBAAkB,EAAE;IAChBC,IAAI,EAAEL,aAA+C;IACrDM,IAAI,EAAEP,oCAAoC,CACtCC,aAA+C;EAEtD;EACDO,0BAA0B,EAAE;IACxBF,IAAI,EAAEJ,wBAA0D;IAChEK,IAAI,EAAEP,oCAAoC,CACtCE,wBAA0D;EAEjE;EACDO,SAAS,EAAE;IACPH,IAAI,EAAER,QAA0C;IAChDS,IAAI,EAAEP,oCAAoC,CACtCF,QAA0C;EAEjD;;AAGL;;AAEG;AACG,MAAOY,4BAA6B,SAAQC,SAAS;EA2BvDC,YACIC,SAAkB,EAClBC,YAAqB,EACrBC,QAAiB,EACjBC,SAAkB,EAClBC,OAAgB,EAChBC,aAAsB,EACtBC,MAAe,EACfC,OAAgB;IAEhB,KAAK,CAACP,SAAS,EAAEC,YAAY,EAAEC,QAAQ,CAAC;IACxCM,MAAM,CAACC,cAAc,CAAC,IAAI,EAAEZ,4BAA4B,CAACa,SAAS,CAAC;IAEnE,IAAI,CAACP,SAAS,GAAGA,SAAS,IAAIQ,SAAS,CAACC,YAAY;IACpD,IAAI,CAACR,OAAO,GAAGA,OAAO,IAAIO,SAAS,CAACC,YAAY;IAChD,IAAI,CAACP,aAAa,GAAGA,aAAa,IAAIM,SAAS,CAACC,YAAY;IAC5D,IAAI,CAACN,MAAM,GAAGA,MAAM,IAAIK,SAAS,CAACC,YAAY;IAC9C,IAAI,CAACC,IAAI,GAAG,8BAA8B;IAC1C,IAAI,CAACN,OAAO,GAAGA,OAAO;;AAE7B;AAED;;;;;AAKG;SACaO,0BAA0BA,CACtCd,SAAkB,EAClBe,WAAoB,EACpBb,QAAiB;EAEjB,MAAMc,8BAA8B,GAChC,CAAC,CAAChB,SAAS,IACXnB,qCAAqC,CAACoC,OAAO,CAACjB,SAAS,CAAC,GAAG,EAAE;EACjE,MAAMkB,6BAA6B,GAC/B,CAAC,CAAChB,QAAQ,IACVhB,sCAAsC,CAAC+B,OAAO,CAACf,QAAQ,CAAC,GAAG,EAAE;EACjE,MAAMiB,8BAA8B,GAChC,CAAC,CAACJ,WAAW,IACblC,qCAAqC,CAACuC,IAAI,CAAEC,WAAW,IAAI;IACvD,OAAON,WAAW,CAACE,OAAO,CAACI,WAAW,CAAC,GAAG,EAAE;EAChD,CAAC,CAAC;EAEN,OACIL,8BAA8B,IAC9BG,8BAA8B,IAC9BD,6BAA6B;AAErC;AAEA;;AAEG;AACG,SAAUI,kCAAkCA,CAC9CtB,SAAiB;EAEjB,OAAO,IAAIH,4BAA4B,CACnCG,SAAS,EACTb,oCAAoC,CAACa,SAAS,CAAC,CAClD;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}