{"ast":null,"code":"/*! @azure/msal-browser v4.13.1 2025-06-10 */\n'use strict';\n\nimport { Logger, StubPerformanceClient, AuthenticationScheme } from '@azure/msal-common/browser';\nimport { name, version } from '../../packageMetadata.mjs';\nimport { DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS } from '../../config/Configuration.mjs';\nimport { PlatformAuthExtensionHandler } from './PlatformAuthExtensionHandler.mjs';\nimport { PlatformAuthDOMHandler } from './PlatformAuthDOMHandler.mjs';\nimport { createNewGuid } from '../../crypto/BrowserCrypto.mjs';\nimport { BrowserCacheLocation, PLATFORM_AUTH_DOM_SUPPORT } from '../../utils/BrowserConstants.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Checks if the platform broker is available in the current environment.\r\n * @param loggerOptions\r\n * @param perfClient\r\n * @returns\r\n */\nasync function isPlatformBrokerAvailable(loggerOptions, perfClient, correlationId) {\n  const logger = new Logger(loggerOptions || {}, name, version);\n  logger.trace(\"isPlatformBrokerAvailable called\");\n  const performanceClient = perfClient || new StubPerformanceClient();\n  if (typeof window === \"undefined\") {\n    logger.trace(\"Non-browser environment detected, returning false\");\n    return false;\n  }\n  return !!(await getPlatformAuthProvider(logger, performanceClient, correlationId || createNewGuid()));\n}\nasync function getPlatformAuthProvider(logger, performanceClient, correlationId, nativeBrokerHandshakeTimeout) {\n  logger.trace(\"getPlatformAuthProvider called\", correlationId);\n  const enablePlatformBrokerDOMSupport = isDomEnabledForPlatformAuth();\n  logger.trace(\"Has client allowed platform auth via DOM API: \" + enablePlatformBrokerDOMSupport);\n  let platformAuthProvider;\n  try {\n    if (enablePlatformBrokerDOMSupport) {\n      // Check if DOM platform API is supported first\n      platformAuthProvider = await PlatformAuthDOMHandler.createProvider(logger, performanceClient, correlationId);\n    }\n    if (!platformAuthProvider) {\n      logger.trace(\"Platform auth via DOM API not available, checking for extension\");\n      /*\r\n       * If DOM APIs are not available, check if browser extension is available.\r\n       * Platform authentication via DOM APIs is preferred over extension APIs.\r\n       */\n      platformAuthProvider = await PlatformAuthExtensionHandler.createProvider(logger, nativeBrokerHandshakeTimeout || DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS, performanceClient);\n    }\n  } catch (e) {\n    logger.trace(\"Platform auth not available\", e);\n  }\n  return platformAuthProvider;\n}\n/**\r\n * Returns true if the DOM API support for platform auth is enabled in session storage\r\n * @returns boolean\r\n * @deprecated\r\n */\nfunction isDomEnabledForPlatformAuth() {\n  let sessionStorage;\n  try {\n    sessionStorage = window[BrowserCacheLocation.SessionStorage];\n    // Mute errors if it's a non-browser environment or cookies are blocked.\n    return sessionStorage?.getItem(PLATFORM_AUTH_DOM_SUPPORT) === \"true\";\n  } catch (e) {\n    return false;\n  }\n}\n/**\r\n * Returns boolean indicating whether or not the request should attempt to use native broker\r\n * @param logger\r\n * @param config\r\n * @param platformAuthProvider\r\n * @param authenticationScheme\r\n */\nfunction isPlatformAuthAllowed(config, logger, platformAuthProvider, authenticationScheme) {\n  logger.trace(\"isBrokerAvailable called\");\n  if (!config.system.allowPlatformBroker) {\n    logger.trace(\"isBrokerAvailable: allowPlatformBroker is not enabled, returning false\");\n    // Developer disabled WAM\n    return false;\n  }\n  if (!platformAuthProvider) {\n    logger.trace(\"isBrokerAvailable: Platform auth provider is not initialized, returning false\");\n    // Platform broker auth providers are not available\n    return false;\n  }\n  if (authenticationScheme) {\n    switch (authenticationScheme) {\n      case AuthenticationScheme.BEARER:\n      case AuthenticationScheme.POP:\n        logger.trace(\"isBrokerAvailable: authenticationScheme is supported, returning true\");\n        return true;\n      default:\n        logger.trace(\"isBrokerAvailable: authenticationScheme is not supported, returning false\");\n        return false;\n    }\n  }\n  return true;\n}\nexport { getPlatformAuthProvider, isDomEnabledForPlatformAuth, isPlatformAuthAllowed, isPlatformBrokerAvailable };","map":{"version":3,"names":["isPlatformBrokerAvailable","loggerOptions","perfClient","correlationId","logger","Logger","name","version","trace","performanceClient","StubPerformanceClient","window","getPlatformAuthProvider","createNewGuid","nativeBrokerHandshakeTimeout","enablePlatformBrokerDOMSupport","isDomEnabledForPlatformAuth","platformAuthProvider","PlatformAuthDOMHandler","createProvider","PlatformAuthExtensionHandler","DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS","e","sessionStorage","BrowserCacheLocation","SessionStorage","getItem","PLATFORM_AUTH_DOM_SUPPORT","isPlatformAuthAllowed","config","authenticationScheme","system","allowPlatformBroker","AuthenticationScheme","BEARER","POP"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-browser/src/broker/nativeBroker/PlatformAuthProvider.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    LoggerOptions,\n    IPerformanceClient,\n    Logger,\n    AuthenticationScheme,\n    StubPerformanceClient,\n} from \"@azure/msal-common/browser\";\nimport { name, version } from \"../../packageMetadata.js\";\nimport {\n    BrowserConfiguration,\n    DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS,\n} from \"../../config/Configuration.js\";\nimport { PlatformAuthExtensionHandler } from \"./PlatformAuthExtensionHandler.js\";\nimport { IPlatformAuthHandler } from \"./IPlatformAuthHandler.js\";\nimport { PlatformAuthDOMHandler } from \"./PlatformAuthDOMHandler.js\";\nimport { createNewGuid } from \"../../crypto/BrowserCrypto.js\";\nimport {\n    BrowserCacheLocation,\n    PLATFORM_AUTH_DOM_SUPPORT,\n} from \"../../utils/BrowserConstants.js\";\n\n/**\n * Checks if the platform broker is available in the current environment.\n * @param loggerOptions\n * @param perfClient\n * @returns\n */\nexport async function isPlatformBrokerAvailable(\n    loggerOptions?: LoggerOptions,\n    perfClient?: IPerformanceClient,\n    correlationId?: string\n): Promise<boolean> {\n    const logger = new Logger(loggerOptions || {}, name, version);\n\n    logger.trace(\"isPlatformBrokerAvailable called\");\n\n    const performanceClient = perfClient || new StubPerformanceClient();\n\n    if (typeof window === \"undefined\") {\n        logger.trace(\"Non-browser environment detected, returning false\");\n        return false;\n    }\n\n    return !!(await getPlatformAuthProvider(\n        logger,\n        performanceClient,\n        correlationId || createNewGuid()\n    ));\n}\n\nexport async function getPlatformAuthProvider(\n    logger: Logger,\n    performanceClient: IPerformanceClient,\n    correlationId: string,\n    nativeBrokerHandshakeTimeout?: number\n): Promise<IPlatformAuthHandler | undefined> {\n    logger.trace(\"getPlatformAuthProvider called\", correlationId);\n\n    const enablePlatformBrokerDOMSupport = isDomEnabledForPlatformAuth();\n\n    logger.trace(\n        \"Has client allowed platform auth via DOM API: \" +\n            enablePlatformBrokerDOMSupport\n    );\n    let platformAuthProvider: IPlatformAuthHandler | undefined;\n    try {\n        if (enablePlatformBrokerDOMSupport) {\n            // Check if DOM platform API is supported first\n            platformAuthProvider = await PlatformAuthDOMHandler.createProvider(\n                logger,\n                performanceClient,\n                correlationId\n            );\n        }\n        if (!platformAuthProvider) {\n            logger.trace(\n                \"Platform auth via DOM API not available, checking for extension\"\n            );\n            /*\n             * If DOM APIs are not available, check if browser extension is available.\n             * Platform authentication via DOM APIs is preferred over extension APIs.\n             */\n            platformAuthProvider =\n                await PlatformAuthExtensionHandler.createProvider(\n                    logger,\n                    nativeBrokerHandshakeTimeout ||\n                        DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS,\n                    performanceClient\n                );\n        }\n    } catch (e) {\n        logger.trace(\"Platform auth not available\", e as string);\n    }\n    return platformAuthProvider;\n}\n\n/**\n * Returns true if the DOM API support for platform auth is enabled in session storage\n * @returns boolean\n * @deprecated\n */\nexport function isDomEnabledForPlatformAuth(): boolean {\n    let sessionStorage: Storage | undefined;\n    try {\n        sessionStorage = window[BrowserCacheLocation.SessionStorage];\n        // Mute errors if it's a non-browser environment or cookies are blocked.\n        return sessionStorage?.getItem(PLATFORM_AUTH_DOM_SUPPORT) === \"true\";\n    } catch (e) {\n        return false;\n    }\n}\n\n/**\n * Returns boolean indicating whether or not the request should attempt to use native broker\n * @param logger\n * @param config\n * @param platformAuthProvider\n * @param authenticationScheme\n */\nexport function isPlatformAuthAllowed(\n    config: BrowserConfiguration,\n    logger: Logger,\n    platformAuthProvider?: IPlatformAuthHandler,\n    authenticationScheme?: AuthenticationScheme\n): boolean {\n    logger.trace(\"isBrokerAvailable called\");\n    if (!config.system.allowPlatformBroker) {\n        logger.trace(\n            \"isBrokerAvailable: allowPlatformBroker is not enabled, returning false\"\n        );\n        // Developer disabled WAM\n        return false;\n    }\n\n    if (!platformAuthProvider) {\n        logger.trace(\n            \"isBrokerAvailable: Platform auth provider is not initialized, returning false\"\n        );\n        // Platform broker auth providers are not available\n        return false;\n    }\n\n    if (authenticationScheme) {\n        switch (authenticationScheme) {\n            case AuthenticationScheme.BEARER:\n            case AuthenticationScheme.POP:\n                logger.trace(\n                    \"isBrokerAvailable: authenticationScheme is supported, returning true\"\n                );\n                return true;\n            default:\n                logger.trace(\n                    \"isBrokerAvailable: authenticationScheme is not supported, returning false\"\n                );\n                return false;\n        }\n    }\n    return true;\n}\n"],"mappings":";;;;;;;;;;;AAAA;;;AAGG;AAuBH;;;;;AAKG;AACI,eAAeA,yBAAyBA,CAC3CC,aAA6B,EAC7BC,UAA+B,EAC/BC,aAAsB;EAEtB,MAAMC,MAAM,GAAG,IAAIC,MAAM,CAACJ,aAAa,IAAI,EAAE,EAAEK,IAAI,EAAEC,OAAO,CAAC;EAE7DH,MAAM,CAACI,KAAK,CAAC,kCAAkC,CAAC;EAEhD,MAAMC,iBAAiB,GAAGP,UAAU,IAAI,IAAIQ,qBAAqB,EAAE;EAEnE,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;IAC/BP,MAAM,CAACI,KAAK,CAAC,mDAAmD,CAAC;IACjE,OAAO,KAAK;EACf;EAED,OAAO,CAAC,EAAE,MAAMI,uBAAuB,CACnCR,MAAM,EACNK,iBAAiB,EACjBN,aAAa,IAAIU,aAAa,EAAE,CACnC,CAAC;AACN;AAEO,eAAeD,uBAAuBA,CACzCR,MAAc,EACdK,iBAAqC,EACrCN,aAAqB,EACrBW,4BAAqC;EAErCV,MAAM,CAACI,KAAK,CAAC,gCAAgC,EAAEL,aAAa,CAAC;EAE7D,MAAMY,8BAA8B,GAAGC,2BAA2B,EAAE;EAEpEZ,MAAM,CAACI,KAAK,CACR,gDAAgD,GAC5CO,8BAA8B,CACrC;EACD,IAAIE,oBAAsD;EAC1D,IAAI;IACA,IAAIF,8BAA8B,EAAE;;MAEhCE,oBAAoB,GAAG,MAAMC,sBAAsB,CAACC,cAAc,CAC9Df,MAAM,EACNK,iBAAiB,EACjBN,aAAa,CAChB;IACJ;IACD,IAAI,CAACc,oBAAoB,EAAE;MACvBb,MAAM,CAACI,KAAK,CACR,iEAAiE,CACpE;MACD;;;AAGG;MACHS,oBAAoB,GAChB,MAAMG,4BAA4B,CAACD,cAAc,CAC7Cf,MAAM,EACNU,4BAA4B,IACxBO,0CAA0C,EAC9CZ,iBAAiB,CACpB;IACR;EACJ,EAAC,OAAOa,CAAC,EAAE;IACRlB,MAAM,CAACI,KAAK,CAAC,6BAA6B,EAAEc,CAAW,CAAC;EAC3D;EACD,OAAOL,oBAAoB;AAC/B;AAEA;;;;AAIG;SACaD,2BAA2BA,CAAA;EACvC,IAAIO,cAAmC;EACvC,IAAI;IACAA,cAAc,GAAGZ,MAAM,CAACa,oBAAoB,CAACC,cAAc,CAAC;;IAE5D,OAAOF,cAAc,EAAEG,OAAO,CAACC,yBAAyB,CAAC,KAAK,MAAM;EACvE,EAAC,OAAOL,CAAC,EAAE;IACR,OAAO,KAAK;EACf;AACL;AAEA;;;;;;AAMG;AACG,SAAUM,qBAAqBA,CACjCC,MAA4B,EAC5BzB,MAAc,EACda,oBAA2C,EAC3Ca,oBAA2C;EAE3C1B,MAAM,CAACI,KAAK,CAAC,0BAA0B,CAAC;EACxC,IAAI,CAACqB,MAAM,CAACE,MAAM,CAACC,mBAAmB,EAAE;IACpC5B,MAAM,CAACI,KAAK,CACR,wEAAwE,CAC3E;;IAED,OAAO,KAAK;EACf;EAED,IAAI,CAACS,oBAAoB,EAAE;IACvBb,MAAM,CAACI,KAAK,CACR,+EAA+E,CAClF;;IAED,OAAO,KAAK;EACf;EAED,IAAIsB,oBAAoB,EAAE;IACtB,QAAQA,oBAAoB;MACxB,KAAKG,oBAAoB,CAACC,MAAM;MAChC,KAAKD,oBAAoB,CAACE,GAAG;QACzB/B,MAAM,CAACI,KAAK,CACR,sEAAsE,CACzE;QACD,OAAO,IAAI;MACf;QACIJ,MAAM,CAACI,KAAK,CACR,2EAA2E,CAC9E;QACD,OAAO,KAAK;IACnB;EACJ;EACD,OAAO,IAAI;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}