{"ast":null,"code":"/*! @azure/msal-common v15.7.0 2025-05-30 */\n'use strict';\n\nimport { ResponseMode, OIDC_DEFAULT_SCOPES, HeaderNames, CLIENT_INFO, ClaimsRequestKeys, PasswordGrantConstants, AuthenticationScheme, ThrottlingConstants } from '../utils/Constants.mjs';\nimport { CLIENT_ID, BROKER_CLIENT_ID, REDIRECT_URI, RESPONSE_TYPE, RESPONSE_MODE, NATIVE_BROKER, SCOPE, POST_LOGOUT_URI, ID_TOKEN_HINT, DOMAIN_HINT, LOGIN_HINT, SID, CLAIMS, CLIENT_REQUEST_ID, X_CLIENT_SKU, X_CLIENT_VER, X_CLIENT_OS, X_CLIENT_CPU, X_APP_NAME, X_APP_VER, PROMPT, STATE, NONCE, CODE_CHALLENGE, CODE_CHALLENGE_METHOD, CODE, DEVICE_CODE, REFRESH_TOKEN, CODE_VERIFIER, CLIENT_SECRET, CLIENT_ASSERTION, CLIENT_ASSERTION_TYPE, OBO_ASSERTION, REQUESTED_TOKEN_USE, GRANT_TYPE, INSTANCE_AWARE, TOKEN_TYPE, REQ_CNF, X_CLIENT_CURR_TELEM, X_CLIENT_LAST_TELEM, X_MS_LIB_CAPABILITY, LOGOUT_HINT, BROKER_REDIRECT_URI, EAR_JWK, EAR_JWE_CRYPTO } from '../constants/AADServerParamKeys.mjs';\nimport { ScopeSet } from './ScopeSet.mjs';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { invalidClaims, pkceParamsMissing } from '../error/ClientConfigurationErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nfunction instrumentBrokerParams(parameters, correlationId, performanceClient) {\n  if (!correlationId) {\n    return;\n  }\n  const clientId = parameters.get(CLIENT_ID);\n  if (clientId && parameters.has(BROKER_CLIENT_ID)) {\n    performanceClient?.addFields({\n      embeddedClientId: clientId,\n      embeddedRedirectUri: parameters.get(REDIRECT_URI)\n    }, correlationId);\n  }\n}\n/**\r\n * Add the given response_type\r\n * @param parameters\r\n * @param responseType\r\n */\nfunction addResponseType(parameters, responseType) {\n  parameters.set(RESPONSE_TYPE, responseType);\n}\n/**\r\n * add response_mode. defaults to query.\r\n * @param responseMode\r\n */\nfunction addResponseMode(parameters, responseMode) {\n  parameters.set(RESPONSE_MODE, responseMode ? responseMode : ResponseMode.QUERY);\n}\n/**\r\n * Add flag to indicate STS should attempt to use WAM if available\r\n */\nfunction addNativeBroker(parameters) {\n  parameters.set(NATIVE_BROKER, \"1\");\n}\n/**\r\n * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\r\n * @param scopeSet\r\n * @param addOidcScopes\r\n */\nfunction addScopes(parameters, scopes, addOidcScopes = true, defaultScopes = OIDC_DEFAULT_SCOPES) {\n  // Always add openid to the scopes when adding OIDC scopes\n  if (addOidcScopes && !defaultScopes.includes(\"openid\") && !scopes.includes(\"openid\")) {\n    defaultScopes.push(\"openid\");\n  }\n  const requestScopes = addOidcScopes ? [...(scopes || []), ...defaultScopes] : scopes || [];\n  const scopeSet = new ScopeSet(requestScopes);\n  parameters.set(SCOPE, scopeSet.printScopes());\n}\n/**\r\n * add clientId\r\n * @param clientId\r\n */\nfunction addClientId(parameters, clientId) {\n  parameters.set(CLIENT_ID, clientId);\n}\n/**\r\n * add redirect_uri\r\n * @param redirectUri\r\n */\nfunction addRedirectUri(parameters, redirectUri) {\n  parameters.set(REDIRECT_URI, redirectUri);\n}\n/**\r\n * add post logout redirectUri\r\n * @param redirectUri\r\n */\nfunction addPostLogoutRedirectUri(parameters, redirectUri) {\n  parameters.set(POST_LOGOUT_URI, redirectUri);\n}\n/**\r\n * add id_token_hint to logout request\r\n * @param idTokenHint\r\n */\nfunction addIdTokenHint(parameters, idTokenHint) {\n  parameters.set(ID_TOKEN_HINT, idTokenHint);\n}\n/**\r\n * add domain_hint\r\n * @param domainHint\r\n */\nfunction addDomainHint(parameters, domainHint) {\n  parameters.set(DOMAIN_HINT, domainHint);\n}\n/**\r\n * add login_hint\r\n * @param loginHint\r\n */\nfunction addLoginHint(parameters, loginHint) {\n  parameters.set(LOGIN_HINT, loginHint);\n}\n/**\r\n * Adds the CCS (Cache Credential Service) query parameter for login_hint\r\n * @param loginHint\r\n */\nfunction addCcsUpn(parameters, loginHint) {\n  parameters.set(HeaderNames.CCS_HEADER, `UPN:${loginHint}`);\n}\n/**\r\n * Adds the CCS (Cache Credential Service) query parameter for account object\r\n * @param loginHint\r\n */\nfunction addCcsOid(parameters, clientInfo) {\n  parameters.set(HeaderNames.CCS_HEADER, `Oid:${clientInfo.uid}@${clientInfo.utid}`);\n}\n/**\r\n * add sid\r\n * @param sid\r\n */\nfunction addSid(parameters, sid) {\n  parameters.set(SID, sid);\n}\n/**\r\n * add claims\r\n * @param claims\r\n */\nfunction addClaims(parameters, claims, clientCapabilities) {\n  const mergedClaims = addClientCapabilitiesToClaims(claims, clientCapabilities);\n  try {\n    JSON.parse(mergedClaims);\n  } catch (e) {\n    throw createClientConfigurationError(invalidClaims);\n  }\n  parameters.set(CLAIMS, mergedClaims);\n}\n/**\r\n * add correlationId\r\n * @param correlationId\r\n */\nfunction addCorrelationId(parameters, correlationId) {\n  parameters.set(CLIENT_REQUEST_ID, correlationId);\n}\n/**\r\n * add library info query params\r\n * @param libraryInfo\r\n */\nfunction addLibraryInfo(parameters, libraryInfo) {\n  // Telemetry Info\n  parameters.set(X_CLIENT_SKU, libraryInfo.sku);\n  parameters.set(X_CLIENT_VER, libraryInfo.version);\n  if (libraryInfo.os) {\n    parameters.set(X_CLIENT_OS, libraryInfo.os);\n  }\n  if (libraryInfo.cpu) {\n    parameters.set(X_CLIENT_CPU, libraryInfo.cpu);\n  }\n}\n/**\r\n * Add client telemetry parameters\r\n * @param appTelemetry\r\n */\nfunction addApplicationTelemetry(parameters, appTelemetry) {\n  if (appTelemetry?.appName) {\n    parameters.set(X_APP_NAME, appTelemetry.appName);\n  }\n  if (appTelemetry?.appVersion) {\n    parameters.set(X_APP_VER, appTelemetry.appVersion);\n  }\n}\n/**\r\n * add prompt\r\n * @param prompt\r\n */\nfunction addPrompt(parameters, prompt) {\n  parameters.set(PROMPT, prompt);\n}\n/**\r\n * add state\r\n * @param state\r\n */\nfunction addState(parameters, state) {\n  if (state) {\n    parameters.set(STATE, state);\n  }\n}\n/**\r\n * add nonce\r\n * @param nonce\r\n */\nfunction addNonce(parameters, nonce) {\n  parameters.set(NONCE, nonce);\n}\n/**\r\n * add code_challenge and code_challenge_method\r\n * - throw if either of them are not passed\r\n * @param codeChallenge\r\n * @param codeChallengeMethod\r\n */\nfunction addCodeChallengeParams(parameters, codeChallenge, codeChallengeMethod) {\n  if (codeChallenge && codeChallengeMethod) {\n    parameters.set(CODE_CHALLENGE, codeChallenge);\n    parameters.set(CODE_CHALLENGE_METHOD, codeChallengeMethod);\n  } else {\n    throw createClientConfigurationError(pkceParamsMissing);\n  }\n}\n/**\r\n * add the `authorization_code` passed by the user to exchange for a token\r\n * @param code\r\n */\nfunction addAuthorizationCode(parameters, code) {\n  parameters.set(CODE, code);\n}\n/**\r\n * add the `authorization_code` passed by the user to exchange for a token\r\n * @param code\r\n */\nfunction addDeviceCode(parameters, code) {\n  parameters.set(DEVICE_CODE, code);\n}\n/**\r\n * add the `refreshToken` passed by the user\r\n * @param refreshToken\r\n */\nfunction addRefreshToken(parameters, refreshToken) {\n  parameters.set(REFRESH_TOKEN, refreshToken);\n}\n/**\r\n * add the `code_verifier` passed by the user to exchange for a token\r\n * @param codeVerifier\r\n */\nfunction addCodeVerifier(parameters, codeVerifier) {\n  parameters.set(CODE_VERIFIER, codeVerifier);\n}\n/**\r\n * add client_secret\r\n * @param clientSecret\r\n */\nfunction addClientSecret(parameters, clientSecret) {\n  parameters.set(CLIENT_SECRET, clientSecret);\n}\n/**\r\n * add clientAssertion for confidential client flows\r\n * @param clientAssertion\r\n */\nfunction addClientAssertion(parameters, clientAssertion) {\n  if (clientAssertion) {\n    parameters.set(CLIENT_ASSERTION, clientAssertion);\n  }\n}\n/**\r\n * add clientAssertionType for confidential client flows\r\n * @param clientAssertionType\r\n */\nfunction addClientAssertionType(parameters, clientAssertionType) {\n  if (clientAssertionType) {\n    parameters.set(CLIENT_ASSERTION_TYPE, clientAssertionType);\n  }\n}\n/**\r\n * add OBO assertion for confidential client flows\r\n * @param clientAssertion\r\n */\nfunction addOboAssertion(parameters, oboAssertion) {\n  parameters.set(OBO_ASSERTION, oboAssertion);\n}\n/**\r\n * add grant type\r\n * @param grantType\r\n */\nfunction addRequestTokenUse(parameters, tokenUse) {\n  parameters.set(REQUESTED_TOKEN_USE, tokenUse);\n}\n/**\r\n * add grant type\r\n * @param grantType\r\n */\nfunction addGrantType(parameters, grantType) {\n  parameters.set(GRANT_TYPE, grantType);\n}\n/**\r\n * add client info\r\n *\r\n */\nfunction addClientInfo(parameters) {\n  parameters.set(CLIENT_INFO, \"1\");\n}\nfunction addInstanceAware(parameters) {\n  if (!parameters.has(INSTANCE_AWARE)) {\n    parameters.set(INSTANCE_AWARE, \"true\");\n  }\n}\n/**\r\n * add extraQueryParams\r\n * @param eQParams\r\n */\nfunction addExtraQueryParameters(parameters, eQParams) {\n  Object.entries(eQParams).forEach(([key, value]) => {\n    if (!parameters.has(key) && value) {\n      parameters.set(key, value);\n    }\n  });\n}\nfunction addClientCapabilitiesToClaims(claims, clientCapabilities) {\n  let mergedClaims;\n  // Parse provided claims into JSON object or initialize empty object\n  if (!claims) {\n    mergedClaims = {};\n  } else {\n    try {\n      mergedClaims = JSON.parse(claims);\n    } catch (e) {\n      throw createClientConfigurationError(invalidClaims);\n    }\n  }\n  if (clientCapabilities && clientCapabilities.length > 0) {\n    if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\n      // Add access_token key to claims object\n      mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\n    }\n    // Add xms_cc claim with provided clientCapabilities to access_token key\n    mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\n      values: clientCapabilities\n    };\n  }\n  return JSON.stringify(mergedClaims);\n}\n/**\r\n * adds `username` for Password Grant flow\r\n * @param username\r\n */\nfunction addUsername(parameters, username) {\n  parameters.set(PasswordGrantConstants.username, username);\n}\n/**\r\n * adds `password` for Password Grant flow\r\n * @param password\r\n */\nfunction addPassword(parameters, password) {\n  parameters.set(PasswordGrantConstants.password, password);\n}\n/**\r\n * add pop_jwk to query params\r\n * @param cnfString\r\n */\nfunction addPopToken(parameters, cnfString) {\n  if (cnfString) {\n    parameters.set(TOKEN_TYPE, AuthenticationScheme.POP);\n    parameters.set(REQ_CNF, cnfString);\n  }\n}\n/**\r\n * add SSH JWK and key ID to query params\r\n */\nfunction addSshJwk(parameters, sshJwkString) {\n  if (sshJwkString) {\n    parameters.set(TOKEN_TYPE, AuthenticationScheme.SSH);\n    parameters.set(REQ_CNF, sshJwkString);\n  }\n}\n/**\r\n * add server telemetry fields\r\n * @param serverTelemetryManager\r\n */\nfunction addServerTelemetry(parameters, serverTelemetryManager) {\n  parameters.set(X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\n  parameters.set(X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\n}\n/**\r\n * Adds parameter that indicates to the server that throttling is supported\r\n */\nfunction addThrottling(parameters) {\n  parameters.set(X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\n}\n/**\r\n * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\r\n */\nfunction addLogoutHint(parameters, logoutHint) {\n  parameters.set(LOGOUT_HINT, logoutHint);\n}\nfunction addBrokerParameters(parameters, brokerClientId, brokerRedirectUri) {\n  if (!parameters.has(BROKER_CLIENT_ID)) {\n    parameters.set(BROKER_CLIENT_ID, brokerClientId);\n  }\n  if (!parameters.has(BROKER_REDIRECT_URI)) {\n    parameters.set(BROKER_REDIRECT_URI, brokerRedirectUri);\n  }\n}\n/**\r\n * Add EAR (Encrypted Authorize Response) request parameters\r\n * @param parameters\r\n * @param jwk\r\n */\nfunction addEARParameters(parameters, jwk) {\n  parameters.set(EAR_JWK, encodeURIComponent(jwk));\n  // ear_jwe_crypto will always have value: {\"alg\":\"dir\",\"enc\":\"A256GCM\"} so we can hardcode this\n  const jweCryptoB64Encoded = \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0\";\n  parameters.set(EAR_JWE_CRYPTO, jweCryptoB64Encoded);\n}\nexport { addApplicationTelemetry, addAuthorizationCode, addBrokerParameters, addCcsOid, addCcsUpn, addClaims, addClientAssertion, addClientAssertionType, addClientCapabilitiesToClaims, addClientId, addClientInfo, addClientSecret, addCodeChallengeParams, addCodeVerifier, addCorrelationId, addDeviceCode, addDomainHint, addEARParameters, addExtraQueryParameters, addGrantType, addIdTokenHint, addInstanceAware, addLibraryInfo, addLoginHint, addLogoutHint, addNativeBroker, addNonce, addOboAssertion, addPassword, addPopToken, addPostLogoutRedirectUri, addPrompt, addRedirectUri, addRefreshToken, addRequestTokenUse, addResponseMode, addResponseType, addScopes, addServerTelemetry, addSid, addSshJwk, addState, addThrottling, addUsername, instrumentBrokerParams };","map":{"version":3,"names":["instrumentBrokerParams","parameters","correlationId","performanceClient","clientId","get","CLIENT_ID","has","BROKER_CLIENT_ID","addFields","embeddedClientId","embeddedRedirectUri","REDIRECT_URI","addResponseType","responseType","set","RESPONSE_TYPE","addResponseMode","responseMode","RESPONSE_MODE","ResponseMode","QUERY","addNativeBroker","NATIVE_BROKER","addScopes","scopes","addOidcScopes","defaultScopes","OIDC_DEFAULT_SCOPES","includes","push","requestScopes","scopeSet","ScopeSet","SCOPE","printScopes","addClientId","addRedirectUri","redirectUri","addPostLogoutRedirectUri","POST_LOGOUT_URI","addIdTokenHint","idTokenHint","ID_TOKEN_HINT","addDomainHint","domainHint","DOMAIN_HINT","addLoginHint","loginHint","LOGIN_HINT","addCcsUpn","HeaderNames","CCS_HEADER","addCcsOid","clientInfo","uid","utid","addSid","sid","SID","addClaims","claims","clientCapabilities","mergedClaims","addClientCapabilitiesToClaims","JSON","parse","e","createClientConfigurationError","invalidClaims","CLAIMS","addCorrelationId","CLIENT_REQUEST_ID","addLibraryInfo","libraryInfo","X_CLIENT_SKU","sku","X_CLIENT_VER","version","os","X_CLIENT_OS","cpu","X_CLIENT_CPU","addApplicationTelemetry","appTelemetry","appName","X_APP_NAME","appVersion","X_APP_VER","addPrompt","prompt","PROMPT","addState","state","STATE","addNonce","nonce","NONCE","addCodeChallengeParams","codeChallenge","codeChallengeMethod","CODE_CHALLENGE","CODE_CHALLENGE_METHOD","pkceParamsMissing","addAuthorizationCode","code","CODE","addDeviceCode","DEVICE_CODE","addRefreshToken","refreshToken","REFRESH_TOKEN","addCodeVerifier","codeVerifier","CODE_VERIFIER","addClientSecret","clientSecret","CLIENT_SECRET","addClientAssertion","clientAssertion","CLIENT_ASSERTION","addClientAssertionType","clientAssertionType","CLIENT_ASSERTION_TYPE","addOboAssertion","oboAssertion","OBO_ASSERTION","addRequestTokenUse","tokenUse","REQUESTED_TOKEN_USE","addGrantType","grantType","GRANT_TYPE","addClientInfo","CLIENT_INFO","addInstanceAware","INSTANCE_AWARE","addExtraQueryParameters","eQParams","Object","entries","forEach","key","value","length","hasOwnProperty","ClaimsRequestKeys","ACCESS_TOKEN","XMS_CC","values","stringify","addUsername","username","PasswordGrantConstants","addPassword","password","addPopToken","cnfString","TOKEN_TYPE","AuthenticationScheme","POP","REQ_CNF","addSshJwk","sshJwkString","SSH","addServerTelemetry","serverTelemetryManager","X_CLIENT_CURR_TELEM","generateCurrentRequestHeaderValue","X_CLIENT_LAST_TELEM","generateLastRequestHeaderValue","addThrottling","X_MS_LIB_CAPABILITY","ThrottlingConstants","X_MS_LIB_CAPABILITY_VALUE","addLogoutHint","logoutHint","LOGOUT_HINT","addBrokerParameters","brokerClientId","brokerRedirectUri","BROKER_REDIRECT_URI","addEARParameters","jwk","EAR_JWK","encodeURIComponent","jweCryptoB64Encoded","EAR_JWE_CRYPTO"],"sources":["/Users/yuri.narang/Desktop/bondly-workplace-community-hub/node_modules/@azure/msal-common/src/request/RequestParameterBuilder.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ResponseMode,\n    CLIENT_INFO,\n    AuthenticationScheme,\n    ClaimsRequestKeys,\n    PasswordGrantConstants,\n    OIDC_DEFAULT_SCOPES,\n    ThrottlingConstants,\n    HeaderNames,\n    OAuthResponseType,\n} from \"../utils/Constants.js\";\nimport * as AADServerParamKeys from \"../constants/AADServerParamKeys.js\";\nimport { ScopeSet } from \"./ScopeSet.js\";\nimport {\n    createClientConfigurationError,\n    ClientConfigurationErrorCodes,\n} from \"../error/ClientConfigurationError.js\";\nimport { StringDict } from \"../utils/MsalTypes.js\";\nimport {\n    ApplicationTelemetry,\n    LibraryInfo,\n} from \"../config/ClientConfiguration.js\";\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager.js\";\nimport { ClientInfo } from \"../account/ClientInfo.js\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient.js\";\n\nexport function instrumentBrokerParams(\n    parameters: Map<string, string>,\n    correlationId?: string,\n    performanceClient?: IPerformanceClient\n): void {\n    if (!correlationId) {\n        return;\n    }\n\n    const clientId = parameters.get(AADServerParamKeys.CLIENT_ID);\n    if (clientId && parameters.has(AADServerParamKeys.BROKER_CLIENT_ID)) {\n        performanceClient?.addFields(\n            {\n                embeddedClientId: clientId,\n                embeddedRedirectUri: parameters.get(\n                    AADServerParamKeys.REDIRECT_URI\n                ),\n            },\n            correlationId\n        );\n    }\n}\n\n/**\n * Add the given response_type\n * @param parameters\n * @param responseType\n */\nexport function addResponseType(\n    parameters: Map<string, string>,\n    responseType: OAuthResponseType\n): void {\n    parameters.set(AADServerParamKeys.RESPONSE_TYPE, responseType);\n}\n\n/**\n * add response_mode. defaults to query.\n * @param responseMode\n */\nexport function addResponseMode(\n    parameters: Map<string, string>,\n    responseMode?: ResponseMode\n): void {\n    parameters.set(\n        AADServerParamKeys.RESPONSE_MODE,\n        responseMode ? responseMode : ResponseMode.QUERY\n    );\n}\n\n/**\n * Add flag to indicate STS should attempt to use WAM if available\n */\nexport function addNativeBroker(parameters: Map<string, string>): void {\n    parameters.set(AADServerParamKeys.NATIVE_BROKER, \"1\");\n}\n\n/**\n * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\n * @param scopeSet\n * @param addOidcScopes\n */\nexport function addScopes(\n    parameters: Map<string, string>,\n    scopes: string[],\n    addOidcScopes: boolean = true,\n    defaultScopes: Array<string> = OIDC_DEFAULT_SCOPES\n): void {\n    // Always add openid to the scopes when adding OIDC scopes\n    if (\n        addOidcScopes &&\n        !defaultScopes.includes(\"openid\") &&\n        !scopes.includes(\"openid\")\n    ) {\n        defaultScopes.push(\"openid\");\n    }\n    const requestScopes = addOidcScopes\n        ? [...(scopes || []), ...defaultScopes]\n        : scopes || [];\n    const scopeSet = new ScopeSet(requestScopes);\n    parameters.set(AADServerParamKeys.SCOPE, scopeSet.printScopes());\n}\n\n/**\n * add clientId\n * @param clientId\n */\nexport function addClientId(\n    parameters: Map<string, string>,\n    clientId: string\n): void {\n    parameters.set(AADServerParamKeys.CLIENT_ID, clientId);\n}\n\n/**\n * add redirect_uri\n * @param redirectUri\n */\nexport function addRedirectUri(\n    parameters: Map<string, string>,\n    redirectUri: string\n): void {\n    parameters.set(AADServerParamKeys.REDIRECT_URI, redirectUri);\n}\n\n/**\n * add post logout redirectUri\n * @param redirectUri\n */\nexport function addPostLogoutRedirectUri(\n    parameters: Map<string, string>,\n    redirectUri: string\n): void {\n    parameters.set(AADServerParamKeys.POST_LOGOUT_URI, redirectUri);\n}\n\n/**\n * add id_token_hint to logout request\n * @param idTokenHint\n */\nexport function addIdTokenHint(\n    parameters: Map<string, string>,\n    idTokenHint: string\n): void {\n    parameters.set(AADServerParamKeys.ID_TOKEN_HINT, idTokenHint);\n}\n\n/**\n * add domain_hint\n * @param domainHint\n */\nexport function addDomainHint(\n    parameters: Map<string, string>,\n    domainHint: string\n): void {\n    parameters.set(AADServerParamKeys.DOMAIN_HINT, domainHint);\n}\n\n/**\n * add login_hint\n * @param loginHint\n */\nexport function addLoginHint(\n    parameters: Map<string, string>,\n    loginHint: string\n): void {\n    parameters.set(AADServerParamKeys.LOGIN_HINT, loginHint);\n}\n\n/**\n * Adds the CCS (Cache Credential Service) query parameter for login_hint\n * @param loginHint\n */\nexport function addCcsUpn(\n    parameters: Map<string, string>,\n    loginHint: string\n): void {\n    parameters.set(HeaderNames.CCS_HEADER, `UPN:${loginHint}`);\n}\n\n/**\n * Adds the CCS (Cache Credential Service) query parameter for account object\n * @param loginHint\n */\nexport function addCcsOid(\n    parameters: Map<string, string>,\n    clientInfo: ClientInfo\n): void {\n    parameters.set(\n        HeaderNames.CCS_HEADER,\n        `Oid:${clientInfo.uid}@${clientInfo.utid}`\n    );\n}\n\n/**\n * add sid\n * @param sid\n */\nexport function addSid(parameters: Map<string, string>, sid: string): void {\n    parameters.set(AADServerParamKeys.SID, sid);\n}\n\n/**\n * add claims\n * @param claims\n */\nexport function addClaims(\n    parameters: Map<string, string>,\n    claims?: string,\n    clientCapabilities?: Array<string>\n): void {\n    const mergedClaims = addClientCapabilitiesToClaims(\n        claims,\n        clientCapabilities\n    );\n    try {\n        JSON.parse(mergedClaims);\n    } catch (e) {\n        throw createClientConfigurationError(\n            ClientConfigurationErrorCodes.invalidClaims\n        );\n    }\n    parameters.set(AADServerParamKeys.CLAIMS, mergedClaims);\n}\n\n/**\n * add correlationId\n * @param correlationId\n */\nexport function addCorrelationId(\n    parameters: Map<string, string>,\n    correlationId: string\n): void {\n    parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, correlationId);\n}\n\n/**\n * add library info query params\n * @param libraryInfo\n */\nexport function addLibraryInfo(\n    parameters: Map<string, string>,\n    libraryInfo: LibraryInfo\n): void {\n    // Telemetry Info\n    parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\n    parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\n    if (libraryInfo.os) {\n        parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\n    }\n    if (libraryInfo.cpu) {\n        parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\n    }\n}\n\n/**\n * Add client telemetry parameters\n * @param appTelemetry\n */\nexport function addApplicationTelemetry(\n    parameters: Map<string, string>,\n    appTelemetry: ApplicationTelemetry\n): void {\n    if (appTelemetry?.appName) {\n        parameters.set(AADServerParamKeys.X_APP_NAME, appTelemetry.appName);\n    }\n\n    if (appTelemetry?.appVersion) {\n        parameters.set(AADServerParamKeys.X_APP_VER, appTelemetry.appVersion);\n    }\n}\n\n/**\n * add prompt\n * @param prompt\n */\nexport function addPrompt(\n    parameters: Map<string, string>,\n    prompt: string\n): void {\n    parameters.set(AADServerParamKeys.PROMPT, prompt);\n}\n\n/**\n * add state\n * @param state\n */\nexport function addState(parameters: Map<string, string>, state: string): void {\n    if (state) {\n        parameters.set(AADServerParamKeys.STATE, state);\n    }\n}\n\n/**\n * add nonce\n * @param nonce\n */\nexport function addNonce(parameters: Map<string, string>, nonce: string): void {\n    parameters.set(AADServerParamKeys.NONCE, nonce);\n}\n\n/**\n * add code_challenge and code_challenge_method\n * - throw if either of them are not passed\n * @param codeChallenge\n * @param codeChallengeMethod\n */\nexport function addCodeChallengeParams(\n    parameters: Map<string, string>,\n    codeChallenge?: string,\n    codeChallengeMethod?: string\n): void {\n    if (codeChallenge && codeChallengeMethod) {\n        parameters.set(AADServerParamKeys.CODE_CHALLENGE, codeChallenge);\n        parameters.set(\n            AADServerParamKeys.CODE_CHALLENGE_METHOD,\n            codeChallengeMethod\n        );\n    } else {\n        throw createClientConfigurationError(\n            ClientConfigurationErrorCodes.pkceParamsMissing\n        );\n    }\n}\n\n/**\n * add the `authorization_code` passed by the user to exchange for a token\n * @param code\n */\nexport function addAuthorizationCode(\n    parameters: Map<string, string>,\n    code: string\n): void {\n    parameters.set(AADServerParamKeys.CODE, code);\n}\n\n/**\n * add the `authorization_code` passed by the user to exchange for a token\n * @param code\n */\nexport function addDeviceCode(\n    parameters: Map<string, string>,\n    code: string\n): void {\n    parameters.set(AADServerParamKeys.DEVICE_CODE, code);\n}\n\n/**\n * add the `refreshToken` passed by the user\n * @param refreshToken\n */\nexport function addRefreshToken(\n    parameters: Map<string, string>,\n    refreshToken: string\n): void {\n    parameters.set(AADServerParamKeys.REFRESH_TOKEN, refreshToken);\n}\n\n/**\n * add the `code_verifier` passed by the user to exchange for a token\n * @param codeVerifier\n */\nexport function addCodeVerifier(\n    parameters: Map<string, string>,\n    codeVerifier: string\n): void {\n    parameters.set(AADServerParamKeys.CODE_VERIFIER, codeVerifier);\n}\n\n/**\n * add client_secret\n * @param clientSecret\n */\nexport function addClientSecret(\n    parameters: Map<string, string>,\n    clientSecret: string\n): void {\n    parameters.set(AADServerParamKeys.CLIENT_SECRET, clientSecret);\n}\n\n/**\n * add clientAssertion for confidential client flows\n * @param clientAssertion\n */\nexport function addClientAssertion(\n    parameters: Map<string, string>,\n    clientAssertion: string\n): void {\n    if (clientAssertion) {\n        parameters.set(AADServerParamKeys.CLIENT_ASSERTION, clientAssertion);\n    }\n}\n\n/**\n * add clientAssertionType for confidential client flows\n * @param clientAssertionType\n */\nexport function addClientAssertionType(\n    parameters: Map<string, string>,\n    clientAssertionType: string\n): void {\n    if (clientAssertionType) {\n        parameters.set(\n            AADServerParamKeys.CLIENT_ASSERTION_TYPE,\n            clientAssertionType\n        );\n    }\n}\n\n/**\n * add OBO assertion for confidential client flows\n * @param clientAssertion\n */\nexport function addOboAssertion(\n    parameters: Map<string, string>,\n    oboAssertion: string\n): void {\n    parameters.set(AADServerParamKeys.OBO_ASSERTION, oboAssertion);\n}\n\n/**\n * add grant type\n * @param grantType\n */\nexport function addRequestTokenUse(\n    parameters: Map<string, string>,\n    tokenUse: string\n): void {\n    parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, tokenUse);\n}\n\n/**\n * add grant type\n * @param grantType\n */\nexport function addGrantType(\n    parameters: Map<string, string>,\n    grantType: string\n): void {\n    parameters.set(AADServerParamKeys.GRANT_TYPE, grantType);\n}\n\n/**\n * add client info\n *\n */\nexport function addClientInfo(parameters: Map<string, string>): void {\n    parameters.set(CLIENT_INFO, \"1\");\n}\n\nexport function addInstanceAware(parameters: Map<string, string>): void {\n    if (!parameters.has(AADServerParamKeys.INSTANCE_AWARE)) {\n        parameters.set(AADServerParamKeys.INSTANCE_AWARE, \"true\");\n    }\n}\n\n/**\n * add extraQueryParams\n * @param eQParams\n */\nexport function addExtraQueryParameters(\n    parameters: Map<string, string>,\n    eQParams: StringDict\n): void {\n    Object.entries(eQParams).forEach(([key, value]) => {\n        if (!parameters.has(key) && value) {\n            parameters.set(key, value);\n        }\n    });\n}\n\nexport function addClientCapabilitiesToClaims(\n    claims?: string,\n    clientCapabilities?: Array<string>\n): string {\n    let mergedClaims: object;\n\n    // Parse provided claims into JSON object or initialize empty object\n    if (!claims) {\n        mergedClaims = {};\n    } else {\n        try {\n            mergedClaims = JSON.parse(claims);\n        } catch (e) {\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.invalidClaims\n            );\n        }\n    }\n\n    if (clientCapabilities && clientCapabilities.length > 0) {\n        if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\n            // Add access_token key to claims object\n            mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\n        }\n\n        // Add xms_cc claim with provided clientCapabilities to access_token key\n        mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] =\n            {\n                values: clientCapabilities,\n            };\n    }\n\n    return JSON.stringify(mergedClaims);\n}\n\n/**\n * adds `username` for Password Grant flow\n * @param username\n */\nexport function addUsername(\n    parameters: Map<string, string>,\n    username: string\n): void {\n    parameters.set(PasswordGrantConstants.username, username);\n}\n\n/**\n * adds `password` for Password Grant flow\n * @param password\n */\nexport function addPassword(\n    parameters: Map<string, string>,\n    password: string\n): void {\n    parameters.set(PasswordGrantConstants.password, password);\n}\n\n/**\n * add pop_jwk to query params\n * @param cnfString\n */\nexport function addPopToken(\n    parameters: Map<string, string>,\n    cnfString: string\n): void {\n    if (cnfString) {\n        parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);\n        parameters.set(AADServerParamKeys.REQ_CNF, cnfString);\n    }\n}\n\n/**\n * add SSH JWK and key ID to query params\n */\nexport function addSshJwk(\n    parameters: Map<string, string>,\n    sshJwkString: string\n): void {\n    if (sshJwkString) {\n        parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.SSH);\n        parameters.set(AADServerParamKeys.REQ_CNF, sshJwkString);\n    }\n}\n\n/**\n * add server telemetry fields\n * @param serverTelemetryManager\n */\nexport function addServerTelemetry(\n    parameters: Map<string, string>,\n    serverTelemetryManager: ServerTelemetryManager\n): void {\n    parameters.set(\n        AADServerParamKeys.X_CLIENT_CURR_TELEM,\n        serverTelemetryManager.generateCurrentRequestHeaderValue()\n    );\n    parameters.set(\n        AADServerParamKeys.X_CLIENT_LAST_TELEM,\n        serverTelemetryManager.generateLastRequestHeaderValue()\n    );\n}\n\n/**\n * Adds parameter that indicates to the server that throttling is supported\n */\nexport function addThrottling(parameters: Map<string, string>): void {\n    parameters.set(\n        AADServerParamKeys.X_MS_LIB_CAPABILITY,\n        ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE\n    );\n}\n\n/**\n * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\n */\nexport function addLogoutHint(\n    parameters: Map<string, string>,\n    logoutHint: string\n): void {\n    parameters.set(AADServerParamKeys.LOGOUT_HINT, logoutHint);\n}\n\nexport function addBrokerParameters(\n    parameters: Map<string, string>,\n    brokerClientId: string,\n    brokerRedirectUri: string\n): void {\n    if (!parameters.has(AADServerParamKeys.BROKER_CLIENT_ID)) {\n        parameters.set(AADServerParamKeys.BROKER_CLIENT_ID, brokerClientId);\n    }\n    if (!parameters.has(AADServerParamKeys.BROKER_REDIRECT_URI)) {\n        parameters.set(\n            AADServerParamKeys.BROKER_REDIRECT_URI,\n            brokerRedirectUri\n        );\n    }\n}\n\n/**\n * Add EAR (Encrypted Authorize Response) request parameters\n * @param parameters\n * @param jwk\n */\nexport function addEARParameters(\n    parameters: Map<string, string>,\n    jwk: string\n): void {\n    parameters.set(AADServerParamKeys.EAR_JWK, encodeURIComponent(jwk));\n\n    // ear_jwe_crypto will always have value: {\"alg\":\"dir\",\"enc\":\"A256GCM\"} so we can hardcode this\n    const jweCryptoB64Encoded = \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0\";\n    parameters.set(AADServerParamKeys.EAR_JWE_CRYPTO, jweCryptoB64Encoded);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}